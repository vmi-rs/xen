/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __XEN_TOOLS__: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
#[allow(unsafe_code)]
pub const __ILP32_OFF32_CFLAGS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"-m32\0") };
#[allow(unsafe_code)]
pub const __ILP32_OFF32_LDFLAGS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"-m32\0") };
#[allow(unsafe_code)]
pub const __ILP32_OFFBIG_CFLAGS: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(
        b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0",
    )
};
#[allow(unsafe_code)]
pub const __ILP32_OFFBIG_LDFLAGS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"-m32\0") };
#[allow(unsafe_code)]
pub const __LP64_OFF64_CFLAGS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"-m64\0") };
#[allow(unsafe_code)]
pub const __LP64_OFF64_LDFLAGS: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"-m64\0") };
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
#[allow(unsafe_code)]
pub const P_tmpdir: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"/tmp\0") };
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __XEN_LATEST_INTERFACE_VERSION__: u32 = 267008;
pub const __XEN_INTERFACE_VERSION__: u32 = 267008;
pub const FLAT_RING3_CS32: u32 = 57379;
pub const FLAT_RING3_CS64: u32 = 57395;
pub const FLAT_RING3_DS32: u32 = 57387;
pub const FLAT_RING3_DS64: u32 = 0;
pub const FLAT_RING3_SS32: u32 = 57387;
pub const FLAT_RING3_SS64: u32 = 57387;
pub const FLAT_KERNEL_DS64: u32 = 0;
pub const FLAT_KERNEL_DS32: u32 = 57387;
pub const FLAT_KERNEL_DS: u32 = 0;
pub const FLAT_KERNEL_CS64: u32 = 57395;
pub const FLAT_KERNEL_CS32: u32 = 57379;
pub const FLAT_KERNEL_CS: u32 = 57395;
pub const FLAT_KERNEL_SS64: u32 = 57387;
pub const FLAT_KERNEL_SS32: u32 = 57387;
pub const FLAT_KERNEL_SS: u32 = 57387;
pub const FLAT_USER_DS64: u32 = 0;
pub const FLAT_USER_DS32: u32 = 57387;
pub const FLAT_USER_DS: u32 = 0;
pub const FLAT_USER_CS64: u32 = 57395;
pub const FLAT_USER_CS32: u32 = 57379;
pub const FLAT_USER_CS: u32 = 57395;
pub const FLAT_USER_SS64: u32 = 57387;
pub const FLAT_USER_SS32: u32 = 57387;
pub const FLAT_USER_SS: u32 = 57387;
pub const __HYPERVISOR_VIRT_START: i64 = -140737488355328;
pub const __HYPERVISOR_VIRT_END: i64 = -131941395333120;
pub const __MACH2PHYS_VIRT_START: i64 = -140737488355328;
pub const __MACH2PHYS_VIRT_END: i64 = -140462610448384;
pub const SEGBASE_FS: u32 = 0;
pub const SEGBASE_GS_USER: u32 = 1;
pub const SEGBASE_GS_KERNEL: u32 = 2;
pub const SEGBASE_GS_USER_SEL: u32 = 3;
pub const _VGCF_in_syscall: u32 = 8;
pub const VGCF_in_syscall: u32 = 256;
pub const VGCF_IN_SYSCALL: u32 = 256;
#[allow(unsafe_code)]
pub const PRI_xen_pfn: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"lx\0") };
#[allow(unsafe_code)]
pub const PRIu_xen_pfn: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"lu\0") };
pub const XEN_HAVE_PV_GUEST_ENTRY: u32 = 1;
pub const XEN_HAVE_PV_UPCALL_MASK: u32 = 1;
pub const FIRST_RESERVED_GDT_PAGE: u32 = 14;
pub const FIRST_RESERVED_GDT_BYTE: u32 = 57344;
pub const FIRST_RESERVED_GDT_ENTRY: u32 = 7168;
pub const XEN_LEGACY_MAX_VCPUS: u32 = 32;
#[allow(unsafe_code)]
pub const PRI_xen_ulong: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"lx\0") };
pub const VGCF_I387_VALID: u32 = 1;
pub const VGCF_IN_KERNEL: u32 = 4;
pub const _VGCF_i387_valid: u32 = 0;
pub const VGCF_i387_valid: u32 = 1;
pub const _VGCF_in_kernel: u32 = 2;
pub const VGCF_in_kernel: u32 = 4;
pub const _VGCF_failsafe_disables_events: u32 = 3;
pub const VGCF_failsafe_disables_events: u32 = 8;
pub const _VGCF_syscall_disables_events: u32 = 4;
pub const VGCF_syscall_disables_events: u32 = 16;
pub const _VGCF_online: u32 = 5;
pub const VGCF_online: u32 = 32;
pub const _XEN_X86_EMU_LAPIC: u32 = 0;
pub const XEN_X86_EMU_LAPIC: u32 = 1;
pub const _XEN_X86_EMU_HPET: u32 = 1;
pub const XEN_X86_EMU_HPET: u32 = 2;
pub const _XEN_X86_EMU_PM: u32 = 2;
pub const XEN_X86_EMU_PM: u32 = 4;
pub const _XEN_X86_EMU_RTC: u32 = 3;
pub const XEN_X86_EMU_RTC: u32 = 8;
pub const _XEN_X86_EMU_IOAPIC: u32 = 4;
pub const XEN_X86_EMU_IOAPIC: u32 = 16;
pub const _XEN_X86_EMU_PIC: u32 = 5;
pub const XEN_X86_EMU_PIC: u32 = 32;
pub const _XEN_X86_EMU_VGA: u32 = 6;
pub const XEN_X86_EMU_VGA: u32 = 64;
pub const _XEN_X86_EMU_IOMMU: u32 = 7;
pub const XEN_X86_EMU_IOMMU: u32 = 128;
pub const _XEN_X86_EMU_PIT: u32 = 8;
pub const XEN_X86_EMU_PIT: u32 = 256;
pub const _XEN_X86_EMU_USE_PIRQ: u32 = 9;
pub const XEN_X86_EMU_USE_PIRQ: u32 = 512;
pub const _XEN_X86_EMU_VPCI: u32 = 10;
pub const XEN_X86_EMU_VPCI: u32 = 1024;
pub const XEN_X86_EMU_ALL: u32 = 2047;
pub const XEN_X86_MSR_RELAXED: u32 = 1;
pub const XEN_X86_MISC_FLAGS_MAX: u32 = 1;
pub const XEN_CPUID_NO_SUBLEAF: u32 = 4294967295;
#[allow(unsafe_code)]
pub const XEN_EMULATE_PREFIX: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b".byte 0x0f,0x0b,0x78,0x65,0x6e ; \0")
};
#[allow(unsafe_code)]
pub const XEN_CPUID: &::std::ffi::CStr = unsafe {
    ::std::ffi::CStr::from_bytes_with_nul_unchecked(b".byte 0x0f,0x0b,0x78,0x65,0x6e ; cpuid\0")
};
pub const XEN_HVM_DEBUGCONS_IOPORT: u32 = 233;
pub const __HYPERVISOR_set_trap_table: u32 = 0;
pub const __HYPERVISOR_mmu_update: u32 = 1;
pub const __HYPERVISOR_set_gdt: u32 = 2;
pub const __HYPERVISOR_stack_switch: u32 = 3;
pub const __HYPERVISOR_set_callbacks: u32 = 4;
pub const __HYPERVISOR_fpu_taskswitch: u32 = 5;
pub const __HYPERVISOR_sched_op_compat: u32 = 6;
pub const __HYPERVISOR_platform_op: u32 = 7;
pub const __HYPERVISOR_set_debugreg: u32 = 8;
pub const __HYPERVISOR_get_debugreg: u32 = 9;
pub const __HYPERVISOR_update_descriptor: u32 = 10;
pub const __HYPERVISOR_memory_op: u32 = 12;
pub const __HYPERVISOR_multicall: u32 = 13;
pub const __HYPERVISOR_update_va_mapping: u32 = 14;
pub const __HYPERVISOR_set_timer_op: u32 = 15;
pub const __HYPERVISOR_event_channel_op_compat: u32 = 16;
pub const __HYPERVISOR_xen_version: u32 = 17;
pub const __HYPERVISOR_console_io: u32 = 18;
pub const __HYPERVISOR_physdev_op_compat: u32 = 19;
pub const __HYPERVISOR_grant_table_op: u32 = 20;
pub const __HYPERVISOR_vm_assist: u32 = 21;
pub const __HYPERVISOR_update_va_mapping_otherdomain: u32 = 22;
pub const __HYPERVISOR_iret: u32 = 23;
pub const __HYPERVISOR_vcpu_op: u32 = 24;
pub const __HYPERVISOR_set_segment_base: u32 = 25;
pub const __HYPERVISOR_mmuext_op: u32 = 26;
pub const __HYPERVISOR_xsm_op: u32 = 27;
pub const __HYPERVISOR_nmi_op: u32 = 28;
pub const __HYPERVISOR_sched_op: u32 = 29;
pub const __HYPERVISOR_callback_op: u32 = 30;
pub const __HYPERVISOR_xenoprof_op: u32 = 31;
pub const __HYPERVISOR_event_channel_op: u32 = 32;
pub const __HYPERVISOR_physdev_op: u32 = 33;
pub const __HYPERVISOR_hvm_op: u32 = 34;
pub const __HYPERVISOR_sysctl: u32 = 35;
pub const __HYPERVISOR_domctl: u32 = 36;
pub const __HYPERVISOR_kexec_op: u32 = 37;
pub const __HYPERVISOR_tmem_op: u32 = 38;
pub const __HYPERVISOR_argo_op: u32 = 39;
pub const __HYPERVISOR_xenpmu_op: u32 = 40;
pub const __HYPERVISOR_dm_op: u32 = 41;
pub const __HYPERVISOR_hypfs_op: u32 = 42;
pub const __HYPERVISOR_arch_0: u32 = 48;
pub const __HYPERVISOR_arch_1: u32 = 49;
pub const __HYPERVISOR_arch_2: u32 = 50;
pub const __HYPERVISOR_arch_3: u32 = 51;
pub const __HYPERVISOR_arch_4: u32 = 52;
pub const __HYPERVISOR_arch_5: u32 = 53;
pub const __HYPERVISOR_arch_6: u32 = 54;
pub const __HYPERVISOR_arch_7: u32 = 55;
pub const VIRQ_TIMER: u32 = 0;
pub const VIRQ_DEBUG: u32 = 1;
pub const VIRQ_CONSOLE: u32 = 2;
pub const VIRQ_DOM_EXC: u32 = 3;
pub const VIRQ_TBUF: u32 = 4;
pub const VIRQ_DEBUGGER: u32 = 6;
pub const VIRQ_XENOPROF: u32 = 7;
pub const VIRQ_CON_RING: u32 = 8;
pub const VIRQ_PCPU_STATE: u32 = 9;
pub const VIRQ_MEM_EVENT: u32 = 10;
pub const VIRQ_ARGO: u32 = 11;
pub const VIRQ_ENOMEM: u32 = 12;
pub const VIRQ_XENPMU: u32 = 13;
pub const VIRQ_ARCH_0: u32 = 16;
pub const VIRQ_ARCH_1: u32 = 17;
pub const VIRQ_ARCH_2: u32 = 18;
pub const VIRQ_ARCH_3: u32 = 19;
pub const VIRQ_ARCH_4: u32 = 20;
pub const VIRQ_ARCH_5: u32 = 21;
pub const VIRQ_ARCH_6: u32 = 22;
pub const VIRQ_ARCH_7: u32 = 23;
pub const NR_VIRQS: u32 = 24;
pub const MMU_NORMAL_PT_UPDATE: u32 = 0;
pub const MMU_MACHPHYS_UPDATE: u32 = 1;
pub const MMU_PT_UPDATE_PRESERVE_AD: u32 = 2;
pub const MMU_PT_UPDATE_NO_TRANSLATE: u32 = 3;
pub const MMUEXT_PIN_L1_TABLE: u32 = 0;
pub const MMUEXT_PIN_L2_TABLE: u32 = 1;
pub const MMUEXT_PIN_L3_TABLE: u32 = 2;
pub const MMUEXT_PIN_L4_TABLE: u32 = 3;
pub const MMUEXT_UNPIN_TABLE: u32 = 4;
pub const MMUEXT_NEW_BASEPTR: u32 = 5;
pub const MMUEXT_TLB_FLUSH_LOCAL: u32 = 6;
pub const MMUEXT_INVLPG_LOCAL: u32 = 7;
pub const MMUEXT_TLB_FLUSH_MULTI: u32 = 8;
pub const MMUEXT_INVLPG_MULTI: u32 = 9;
pub const MMUEXT_TLB_FLUSH_ALL: u32 = 10;
pub const MMUEXT_INVLPG_ALL: u32 = 11;
pub const MMUEXT_FLUSH_CACHE: u32 = 12;
pub const MMUEXT_SET_LDT: u32 = 13;
pub const MMUEXT_NEW_USER_BASEPTR: u32 = 15;
pub const MMUEXT_CLEAR_PAGE: u32 = 16;
pub const MMUEXT_COPY_PAGE: u32 = 17;
pub const MMUEXT_FLUSH_CACHE_GLOBAL: u32 = 18;
pub const MMUEXT_MARK_SUPER: u32 = 19;
pub const MMUEXT_UNMARK_SUPER: u32 = 20;
pub const CONSOLEIO_write: u32 = 0;
pub const CONSOLEIO_read: u32 = 1;
pub const VMASST_CMD_enable: u32 = 0;
pub const VMASST_CMD_disable: u32 = 1;
pub const VMASST_TYPE_4gb_segments: u32 = 0;
pub const VMASST_TYPE_4gb_segments_notify: u32 = 1;
pub const VMASST_TYPE_writable_pagetables: u32 = 2;
pub const VMASST_TYPE_pae_extended_cr3: u32 = 3;
pub const VMASST_TYPE_architectural_iopl: u32 = 4;
pub const VMASST_TYPE_runstate_update_flag: u32 = 5;
pub const VMASST_TYPE_m2p_strict: u32 = 32;
pub const XEN_PVCLOCK_TSC_STABLE_BIT: u32 = 1;
pub const XEN_PVCLOCK_GUEST_STOPPED: u32 = 2;
pub const MAX_GUEST_CMDLINE: u32 = 1024;
pub const SIF_PRIVILEGED: u32 = 1;
pub const SIF_INITDOMAIN: u32 = 2;
pub const SIF_MULTIBOOT_MOD: u32 = 4;
pub const SIF_MOD_START_PFN: u32 = 8;
pub const SIF_VIRT_P2M_4TOOLS: u32 = 16;
pub const SIF_PM_MASK: u32 = 65280;
pub const XEN_VGATYPE_TEXT_MODE_3: u32 = 3;
pub const XEN_VGATYPE_VESA_LFB: u32 = 35;
pub const XEN_VGATYPE_EFI_LFB: u32 = 112;
pub const EVTCHNOP_bind_interdomain: u32 = 0;
pub const EVTCHNOP_bind_virq: u32 = 1;
pub const EVTCHNOP_bind_pirq: u32 = 2;
pub const EVTCHNOP_close: u32 = 3;
pub const EVTCHNOP_send: u32 = 4;
pub const EVTCHNOP_status: u32 = 5;
pub const EVTCHNOP_alloc_unbound: u32 = 6;
pub const EVTCHNOP_bind_ipi: u32 = 7;
pub const EVTCHNOP_bind_vcpu: u32 = 8;
pub const EVTCHNOP_unmask: u32 = 9;
pub const EVTCHNOP_reset: u32 = 10;
pub const EVTCHNOP_init_control: u32 = 11;
pub const EVTCHNOP_expand_array: u32 = 12;
pub const EVTCHNOP_set_priority: u32 = 13;
pub const BIND_PIRQ__WILL_SHARE: u32 = 1;
pub const EVTCHNSTAT_closed: u32 = 0;
pub const EVTCHNSTAT_unbound: u32 = 1;
pub const EVTCHNSTAT_interdomain: u32 = 2;
pub const EVTCHNSTAT_pirq: u32 = 3;
pub const EVTCHNSTAT_virq: u32 = 4;
pub const EVTCHNSTAT_ipi: u32 = 5;
pub const EVTCHN_FIFO_PRIORITY_MAX: u32 = 0;
pub const EVTCHN_FIFO_PRIORITY_DEFAULT: u32 = 7;
pub const EVTCHN_FIFO_PRIORITY_MIN: u32 = 15;
pub const EVTCHN_FIFO_MAX_QUEUES: u32 = 16;
pub const EVTCHN_FIFO_PENDING: u32 = 31;
pub const EVTCHN_FIFO_MASKED: u32 = 30;
pub const EVTCHN_FIFO_LINKED: u32 = 29;
pub const EVTCHN_FIFO_BUSY: u32 = 28;
pub const EVTCHN_FIFO_LINK_BITS: u32 = 17;
pub const EVTCHN_FIFO_LINK_MASK: u32 = 131071;
pub const EVTCHN_FIFO_NR_CHANNELS: u32 = 131072;
pub const GNTTAB_NR_RESERVED_ENTRIES: u32 = 8;
pub const GNTTAB_RESERVED_CONSOLE: u32 = 0;
pub const GNTTAB_RESERVED_XENSTORE: u32 = 1;
pub const GTF_invalid: u32 = 0;
pub const GTF_permit_access: u32 = 1;
pub const GTF_accept_transfer: u32 = 2;
pub const GTF_transitive: u32 = 3;
pub const GTF_type_mask: u32 = 3;
pub const _GTF_readonly: u32 = 2;
pub const GTF_readonly: u32 = 4;
pub const _GTF_reading: u32 = 3;
pub const GTF_reading: u32 = 8;
pub const _GTF_writing: u32 = 4;
pub const GTF_writing: u32 = 16;
pub const _GTF_PWT: u32 = 5;
pub const GTF_PWT: u32 = 32;
pub const _GTF_PCD: u32 = 6;
pub const GTF_PCD: u32 = 64;
pub const _GTF_PAT: u32 = 7;
pub const GTF_PAT: u32 = 128;
pub const _GTF_sub_page: u32 = 8;
pub const GTF_sub_page: u32 = 256;
pub const _GTF_transfer_committed: u32 = 2;
pub const GTF_transfer_committed: u32 = 4;
pub const _GTF_transfer_completed: u32 = 3;
pub const GTF_transfer_completed: u32 = 8;
pub const GNTTABOP_map_grant_ref: u32 = 0;
pub const GNTTABOP_unmap_grant_ref: u32 = 1;
pub const GNTTABOP_setup_table: u32 = 2;
pub const GNTTABOP_dump_table: u32 = 3;
pub const GNTTABOP_transfer: u32 = 4;
pub const GNTTABOP_copy: u32 = 5;
pub const GNTTABOP_query_size: u32 = 6;
pub const GNTTABOP_unmap_and_replace: u32 = 7;
pub const GNTTABOP_set_version: u32 = 8;
pub const GNTTABOP_get_status_frames: u32 = 9;
pub const GNTTABOP_get_version: u32 = 10;
pub const GNTTABOP_swap_grant_ref: u32 = 11;
pub const GNTTABOP_cache_flush: u32 = 12;
pub const _GNTCOPY_source_gref: u32 = 0;
pub const GNTCOPY_source_gref: u32 = 1;
pub const _GNTCOPY_dest_gref: u32 = 1;
pub const GNTCOPY_dest_gref: u32 = 2;
pub const GNTTAB_CACHE_CLEAN: u32 = 1;
pub const GNTTAB_CACHE_INVAL: u32 = 2;
pub const GNTTAB_CACHE_SOURCE_GREF: u32 = 2147483648;
pub const _GNTMAP_device_map: u32 = 0;
pub const GNTMAP_device_map: u32 = 1;
pub const _GNTMAP_host_map: u32 = 1;
pub const GNTMAP_host_map: u32 = 2;
pub const _GNTMAP_readonly: u32 = 2;
pub const GNTMAP_readonly: u32 = 4;
pub const _GNTMAP_application_map: u32 = 3;
pub const GNTMAP_application_map: u32 = 8;
pub const _GNTMAP_contains_pte: u32 = 4;
pub const GNTMAP_contains_pte: u32 = 16;
pub const _GNTMAP_guest_avail0: u32 = 16;
pub const GNTST_okay: u32 = 0;
pub const GNTST_general_error: i32 = -1;
pub const GNTST_bad_domain: i32 = -2;
pub const GNTST_bad_gntref: i32 = -3;
pub const GNTST_bad_handle: i32 = -4;
pub const GNTST_bad_virt_addr: i32 = -5;
pub const GNTST_bad_dev_addr: i32 = -6;
pub const GNTST_no_device_space: i32 = -7;
pub const GNTST_permission_denied: i32 = -8;
pub const GNTST_bad_page: i32 = -9;
pub const GNTST_bad_copy_arg: i32 = -10;
pub const GNTST_address_too_big: i32 = -11;
pub const GNTST_eagain: i32 = -12;
pub const GNTST_no_space: i32 = -13;
pub const HVM_FILE_MAGIC: u32 = 1412960902;
pub const HVM_FILE_VERSION: u32 = 1;
pub const _XEN_X86_FPU_INITIALISED: u32 = 0;
pub const XEN_X86_FPU_INITIALISED: u32 = 1;
pub const VIOAPIC_NUM_PINS: u32 = 48;
pub const RTC_CMOS_SIZE: u32 = 14;
pub const HPET_TIMER_NUM: u32 = 3;
pub const MTRR_VCNT: u32 = 8;
pub const NUM_FIXED_MSR: u32 = 11;
pub const CPU_XSAVE_CODE: u32 = 16;
pub const CPU_MSR_CODE: u32 = 20;
pub const HVM_SAVE_CODE_MAX: u32 = 20;
pub const PHYSDEVOP_eoi: u32 = 12;
pub const PHYSDEVOP_pirq_eoi_gmfn_v1: u32 = 17;
pub const PHYSDEVOP_pirq_eoi_gmfn_v2: u32 = 28;
pub const PHYSDEVOP_irq_status_query: u32 = 5;
pub const _XENIRQSTAT_needs_eoi: u32 = 0;
pub const XENIRQSTAT_needs_eoi: u32 = 1;
pub const _XENIRQSTAT_shared: u32 = 1;
pub const XENIRQSTAT_shared: u32 = 2;
pub const PHYSDEVOP_set_iopl: u32 = 6;
pub const PHYSDEVOP_set_iobitmap: u32 = 7;
pub const PHYSDEVOP_apic_read: u32 = 8;
pub const PHYSDEVOP_apic_write: u32 = 9;
pub const PHYSDEVOP_alloc_irq_vector: u32 = 10;
pub const PHYSDEVOP_free_irq_vector: u32 = 11;
pub const MAP_PIRQ_TYPE_MSI: u32 = 0;
pub const MAP_PIRQ_TYPE_GSI: u32 = 1;
pub const MAP_PIRQ_TYPE_UNKNOWN: u32 = 2;
pub const MAP_PIRQ_TYPE_MSI_SEG: u32 = 3;
pub const MAP_PIRQ_TYPE_MULTI_MSI: u32 = 4;
pub const PHYSDEVOP_map_pirq: u32 = 13;
pub const PHYSDEVOP_unmap_pirq: u32 = 14;
pub const PHYSDEVOP_manage_pci_add: u32 = 15;
pub const PHYSDEVOP_manage_pci_remove: u32 = 16;
pub const PHYSDEVOP_restore_msi: u32 = 19;
pub const PHYSDEVOP_manage_pci_add_ext: u32 = 20;
pub const PHYSDEVOP_setup_gsi: u32 = 21;
pub const PHYSDEVOP_get_free_pirq: u32 = 23;
pub const XEN_PCI_MMCFG_RESERVED: u32 = 1;
pub const PHYSDEVOP_pci_mmcfg_reserved: u32 = 24;
pub const XEN_PCI_DEV_EXTFN: u32 = 1;
pub const XEN_PCI_DEV_VIRTFN: u32 = 2;
pub const XEN_PCI_DEV_PXM: u32 = 4;
pub const PHYSDEVOP_pci_device_add: u32 = 25;
pub const PHYSDEVOP_pci_device_remove: u32 = 26;
pub const PHYSDEVOP_restore_msi_ext: u32 = 27;
pub const PHYSDEVOP_prepare_msix: u32 = 30;
pub const PHYSDEVOP_release_msix: u32 = 31;
pub const PHYSDEVOP_pci_device_reset: u32 = 32;
pub const PCI_DEVICE_RESET_COLD: u32 = 0;
pub const PCI_DEVICE_RESET_WARM: u32 = 1;
pub const PCI_DEVICE_RESET_HOT: u32 = 2;
pub const PCI_DEVICE_RESET_FLR: u32 = 3;
pub const PCI_DEVICE_RESET_MASK: u32 = 3;
pub const PHYSDEVOP_DBGP_RESET_PREPARE: u32 = 1;
pub const PHYSDEVOP_DBGP_RESET_DONE: u32 = 2;
pub const PHYSDEVOP_DBGP_BUS_UNKNOWN: u32 = 0;
pub const PHYSDEVOP_DBGP_BUS_PCI: u32 = 1;
pub const PHYSDEVOP_dbgp_op: u32 = 29;
pub const PHYSDEVOP_IRQ_UNMASK_NOTIFY: u32 = 4;
pub const PHYSDEVOP_pirq_eoi_gmfn: u32 = 28;
pub const XENMEM_increase_reservation: u32 = 0;
pub const XENMEM_decrease_reservation: u32 = 1;
pub const XENMEM_populate_physmap: u32 = 6;
pub const XENMEMF_populate_on_demand: u32 = 65536;
pub const XENMEMF_exact_node_request: u32 = 131072;
pub const XENMEMF_vnode: u32 = 262144;
pub const XENMEM_exchange: u32 = 11;
pub const XENMEM_maximum_ram_page: u32 = 2;
pub const XENMEM_current_reservation: u32 = 3;
pub const XENMEM_maximum_reservation: u32 = 4;
pub const XENMEM_maximum_gpfn: u32 = 14;
pub const XENMEM_machphys_mfn_list: u32 = 5;
pub const XENMEM_machphys_compat_mfn_list: u32 = 25;
pub const XENMEM_machphys_mapping: u32 = 12;
pub const XENMAPSPACE_shared_info: u32 = 0;
pub const XENMAPSPACE_grant_table: u32 = 1;
pub const XENMAPSPACE_gmfn: u32 = 2;
pub const XENMAPSPACE_gmfn_range: u32 = 3;
pub const XENMAPSPACE_gmfn_foreign: u32 = 4;
pub const XENMAPSPACE_dev_mmio: u32 = 5;
pub const XENMEM_add_to_physmap: u32 = 7;
pub const XENMAPIDX_grant_table_status: u32 = 2147483648;
pub const XENMEM_add_to_physmap_batch: u32 = 23;
pub const XENMEM_remove_from_physmap: u32 = 15;
pub const XENMEM_memory_map: u32 = 9;
pub const XENMEM_machine_memory_map: u32 = 10;
pub const XENMEM_set_memory_map: u32 = 13;
pub const XENMEM_set_pod_target: u32 = 16;
pub const XENMEM_get_pod_target: u32 = 17;
pub const XENMEM_get_sharing_freed_pages: u32 = 18;
pub const XENMEM_get_sharing_shared_pages: u32 = 19;
pub const XENMEM_paging_op: u32 = 20;
pub const XENMEM_paging_op_nominate: u32 = 0;
pub const XENMEM_paging_op_evict: u32 = 1;
pub const XENMEM_paging_op_prep: u32 = 2;
pub const XENMEM_access_op: u32 = 21;
pub const XENMEM_access_op_set_access: u32 = 0;
pub const XENMEM_access_op_get_access: u32 = 1;
pub const XENMEM_access_op_set_access_multi: u32 = 4;
pub const XENMEM_sharing_op: u32 = 22;
pub const XENMEM_sharing_op_nominate_gfn: u32 = 0;
pub const XENMEM_sharing_op_nominate_gref: u32 = 1;
pub const XENMEM_sharing_op_share: u32 = 2;
pub const XENMEM_sharing_op_debug_gfn: u32 = 3;
pub const XENMEM_sharing_op_debug_mfn: u32 = 4;
pub const XENMEM_sharing_op_debug_gref: u32 = 5;
pub const XENMEM_sharing_op_add_physmap: u32 = 6;
pub const XENMEM_sharing_op_audit: u32 = 7;
pub const XENMEM_sharing_op_range_share: u32 = 8;
pub const XENMEM_sharing_op_fork: u32 = 9;
pub const XENMEM_sharing_op_fork_reset: u32 = 10;
pub const XENMEM_SHARING_OP_S_HANDLE_INVALID: i32 = -10;
pub const XENMEM_SHARING_OP_C_HANDLE_INVALID: i32 = -9;
pub const XENMEM_FORK_WITH_IOMMU_ALLOWED: u32 = 1;
pub const XENMEM_FORK_BLOCK_INTERRUPTS: u32 = 2;
pub const XENMEM_FORK_RESET_STATE: u32 = 4;
pub const XENMEM_FORK_RESET_MEMORY: u32 = 8;
pub const XENMEM_claim_pages: u32 = 24;
pub const XENMEM_reserved_device_memory_map: u32 = 27;
pub const XENMEM_RDM_ALL: u32 = 1;
pub const XENMEM_acquire_resource: u32 = 28;
pub const XENMEM_resource_ioreq_server: u32 = 0;
pub const XENMEM_resource_grant_table: u32 = 1;
pub const XENMEM_resource_vmtrace_buf: u32 = 2;
pub const XENMEM_resource_grant_table_id_shared: u32 = 0;
pub const XENMEM_resource_grant_table_id_status: u32 = 1;
pub const XENMEM_resource_ioreq_server_frame_bufioreq: u32 = 0;
pub const XENMEM_get_vnumainfo: u32 = 26;
pub const XEN_DOMCTL_INTERFACE_VERSION: u32 = 23;
pub const _XEN_DOMCTL_CDF_hvm: u32 = 0;
pub const XEN_DOMCTL_CDF_hvm: u32 = 1;
pub const _XEN_DOMCTL_CDF_hap: u32 = 1;
pub const XEN_DOMCTL_CDF_hap: u32 = 2;
pub const _XEN_DOMCTL_CDF_s3_integrity: u32 = 2;
pub const XEN_DOMCTL_CDF_s3_integrity: u32 = 4;
pub const _XEN_DOMCTL_CDF_oos_off: u32 = 3;
pub const XEN_DOMCTL_CDF_oos_off: u32 = 8;
pub const _XEN_DOMCTL_CDF_xs_domain: u32 = 4;
pub const XEN_DOMCTL_CDF_xs_domain: u32 = 16;
pub const _XEN_DOMCTL_CDF_iommu: u32 = 5;
pub const XEN_DOMCTL_CDF_iommu: u32 = 32;
pub const _XEN_DOMCTL_CDF_nested_virt: u32 = 6;
pub const XEN_DOMCTL_CDF_nested_virt: u32 = 64;
pub const XEN_DOMCTL_CDF_vpmu: u32 = 128;
pub const XEN_DOMCTL_CDF_MAX: u32 = 128;
pub const _XEN_DOMCTL_IOMMU_no_sharept: u32 = 0;
pub const XEN_DOMCTL_IOMMU_no_sharept: u32 = 1;
pub const XEN_DOMCTL_IOMMU_MAX: u32 = 1;
pub const XEN_DOMCTL_GRANT_version_mask: u32 = 15;
pub const XEN_DOMCTL_ALTP2M_mixed: u32 = 1;
pub const XEN_DOMCTL_ALTP2M_external: u32 = 2;
pub const XEN_DOMCTL_ALTP2M_limited: u32 = 3;
pub const XEN_DOMCTL_ALTP2M_mode_mask: u32 = 3;
pub const _XEN_DOMINF_dying: u32 = 0;
pub const XEN_DOMINF_dying: u32 = 1;
pub const _XEN_DOMINF_hvm_guest: u32 = 1;
pub const XEN_DOMINF_hvm_guest: u32 = 2;
pub const _XEN_DOMINF_shutdown: u32 = 2;
pub const XEN_DOMINF_shutdown: u32 = 4;
pub const _XEN_DOMINF_paused: u32 = 3;
pub const XEN_DOMINF_paused: u32 = 8;
pub const _XEN_DOMINF_blocked: u32 = 4;
pub const XEN_DOMINF_blocked: u32 = 16;
pub const _XEN_DOMINF_running: u32 = 5;
pub const XEN_DOMINF_running: u32 = 32;
pub const _XEN_DOMINF_debugged: u32 = 6;
pub const XEN_DOMINF_debugged: u32 = 64;
pub const _XEN_DOMINF_xs_domain: u32 = 7;
pub const XEN_DOMINF_xs_domain: u32 = 128;
pub const _XEN_DOMINF_hap: u32 = 8;
pub const XEN_DOMINF_hap: u32 = 256;
pub const XEN_DOMINF_shutdownmask: u32 = 255;
pub const XEN_DOMINF_shutdownshift: u32 = 16;
pub const XEN_INVALID_MAX_VCPU_ID: i32 = -1;
pub const XEN_DOMCTL_PFINFO_LTAB_SHIFT: u32 = 28;
pub const XEN_DOMCTL_PFINFO_NOTAB: u32 = 0;
pub const XEN_DOMCTL_PFINFO_L1TAB: u32 = 268435456;
pub const XEN_DOMCTL_PFINFO_L2TAB: u32 = 536870912;
pub const XEN_DOMCTL_PFINFO_L3TAB: u32 = 805306368;
pub const XEN_DOMCTL_PFINFO_L4TAB: u32 = 1073741824;
pub const XEN_DOMCTL_PFINFO_LTABTYPE_MASK: u32 = 1879048192;
pub const XEN_DOMCTL_PFINFO_LPINTAB: u32 = 2147483648;
pub const XEN_DOMCTL_PFINFO_XTAB: u32 = 4026531840;
pub const XEN_DOMCTL_PFINFO_XALLOC: u32 = 3758096384;
pub const XEN_DOMCTL_PFINFO_BROKEN: u32 = 3489660928;
pub const XEN_DOMCTL_PFINFO_LTAB_MASK: u32 = 4026531840;
pub const XEN_DOMCTL_SHADOW_OP_OFF: u32 = 0;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE: u32 = 32;
pub const XEN_DOMCTL_SHADOW_OP_CLEAN: u32 = 11;
pub const XEN_DOMCTL_SHADOW_OP_PEEK: u32 = 12;
pub const XEN_DOMCTL_SHADOW_OP_GET_ALLOCATION: u32 = 30;
pub const XEN_DOMCTL_SHADOW_OP_SET_ALLOCATION: u32 = 31;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE_TEST: u32 = 1;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE_LOGDIRTY: u32 = 2;
pub const XEN_DOMCTL_SHADOW_ENABLE_REFCOUNT: u32 = 2;
pub const XEN_DOMCTL_SHADOW_ENABLE_LOG_DIRTY: u32 = 4;
pub const XEN_DOMCTL_SHADOW_ENABLE_TRANSLATE: u32 = 8;
pub const XEN_DOMCTL_SHADOW_ENABLE_EXTERNAL: u32 = 16;
pub const XEN_DOMCTL_SHADOW_LOGDIRTY_FINAL: u32 = 1;
pub const _XEN_VCPUAFFINITY_HARD: u32 = 0;
pub const XEN_VCPUAFFINITY_HARD: u32 = 1;
pub const _XEN_VCPUAFFINITY_SOFT: u32 = 1;
pub const XEN_VCPUAFFINITY_SOFT: u32 = 2;
pub const _XEN_VCPUAFFINITY_FORCE: u32 = 2;
pub const XEN_VCPUAFFINITY_FORCE: u32 = 4;
pub const XEN_SCHEDULER_CREDIT: u32 = 5;
pub const XEN_SCHEDULER_CREDIT2: u32 = 6;
pub const XEN_SCHEDULER_ARINC653: u32 = 7;
pub const XEN_SCHEDULER_RTDS: u32 = 8;
pub const XEN_SCHEDULER_NULL: u32 = 9;
pub const _XEN_DOMCTL_SCHEDRT_extra: u32 = 0;
pub const XEN_DOMCTL_SCHEDRT_extra: u32 = 1;
pub const XEN_DOMCTL_SCHEDOP_putinfo: u32 = 0;
pub const XEN_DOMCTL_SCHEDOP_getinfo: u32 = 1;
pub const XEN_DOMCTL_SCHEDOP_putvcpuinfo: u32 = 2;
pub const XEN_DOMCTL_SCHEDOP_getvcpuinfo: u32 = 3;
pub const XEN_DOMCTL_GSI_REVOKE: u32 = 0;
pub const XEN_DOMCTL_GSI_GRANT: u32 = 1;
pub const XEN_DOMCTL_GSI_ACTION_MASK: u32 = 1;
pub const XEN_DOMCTL_SENDTRIGGER_NMI: u32 = 0;
pub const XEN_DOMCTL_SENDTRIGGER_RESET: u32 = 1;
pub const XEN_DOMCTL_SENDTRIGGER_INIT: u32 = 2;
pub const XEN_DOMCTL_SENDTRIGGER_POWER: u32 = 3;
pub const XEN_DOMCTL_SENDTRIGGER_SLEEP: u32 = 4;
pub const XEN_DOMCTL_DEV_PCI: u32 = 0;
pub const XEN_DOMCTL_DEV_DT: u32 = 1;
pub const XEN_DOMCTL_DEV_RDM_RELAXED: u32 = 1;
pub const XEN_DOMCTL_VMSI_X86_DEST_ID_MASK: u32 = 255;
pub const XEN_DOMCTL_VMSI_X86_RH_MASK: u32 = 256;
pub const XEN_DOMCTL_VMSI_X86_DM_MASK: u32 = 512;
pub const XEN_DOMCTL_VMSI_X86_DELIV_MASK: u32 = 28672;
pub const XEN_DOMCTL_VMSI_X86_TRIG_MASK: u32 = 32768;
pub const XEN_DOMCTL_VMSI_X86_UNMASKED: u32 = 65536;
pub const DPCI_ADD_MAPPING: u32 = 1;
pub const DPCI_REMOVE_MAPPING: u32 = 0;
pub const XEN_DOMCTL_MEM_CACHEATTR_UC: u32 = 0;
pub const XEN_DOMCTL_MEM_CACHEATTR_WC: u32 = 1;
pub const XEN_DOMCTL_MEM_CACHEATTR_WT: u32 = 4;
pub const XEN_DOMCTL_MEM_CACHEATTR_WP: u32 = 5;
pub const XEN_DOMCTL_MEM_CACHEATTR_WB: u32 = 6;
pub const XEN_DOMCTL_MEM_CACHEATTR_UCM: u32 = 7;
pub const XEN_CPUID_INPUT_UNUSED: u32 = 4294967295;
pub const XEN_DOMCTL_DEBUG_OP_SINGLE_STEP_OFF: u32 = 0;
pub const XEN_DOMCTL_DEBUG_OP_SINGLE_STEP_ON: u32 = 1;
pub const XEN_VM_EVENT_ENABLE: u32 = 0;
pub const XEN_VM_EVENT_DISABLE: u32 = 1;
pub const XEN_VM_EVENT_RESUME: u32 = 2;
pub const XEN_VM_EVENT_GET_VERSION: u32 = 3;
pub const XEN_DOMCTL_VM_EVENT_OP_PAGING: u32 = 1;
pub const XEN_DOMCTL_VM_EVENT_OP_MONITOR: u32 = 2;
pub const XEN_DOMCTL_VM_EVENT_OP_SHARING: u32 = 3;
pub const XEN_DOMCTL_MEM_SHARING_CONTROL: u32 = 0;
pub const XEN_DOMCTL_PSR_CMT_OP_DETACH: u32 = 0;
pub const XEN_DOMCTL_PSR_CMT_OP_ATTACH: u32 = 1;
pub const XEN_DOMCTL_PSR_CMT_OP_QUERY_RMID: u32 = 2;
pub const XEN_DOMCTL_MONITOR_OP_ENABLE: u32 = 0;
pub const XEN_DOMCTL_MONITOR_OP_DISABLE: u32 = 1;
pub const XEN_DOMCTL_MONITOR_OP_GET_CAPABILITIES: u32 = 2;
pub const XEN_DOMCTL_MONITOR_OP_EMULATE_EACH_REP: u32 = 3;
pub const XEN_DOMCTL_MONITOR_OP_CONTROL_REGISTERS: u32 = 4;
pub const XEN_DOMCTL_MONITOR_EVENT_WRITE_CTRLREG: u32 = 0;
pub const XEN_DOMCTL_MONITOR_EVENT_MOV_TO_MSR: u32 = 1;
pub const XEN_DOMCTL_MONITOR_EVENT_SINGLESTEP: u32 = 2;
pub const XEN_DOMCTL_MONITOR_EVENT_SOFTWARE_BREAKPOINT: u32 = 3;
pub const XEN_DOMCTL_MONITOR_EVENT_GUEST_REQUEST: u32 = 4;
pub const XEN_DOMCTL_MONITOR_EVENT_DEBUG_EXCEPTION: u32 = 5;
pub const XEN_DOMCTL_MONITOR_EVENT_CPUID: u32 = 6;
pub const XEN_DOMCTL_MONITOR_EVENT_PRIVILEGED_CALL: u32 = 7;
pub const XEN_DOMCTL_MONITOR_EVENT_INTERRUPT: u32 = 8;
pub const XEN_DOMCTL_MONITOR_EVENT_DESC_ACCESS: u32 = 9;
pub const XEN_DOMCTL_MONITOR_EVENT_EMUL_UNIMPLEMENTED: u32 = 10;
pub const XEN_DOMCTL_MONITOR_EVENT_INGUEST_PAGEFAULT: u32 = 11;
pub const XEN_DOMCTL_MONITOR_EVENT_VMEXIT: u32 = 12;
pub const XEN_DOMCTL_MONITOR_EVENT_IO: u32 = 13;
pub const XEN_DOMCTL_PSR_SET_L3_CBM: u32 = 0;
pub const XEN_DOMCTL_PSR_GET_L3_CBM: u32 = 1;
pub const XEN_DOMCTL_PSR_SET_L3_CODE: u32 = 2;
pub const XEN_DOMCTL_PSR_SET_L3_DATA: u32 = 3;
pub const XEN_DOMCTL_PSR_GET_L3_CODE: u32 = 4;
pub const XEN_DOMCTL_PSR_GET_L3_DATA: u32 = 5;
pub const XEN_DOMCTL_PSR_SET_L2_CBM: u32 = 6;
pub const XEN_DOMCTL_PSR_GET_L2_CBM: u32 = 7;
pub const XEN_DOMCTL_PSR_SET_MBA_THRTL: u32 = 8;
pub const XEN_DOMCTL_PSR_GET_MBA_THRTL: u32 = 9;
pub const XEN_DOMCTL_VUART_OP_INIT: u32 = 0;
pub const XEN_DOMCTL_VUART_TYPE_VPL011: u32 = 0;
pub const XEN_DOMCTL_vmtrace_enable: u32 = 1;
pub const XEN_DOMCTL_vmtrace_disable: u32 = 2;
pub const XEN_DOMCTL_vmtrace_reset_and_enable: u32 = 3;
pub const XEN_DOMCTL_vmtrace_output_position: u32 = 4;
pub const XEN_DOMCTL_vmtrace_get_option: u32 = 5;
pub const XEN_DOMCTL_vmtrace_set_option: u32 = 6;
pub const XEN_DOMCTL_createdomain: u32 = 1;
pub const XEN_DOMCTL_destroydomain: u32 = 2;
pub const XEN_DOMCTL_pausedomain: u32 = 3;
pub const XEN_DOMCTL_unpausedomain: u32 = 4;
pub const XEN_DOMCTL_getdomaininfo: u32 = 5;
pub const XEN_DOMCTL_setvcpuaffinity: u32 = 9;
pub const XEN_DOMCTL_shadow_op: u32 = 10;
pub const XEN_DOMCTL_max_mem: u32 = 11;
pub const XEN_DOMCTL_setvcpucontext: u32 = 12;
pub const XEN_DOMCTL_getvcpucontext: u32 = 13;
pub const XEN_DOMCTL_getvcpuinfo: u32 = 14;
pub const XEN_DOMCTL_max_vcpus: u32 = 15;
pub const XEN_DOMCTL_scheduler_op: u32 = 16;
pub const XEN_DOMCTL_setdomainhandle: u32 = 17;
pub const XEN_DOMCTL_setdebugging: u32 = 18;
pub const XEN_DOMCTL_irq_permission: u32 = 19;
pub const XEN_DOMCTL_iomem_permission: u32 = 20;
pub const XEN_DOMCTL_ioport_permission: u32 = 21;
pub const XEN_DOMCTL_hypercall_init: u32 = 22;
pub const XEN_DOMCTL_settimeoffset: u32 = 24;
pub const XEN_DOMCTL_getvcpuaffinity: u32 = 25;
pub const XEN_DOMCTL_real_mode_area: u32 = 26;
pub const XEN_DOMCTL_resumedomain: u32 = 27;
pub const XEN_DOMCTL_sendtrigger: u32 = 28;
pub const XEN_DOMCTL_subscribe: u32 = 29;
pub const XEN_DOMCTL_gethvmcontext: u32 = 33;
pub const XEN_DOMCTL_sethvmcontext: u32 = 34;
pub const XEN_DOMCTL_set_address_size: u32 = 35;
pub const XEN_DOMCTL_get_address_size: u32 = 36;
pub const XEN_DOMCTL_assign_device: u32 = 37;
pub const XEN_DOMCTL_bind_pt_irq: u32 = 38;
pub const XEN_DOMCTL_memory_mapping: u32 = 39;
pub const XEN_DOMCTL_ioport_mapping: u32 = 40;
pub const XEN_DOMCTL_set_ext_vcpucontext: u32 = 42;
pub const XEN_DOMCTL_get_ext_vcpucontext: u32 = 43;
pub const XEN_DOMCTL_set_opt_feature: u32 = 44;
pub const XEN_DOMCTL_test_assign_device: u32 = 45;
pub const XEN_DOMCTL_set_target: u32 = 46;
pub const XEN_DOMCTL_deassign_device: u32 = 47;
pub const XEN_DOMCTL_unbind_pt_irq: u32 = 48;
pub const XEN_DOMCTL_get_device_group: u32 = 50;
pub const XEN_DOMCTL_debug_op: u32 = 54;
pub const XEN_DOMCTL_gethvmcontext_partial: u32 = 55;
pub const XEN_DOMCTL_vm_event_op: u32 = 56;
pub const XEN_DOMCTL_mem_sharing_op: u32 = 57;
pub const XEN_DOMCTL_gettscinfo: u32 = 59;
pub const XEN_DOMCTL_settscinfo: u32 = 60;
pub const XEN_DOMCTL_getpageframeinfo3: u32 = 61;
pub const XEN_DOMCTL_setvcpuextstate: u32 = 62;
pub const XEN_DOMCTL_getvcpuextstate: u32 = 63;
pub const XEN_DOMCTL_set_access_required: u32 = 64;
pub const XEN_DOMCTL_audit_p2m: u32 = 65;
pub const XEN_DOMCTL_set_virq_handler: u32 = 66;
pub const XEN_DOMCTL_set_broken_page_p2m: u32 = 67;
pub const XEN_DOMCTL_setnodeaffinity: u32 = 68;
pub const XEN_DOMCTL_getnodeaffinity: u32 = 69;
pub const XEN_DOMCTL_cacheflush: u32 = 71;
pub const XEN_DOMCTL_get_vcpu_msrs: u32 = 72;
pub const XEN_DOMCTL_set_vcpu_msrs: u32 = 73;
pub const XEN_DOMCTL_setvnumainfo: u32 = 74;
pub const XEN_DOMCTL_psr_cmt_op: u32 = 75;
pub const XEN_DOMCTL_monitor_op: u32 = 77;
pub const XEN_DOMCTL_psr_alloc: u32 = 78;
pub const XEN_DOMCTL_soft_reset: u32 = 79;
pub const XEN_DOMCTL_vuart_op: u32 = 81;
pub const XEN_DOMCTL_get_cpu_policy: u32 = 82;
pub const XEN_DOMCTL_set_cpu_policy: u32 = 83;
pub const XEN_DOMCTL_vmtrace_op: u32 = 84;
pub const XEN_DOMCTL_get_paging_mempool_size: u32 = 85;
pub const XEN_DOMCTL_set_paging_mempool_size: u32 = 86;
pub const XEN_DOMCTL_dt_overlay: u32 = 87;
pub const XEN_DOMCTL_gsi_permission: u32 = 88;
pub const XEN_DOMCTL_set_llc_colors: u32 = 89;
pub const XEN_DOMCTL_gdbsx_guestmemio: u32 = 1000;
pub const XEN_DOMCTL_gdbsx_pausevcpu: u32 = 1001;
pub const XEN_DOMCTL_gdbsx_unpausevcpu: u32 = 1002;
pub const XEN_DOMCTL_gdbsx_domstatus: u32 = 1003;
pub const XEN_SYSCTL_INTERFACE_VERSION: u32 = 21;
pub const XEN_SYSCTL_TBUFOP_get_info: u32 = 0;
pub const XEN_SYSCTL_TBUFOP_set_cpu_mask: u32 = 1;
pub const XEN_SYSCTL_TBUFOP_set_evt_mask: u32 = 2;
pub const XEN_SYSCTL_TBUFOP_set_size: u32 = 3;
pub const XEN_SYSCTL_TBUFOP_enable: u32 = 4;
pub const XEN_SYSCTL_TBUFOP_disable: u32 = 5;
pub const _XEN_SYSCTL_PHYSCAP_hvm: u32 = 0;
pub const XEN_SYSCTL_PHYSCAP_hvm: u32 = 1;
pub const _XEN_SYSCTL_PHYSCAP_pv: u32 = 1;
pub const XEN_SYSCTL_PHYSCAP_pv: u32 = 2;
pub const _XEN_SYSCTL_PHYSCAP_directio: u32 = 2;
pub const XEN_SYSCTL_PHYSCAP_directio: u32 = 4;
pub const _XEN_SYSCTL_PHYSCAP_hap: u32 = 3;
pub const XEN_SYSCTL_PHYSCAP_hap: u32 = 8;
pub const _XEN_SYSCTL_PHYSCAP_shadow: u32 = 4;
pub const XEN_SYSCTL_PHYSCAP_shadow: u32 = 16;
pub const _XEN_SYSCTL_PHYSCAP_iommu_hap_pt_share: u32 = 5;
pub const XEN_SYSCTL_PHYSCAP_iommu_hap_pt_share: u32 = 32;
pub const XEN_SYSCTL_PHYSCAP_vmtrace: u32 = 64;
pub const XEN_SYSCTL_PHYSCAP_vpmu: u32 = 128;
pub const XEN_SYSCTL_PHYSCAP_gnttab_v1: u32 = 256;
pub const XEN_SYSCTL_PHYSCAP_gnttab_v2: u32 = 512;
pub const XEN_SYSCTL_PHYSCAP_MAX: u32 = 512;
pub const XEN_SYSCTL_PERFCOP_reset: u32 = 1;
pub const XEN_SYSCTL_PERFCOP_query: u32 = 2;
pub const PMSTAT_CATEGORY_MASK: u32 = 240;
pub const PMSTAT_PX: u32 = 16;
pub const PMSTAT_CX: u32 = 32;
pub const PMSTAT_get_max_px: u32 = 17;
pub const PMSTAT_get_pxstat: u32 = 18;
pub const PMSTAT_reset_pxstat: u32 = 19;
pub const PMSTAT_get_max_cx: u32 = 33;
pub const PMSTAT_get_cxstat: u32 = 34;
pub const PMSTAT_reset_cxstat: u32 = 35;
pub const XEN_SYSCTL_CPU_HOTPLUG_ONLINE: u32 = 0;
pub const XEN_SYSCTL_CPU_HOTPLUG_OFFLINE: u32 = 1;
pub const XEN_SYSCTL_CPU_HOTPLUG_SMT_ENABLE: u32 = 2;
pub const XEN_SYSCTL_CPU_HOTPLUG_SMT_DISABLE: u32 = 3;
pub const XEN_SYSCTL_CPPC_FEAT_ACT_WINDOW: u32 = 1;
pub const XEN_CPPC_ACT_WINDOW_MANTISSA_MASK: u32 = 127;
pub const XEN_CPPC_ACT_WINDOW_EXPONENT_MASK: u32 = 896;
pub const XEN_SYSCTL_CPPC_SET_MINIMUM: u32 = 1;
pub const XEN_SYSCTL_CPPC_SET_MAXIMUM: u32 = 2;
pub const XEN_SYSCTL_CPPC_SET_DESIRED: u32 = 4;
pub const XEN_SYSCTL_CPPC_SET_ENERGY_PERF: u32 = 8;
pub const XEN_SYSCTL_CPPC_SET_ACT_WINDOW: u32 = 16;
pub const XEN_SYSCTL_CPPC_SET_PRESET_MASK: u32 = 4026531840;
pub const XEN_SYSCTL_CPPC_SET_PRESET_NONE: u32 = 0;
pub const XEN_SYSCTL_CPPC_SET_PRESET_BALANCE: u32 = 268435456;
pub const XEN_SYSCTL_CPPC_SET_PRESET_POWERSAVE: u32 = 536870912;
pub const XEN_SYSCTL_CPPC_SET_PRESET_PERFORMANCE: u32 = 805306368;
pub const XEN_SYSCTL_CPPC_SET_PARAM_MASK: u32 = 4026531871;
pub const XEN_SYSCTL_CPPC_ACT_WINDOW_MASK: u32 = 1023;
#[allow(unsafe_code)]
pub const XEN_HWP_DRIVER_NAME: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"hwp\0") };
pub const CPUFREQ_NAME_LEN: u32 = 16;
pub const SCALING_MAX_FREQ: u32 = 1;
pub const SCALING_MIN_FREQ: u32 = 2;
pub const SCALING_SETSPEED: u32 = 3;
pub const SAMPLING_RATE: u32 = 4;
pub const UP_THRESHOLD: u32 = 5;
pub const PM_PARA_CATEGORY_MASK: u32 = 240;
pub const CPUFREQ_PARA: u32 = 16;
pub const GET_CPUFREQ_PARA: u32 = 17;
pub const SET_CPUFREQ_GOV: u32 = 18;
pub const SET_CPUFREQ_PARA: u32 = 19;
pub const GET_CPUFREQ_AVGFREQ: u32 = 20;
pub const SET_CPUFREQ_CPPC: u32 = 21;
pub const XEN_SYSCTL_pm_op_set_sched_opt_smt: u32 = 33;
pub const XEN_SYSCTL_pm_op_get_max_cstate: u32 = 34;
pub const XEN_SYSCTL_pm_op_set_max_cstate: u32 = 35;
pub const XEN_SYSCTL_pm_op_set_vcpu_migration_delay: u32 = 36;
pub const XEN_SYSCTL_pm_op_get_vcpu_migration_delay: u32 = 37;
pub const XEN_SYSCTL_pm_op_enable_turbo: u32 = 38;
pub const XEN_SYSCTL_pm_op_disable_turbo: u32 = 39;
pub const XEN_SYSCTL_CX_UNLIMITED: u32 = 4294967295;
pub const sysctl_page_offline: u32 = 1;
pub const sysctl_page_online: u32 = 2;
pub const sysctl_query_page_offline: u32 = 3;
pub const PG_OFFLINE_STATUS_MASK: u32 = 255;
pub const PG_OFFLINE_INVALID: u32 = 1;
pub const PG_OFFLINE_OFFLINED: u32 = 2;
pub const PG_OFFLINE_PENDING: u32 = 4;
pub const PG_OFFLINE_FAILED: u32 = 8;
pub const PG_OFFLINE_AGAIN: u32 = 16;
pub const PG_ONLINE_FAILED: u32 = 8;
pub const PG_ONLINE_ONLINED: u32 = 2;
pub const PG_OFFLINE_STATUS_OFFLINED: u32 = 2;
pub const PG_OFFLINE_STATUS_ONLINE: u32 = 4;
pub const PG_OFFLINE_STATUS_OFFLINE_PENDING: u32 = 8;
pub const PG_OFFLINE_STATUS_BROKEN: u32 = 16;
pub const PG_OFFLINE_MISC_MASK: u32 = 4080;
pub const PG_OFFLINE_XENPAGE: u32 = 256;
pub const PG_OFFLINE_DOM0PAGE: u32 = 512;
pub const PG_OFFLINE_ANONYMOUS: u32 = 1024;
pub const PG_OFFLINE_NOT_CONV_RAM: u32 = 2048;
pub const PG_OFFLINE_OWNED: u32 = 4096;
pub const PG_OFFLINE_BROKEN: u32 = 8192;
pub const PG_ONLINE_BROKEN: u32 = 8192;
pub const PG_OFFLINE_OWNER_SHIFT: u32 = 16;
pub const XEN_SYSCTL_LOCKPROF_reset: u32 = 1;
pub const XEN_SYSCTL_LOCKPROF_query: u32 = 2;
pub const LOCKPROF_TYPE_GLOBAL: u32 = 0;
pub const LOCKPROF_TYPE_PERDOM: u32 = 1;
pub const LOCKPROF_TYPE_N: u32 = 2;
pub const XEN_INVALID_CORE_ID: i32 = -1;
pub const XEN_INVALID_SOCKET_ID: i32 = -1;
pub const XEN_INVALID_NODE_ID: i32 = -1;
pub const XEN_INVALID_MEM_SZ: i32 = -1;
pub const XEN_INVALID_NODE_DIST: i32 = -1;
pub const XEN_SYSCTL_CPUPOOL_OP_CREATE: u32 = 1;
pub const XEN_SYSCTL_CPUPOOL_OP_DESTROY: u32 = 2;
pub const XEN_SYSCTL_CPUPOOL_OP_INFO: u32 = 3;
pub const XEN_SYSCTL_CPUPOOL_OP_ADDCPU: u32 = 4;
pub const XEN_SYSCTL_CPUPOOL_OP_RMCPU: u32 = 5;
pub const XEN_SYSCTL_CPUPOOL_OP_MOVEDOMAIN: u32 = 6;
pub const XEN_SYSCTL_CPUPOOL_OP_FREEINFO: u32 = 7;
pub const XEN_SYSCTL_CPUPOOL_PAR_ANY: u32 = 4294967295;
pub const ARINC653_MAX_DOMAINS_PER_SCHEDULE: u32 = 64;
pub const XEN_SYSCTL_SCHED_RATELIMIT_MAX: u32 = 500000;
pub const XEN_SYSCTL_SCHED_RATELIMIT_MIN: u32 = 100;
pub const XEN_SYSCTL_CSCHED_TSLICE_MAX: u32 = 1000;
pub const XEN_SYSCTL_CSCHED_TSLICE_MIN: u32 = 1;
pub const XEN_SYSCTL_CSCHED_MGR_DLY_MAX_US: u32 = 100000;
pub const XEN_SYSCTL_SCHEDOP_putinfo: u32 = 0;
pub const XEN_SYSCTL_SCHEDOP_getinfo: u32 = 1;
pub const XEN_GCOV_FORMAT_MAGIC: u32 = 1480806230;
pub const XEN_SYSCTL_COVERAGE_get_size: u32 = 0;
pub const XEN_SYSCTL_COVERAGE_read: u32 = 1;
pub const XEN_SYSCTL_COVERAGE_reset: u32 = 2;
pub const XEN_SYSCTL_PSR_CMT_get_total_rmid: u32 = 0;
pub const XEN_SYSCTL_PSR_CMT_get_l3_upscaling_factor: u32 = 1;
pub const XEN_SYSCTL_PSR_CMT_get_l3_cache_size: u32 = 2;
pub const XEN_SYSCTL_PSR_CMT_enabled: u32 = 3;
pub const XEN_SYSCTL_PSR_CMT_get_l3_event_mask: u32 = 4;
pub const XEN_INVALID_DEV: i32 = -2;
pub const XEN_SYSCTL_PSR_get_l3_info: u32 = 0;
pub const XEN_SYSCTL_PSR_get_l2_info: u32 = 1;
pub const XEN_SYSCTL_PSR_get_mba_info: u32 = 2;
pub const XEN_SYSCTL_PSR_CAT_L3_CDP: u32 = 1;
pub const XEN_SYSCTL_PSR_MBA_LINEAR: u32 = 1;
pub const XEN_SYSCTL_CPU_LEVELCAP_faulting: u32 = 1;
pub const XEN_SYSCTL_CPU_LEVELCAP_ecx: u32 = 2;
pub const XEN_SYSCTL_CPU_LEVELCAP_edx: u32 = 4;
pub const XEN_SYSCTL_CPU_LEVELCAP_extd_ecx: u32 = 8;
pub const XEN_SYSCTL_CPU_LEVELCAP_extd_edx: u32 = 16;
pub const XEN_SYSCTL_CPU_LEVELCAP_xsave_eax: u32 = 32;
pub const XEN_SYSCTL_CPU_LEVELCAP_thermal_ecx: u32 = 64;
pub const XEN_SYSCTL_CPU_LEVELCAP_l7s0_eax: u32 = 128;
pub const XEN_SYSCTL_CPU_LEVELCAP_l7s0_ebx: u32 = 256;
pub const XEN_SYSCTL_cpu_featureset_raw: u32 = 0;
pub const XEN_SYSCTL_cpu_featureset_host: u32 = 1;
pub const XEN_SYSCTL_cpu_featureset_pv: u32 = 2;
pub const XEN_SYSCTL_cpu_featureset_hvm: u32 = 3;
pub const XEN_SYSCTL_cpu_featureset_pv_max: u32 = 4;
pub const XEN_SYSCTL_cpu_featureset_hvm_max: u32 = 5;
pub const LIVEPATCH_PAYLOAD_VERSION: u32 = 2;
pub const XEN_LIVEPATCH_NAME_SIZE: u32 = 128;
pub const XEN_SYSCTL_LIVEPATCH_UPLOAD: u32 = 0;
pub const XEN_SYSCTL_LIVEPATCH_GET: u32 = 1;
pub const LIVEPATCH_STATE_CHECKED: u32 = 1;
pub const LIVEPATCH_STATE_APPLIED: u32 = 2;
pub const XEN_SYSCTL_LIVEPATCH_LIST: u32 = 2;
pub const XEN_SYSCTL_LIVEPATCH_ACTION: u32 = 3;
pub const LIVEPATCH_ACTION_UNLOAD: u32 = 1;
pub const LIVEPATCH_ACTION_REVERT: u32 = 2;
pub const LIVEPATCH_ACTION_APPLY: u32 = 3;
pub const LIVEPATCH_ACTION_REPLACE: u32 = 4;
pub const LIVEPATCH_ACTION_APPLY_NODEPS: u32 = 1;
pub const LIVEPATCH_FLAG_FORCE: u32 = 1;
pub const LIVEPATCH_FLAGS_MASK: u32 = 1;
pub const XEN_SYSCTL_cpu_policy_raw: u32 = 0;
pub const XEN_SYSCTL_cpu_policy_host: u32 = 1;
pub const XEN_SYSCTL_cpu_policy_pv_max: u32 = 2;
pub const XEN_SYSCTL_cpu_policy_hvm_max: u32 = 3;
pub const XEN_SYSCTL_cpu_policy_pv_default: u32 = 4;
pub const XEN_SYSCTL_cpu_policy_hvm_default: u32 = 5;
pub const XEN_SYSCTL_readconsole: u32 = 1;
pub const XEN_SYSCTL_tbuf_op: u32 = 2;
pub const XEN_SYSCTL_physinfo: u32 = 3;
pub const XEN_SYSCTL_sched_id: u32 = 4;
pub const XEN_SYSCTL_perfc_op: u32 = 5;
pub const XEN_SYSCTL_getdomaininfolist: u32 = 6;
pub const XEN_SYSCTL_debug_keys: u32 = 7;
pub const XEN_SYSCTL_getcpuinfo: u32 = 8;
pub const XEN_SYSCTL_availheap: u32 = 9;
pub const XEN_SYSCTL_get_pmstat: u32 = 10;
pub const XEN_SYSCTL_cpu_hotplug: u32 = 11;
pub const XEN_SYSCTL_pm_op: u32 = 12;
pub const XEN_SYSCTL_page_offline_op: u32 = 14;
pub const XEN_SYSCTL_lockprof_op: u32 = 15;
pub const XEN_SYSCTL_cputopoinfo: u32 = 16;
pub const XEN_SYSCTL_numainfo: u32 = 17;
pub const XEN_SYSCTL_cpupool_op: u32 = 18;
pub const XEN_SYSCTL_scheduler_op: u32 = 19;
pub const XEN_SYSCTL_coverage_op: u32 = 20;
pub const XEN_SYSCTL_psr_cmt_op: u32 = 21;
pub const XEN_SYSCTL_pcitopoinfo: u32 = 22;
pub const XEN_SYSCTL_psr_alloc: u32 = 23;
pub const XEN_SYSCTL_get_cpu_levelling_caps: u32 = 25;
pub const XEN_SYSCTL_get_cpu_featureset: u32 = 26;
pub const XEN_SYSCTL_livepatch_op: u32 = 27;
pub const XEN_SYSCTL_get_cpu_policy: u32 = 29;
pub const XEN_SYSCTL_dt_overlay: u32 = 30;
pub const XENVER_version: u32 = 0;
pub const XENVER_extraversion: u32 = 1;
pub const XENVER_compile_info: u32 = 2;
pub const XENVER_capabilities: u32 = 3;
pub const XENVER_changeset: u32 = 4;
pub const XENVER_platform_parameters: u32 = 5;
pub const XENVER_get_features: u32 = 6;
pub const XENFEAT_writable_page_tables: u32 = 0;
pub const XENFEAT_writable_descriptor_tables: u32 = 1;
pub const XENFEAT_auto_translated_physmap: u32 = 2;
pub const XENFEAT_supervisor_mode_kernel: u32 = 3;
pub const XENFEAT_pae_pgdir_above_4gb: u32 = 4;
pub const XENFEAT_mmu_pt_update_preserve_ad: u32 = 5;
pub const XENFEAT_highmem_assist: u32 = 6;
pub const XENFEAT_gnttab_map_avail_bits: u32 = 7;
pub const XENFEAT_hvm_callback_vector: u32 = 8;
pub const XENFEAT_hvm_safe_pvclock: u32 = 9;
pub const XENFEAT_hvm_pirqs: u32 = 10;
pub const XENFEAT_dom0: u32 = 11;
pub const XENFEAT_memory_op_vnode_supported: u32 = 13;
pub const XENFEAT_ARM_SMCCC_supported: u32 = 14;
pub const XENFEAT_linux_rsdp_unrestricted: u32 = 15;
pub const XENFEAT_not_direct_mapped: u32 = 16;
pub const XENFEAT_direct_mapped: u32 = 17;
pub const XENFEAT_runstate_phys_area: u32 = 18;
pub const XENFEAT_vcpu_time_phys_area: u32 = 19;
pub const XENFEAT_dm_msix_all_writes: u32 = 20;
pub const XENFEAT_NR_SUBMAPS: u32 = 1;
pub const XENVER_pagesize: u32 = 7;
pub const XENVER_guest_handle: u32 = 8;
pub const XENVER_commandline: u32 = 9;
pub const XENVER_build_id: u32 = 10;
pub const XENVER_extraversion2: u32 = 11;
pub const XENVER_capabilities2: u32 = 12;
pub const XENVER_changeset2: u32 = 13;
pub const XENVER_commandline2: u32 = 14;
pub const SCHEDOP_yield: u32 = 0;
pub const SCHEDOP_block: u32 = 1;
pub const SCHEDOP_shutdown: u32 = 2;
pub const SCHEDOP_poll: u32 = 3;
pub const SCHEDOP_remote_shutdown: u32 = 4;
pub const SCHEDOP_shutdown_code: u32 = 5;
pub const SCHEDOP_watchdog: u32 = 6;
pub const SCHEDOP_pin_override: u32 = 7;
pub const SHUTDOWN_poweroff: u32 = 0;
pub const SHUTDOWN_reboot: u32 = 1;
pub const SHUTDOWN_suspend: u32 = 2;
pub const SHUTDOWN_crash: u32 = 3;
pub const SHUTDOWN_watchdog: u32 = 4;
pub const SHUTDOWN_soft_reset: u32 = 5;
pub const SHUTDOWN_MAX: u32 = 5;
pub const XEN_DMOP_create_ioreq_server: u32 = 1;
pub const XEN_DMOP_get_ioreq_server_info: u32 = 2;
pub const _XEN_DMOP_no_gfns: u32 = 0;
pub const XEN_DMOP_no_gfns: u32 = 1;
pub const XEN_DMOP_map_io_range_to_ioreq_server: u32 = 3;
pub const XEN_DMOP_unmap_io_range_from_ioreq_server: u32 = 4;
pub const XEN_DMOP_IO_RANGE_PORT: u32 = 0;
pub const XEN_DMOP_IO_RANGE_MEMORY: u32 = 1;
pub const XEN_DMOP_IO_RANGE_PCI: u32 = 2;
pub const XEN_DMOP_set_ioreq_server_state: u32 = 5;
pub const XEN_DMOP_destroy_ioreq_server: u32 = 6;
pub const XEN_DMOP_track_dirty_vram: u32 = 7;
pub const XEN_DMOP_set_pci_intx_level: u32 = 8;
pub const XEN_DMOP_set_isa_irq_level: u32 = 9;
pub const XEN_DMOP_set_pci_link_route: u32 = 10;
pub const XEN_DMOP_modified_memory: u32 = 11;
pub const XEN_DMOP_set_mem_type: u32 = 12;
pub const XEN_DMOP_inject_event: u32 = 13;
pub const XEN_DMOP_EVENT_ext_int: u32 = 0;
pub const XEN_DMOP_EVENT_nmi: u32 = 2;
pub const XEN_DMOP_EVENT_hw_exc: u32 = 3;
pub const XEN_DMOP_EVENT_sw_int: u32 = 4;
pub const XEN_DMOP_EVENT_pri_sw_exc: u32 = 5;
pub const XEN_DMOP_EVENT_sw_exc: u32 = 6;
pub const XEN_DMOP_inject_msi: u32 = 14;
pub const XEN_DMOP_map_mem_type_to_ioreq_server: u32 = 15;
pub const XEN_DMOP_IOREQ_MEM_ACCESS_READ: u32 = 1;
pub const XEN_DMOP_IOREQ_MEM_ACCESS_WRITE: u32 = 2;
pub const XEN_DMOP_remote_shutdown: u32 = 16;
pub const XEN_DMOP_relocate_memory: u32 = 17;
pub const XEN_DMOP_pin_memory_cacheattr: u32 = 18;
pub const XEN_DMOP_MEM_CACHEATTR_UC: u32 = 0;
pub const XEN_DMOP_MEM_CACHEATTR_WC: u32 = 1;
pub const XEN_DMOP_MEM_CACHEATTR_WT: u32 = 4;
pub const XEN_DMOP_MEM_CACHEATTR_WP: u32 = 5;
pub const XEN_DMOP_MEM_CACHEATTR_WB: u32 = 6;
pub const XEN_DMOP_MEM_CACHEATTR_UCM: u32 = 7;
pub const XEN_DMOP_set_irq_level: u32 = 19;
pub const XEN_DMOP_nr_vcpus: u32 = 20;
pub const TRACE_EXTRA_MAX: u32 = 7;
pub const TRACE_EXTRA_SHIFT: u32 = 28;
pub const TRC_CLS_SHIFT: u32 = 16;
pub const TRC_GEN: u32 = 126976;
pub const TRC_SCHED: u32 = 192512;
pub const TRC_DOM0OP: u32 = 323584;
pub const TRC_HVM: u32 = 585728;
pub const TRC_MEM: u32 = 1110016;
pub const TRC_PV: u32 = 2158592;
pub const TRC_SHADOW: u32 = 4255744;
pub const TRC_HW: u32 = 8450048;
pub const TRC_GUEST: u32 = 134279168;
pub const TRC_ALL: u32 = 268431360;
pub const TRC_HD_CYCLE_FLAG: u32 = 2147483648;
pub const TRC_SUBCLS_SHIFT: u32 = 12;
pub const TRC_HVM_ENTRYEXIT: u32 = 528384;
pub const TRC_HVM_HANDLER: u32 = 532480;
pub const TRC_HVM_EMUL: u32 = 540672;
pub const TRC_SCHED_MIN: u32 = 135168;
pub const TRC_SCHED_CLASS: u32 = 139264;
pub const TRC_SCHED_VERBOSE: u32 = 163840;
pub const TRC_SCHED_ID_BITS: u32 = 3;
pub const TRC_SCHED_ID_SHIFT: u32 = 9;
pub const TRC_SCHED_ID_MASK: u32 = 3584;
pub const TRC_SCHED_EVT_MASK: i32 = -3585;
pub const TRC_SCHED_CSCHED: u32 = 0;
pub const TRC_SCHED_CSCHED2: u32 = 1;
pub const TRC_SCHED_ARINC653: u32 = 3;
pub const TRC_SCHED_RTDS: u32 = 4;
pub const TRC_SCHED_SNULL: u32 = 5;
pub const TRC_DOM0_DOMOPS: u32 = 266240;
pub const TRC_HW_PM: u32 = 8392704;
pub const TRC_HW_IRQ: u32 = 8396800;
pub const TRC_LOST_RECORDS: u32 = 126977;
pub const TRC_TRACE_WRAP_BUFFER: u32 = 126978;
pub const TRC_TRACE_CPU_CHANGE: u32 = 126979;
pub const TRC_SCHED_RUNSTATE_CHANGE: u32 = 135169;
pub const TRC_SCHED_CONTINUE_RUNNING: u32 = 135170;
pub const TRC_SCHED_DOM_ADD: u32 = 163841;
pub const TRC_SCHED_DOM_REM: u32 = 163842;
pub const TRC_SCHED_SLEEP: u32 = 163843;
pub const TRC_SCHED_WAKE: u32 = 163844;
pub const TRC_SCHED_YIELD: u32 = 163845;
pub const TRC_SCHED_BLOCK: u32 = 163846;
pub const TRC_SCHED_SHUTDOWN: u32 = 163847;
pub const TRC_SCHED_CTL: u32 = 163848;
pub const TRC_SCHED_ADJDOM: u32 = 163849;
pub const TRC_SCHED_SWITCH: u32 = 163850;
pub const TRC_SCHED_S_TIMER_FN: u32 = 163851;
pub const TRC_SCHED_T_TIMER_FN: u32 = 163852;
pub const TRC_SCHED_DOM_TIMER_FN: u32 = 163853;
pub const TRC_SCHED_SWITCH_INFPREV: u32 = 163854;
pub const TRC_SCHED_SWITCH_INFNEXT: u32 = 163855;
pub const TRC_SCHED_SHUTDOWN_CODE: u32 = 163856;
pub const TRC_SCHED_SWITCH_INFCONT: u32 = 163857;
pub const TRC_DOM0_DOM_ADD: u32 = 266241;
pub const TRC_DOM0_DOM_REM: u32 = 266242;
pub const TRC_MEM_PAGE_GRANT_MAP: u32 = 1110017;
pub const TRC_MEM_PAGE_GRANT_UNMAP: u32 = 1110018;
pub const TRC_MEM_PAGE_GRANT_TRANSFER: u32 = 1110019;
pub const TRC_MEM_SET_P2M_ENTRY: u32 = 1110020;
pub const TRC_MEM_DECREASE_RESERVATION: u32 = 1110021;
pub const TRC_MEM_POD_POPULATE: u32 = 1110032;
pub const TRC_MEM_POD_ZERO_RECLAIM: u32 = 1110033;
pub const TRC_MEM_POD_SUPERPAGE_SPLINTER: u32 = 1110034;
pub const TRC_PV_ENTRY: u32 = 2101248;
pub const TRC_PV_SUBCALL: u32 = 2105344;
pub const TRC_PV_HYPERCALL: u32 = 2101249;
pub const TRC_PV_TRAP: u32 = 2101251;
pub const TRC_PV_PAGE_FAULT: u32 = 2101252;
pub const TRC_PV_FORCED_INVALID_OP: u32 = 2101253;
pub const TRC_PV_EMULATE_PRIVOP: u32 = 2101254;
pub const TRC_PV_EMULATE_4GB: u32 = 2101255;
pub const TRC_PV_MATH_STATE_RESTORE: u32 = 2101256;
pub const TRC_PV_PAGING_FIXUP: u32 = 2101257;
pub const TRC_PV_GDT_LDT_MAPPING_FAULT: u32 = 2101258;
pub const TRC_PV_PTWR_EMULATION: u32 = 2101259;
pub const TRC_PV_PTWR_EMULATION_PAE: u32 = 2101260;
pub const TRC_PV_HYPERCALL_V2: u32 = 2101261;
pub const TRC_PV_HYPERCALL_SUBCALL: u32 = 2105358;
pub const TRC_PV_HYPERCALL_V2_ARG_MASK: u32 = 4293918720;
pub const TRC_SHADOW_NOT_SHADOW: u32 = 4255745;
pub const TRC_SHADOW_FAST_PROPAGATE: u32 = 4255746;
pub const TRC_SHADOW_FAST_MMIO: u32 = 4255747;
pub const TRC_SHADOW_FALSE_FAST_PATH: u32 = 4255748;
pub const TRC_SHADOW_MMIO: u32 = 4255749;
pub const TRC_SHADOW_FIXUP: u32 = 4255750;
pub const TRC_SHADOW_DOMF_DYING: u32 = 4255751;
pub const TRC_SHADOW_EMULATE: u32 = 4255752;
pub const TRC_SHADOW_EMULATE_UNSHADOW_USER: u32 = 4255753;
pub const TRC_SHADOW_EMULATE_UNSHADOW_EVTINJ: u32 = 4255754;
pub const TRC_SHADOW_EMULATE_UNSHADOW_UNHANDLED: u32 = 4255755;
pub const TRC_SHADOW_WRMAP_BF: u32 = 4255756;
pub const TRC_SHADOW_PREALLOC_UNPIN: u32 = 4255757;
pub const TRC_SHADOW_RESYNC_FULL: u32 = 4255758;
pub const TRC_SHADOW_RESYNC_ONLY: u32 = 4255759;
pub const TRC_HVM_NESTEDFLAG: u32 = 1024;
pub const TRC_HVM_VMENTRY: u32 = 528385;
pub const TRC_HVM_VMX_EXIT: u32 = 528386;
pub const TRC_HVM_SVM_EXIT: u32 = 528387;
pub const TRC_HVM_PF_XEN: u32 = 532481;
pub const TRC_HVM_PF_INJECT: u32 = 532482;
pub const TRC_HVM_INJ_EXC: u32 = 532483;
pub const TRC_HVM_INJ_VIRQ: u32 = 532484;
pub const TRC_HVM_REINJ_VIRQ: u32 = 532485;
pub const TRC_HVM_IO_READ: u32 = 532486;
pub const TRC_HVM_IO_WRITE: u32 = 532487;
pub const TRC_HVM_CR_READ: u32 = 532488;
pub const TRC_HVM_CR_WRITE: u32 = 532489;
pub const TRC_HVM_DR_READ: u32 = 532490;
pub const TRC_HVM_DR_WRITE: u32 = 532491;
pub const TRC_HVM_MSR_READ: u32 = 532492;
pub const TRC_HVM_MSR_WRITE: u32 = 532493;
pub const TRC_HVM_CPUID: u32 = 532494;
pub const TRC_HVM_INTR: u32 = 532495;
pub const TRC_HVM_NMI: u32 = 532496;
pub const TRC_HVM_SMI: u32 = 532497;
pub const TRC_HVM_VMMCALL: u32 = 532498;
pub const TRC_HVM_HLT: u32 = 532499;
pub const TRC_HVM_INVLPG: u32 = 532500;
pub const TRC_HVM_MCE: u32 = 532501;
pub const TRC_HVM_IOPORT_READ: u32 = 532502;
pub const TRC_HVM_IOMEM_READ: u32 = 532503;
pub const TRC_HVM_CLTS: u32 = 532504;
pub const TRC_HVM_LMSW: u32 = 532505;
pub const TRC_HVM_RDTSC: u32 = 532506;
pub const TRC_HVM_INTR_WINDOW: u32 = 532512;
pub const TRC_HVM_NPF: u32 = 532513;
pub const TRC_HVM_REALMODE_EMULATE: u32 = 532514;
pub const TRC_HVM_TRAP: u32 = 532515;
pub const TRC_HVM_TRAP_DEBUG: u32 = 532516;
pub const TRC_HVM_VLAPIC: u32 = 532517;
pub const TRC_HVM_IOPORT_WRITE: u32 = 533014;
pub const TRC_HVM_IOMEM_WRITE: u32 = 533015;
pub const TRC_HVM_EMUL_HPET_START_TIMER: u32 = 540673;
pub const TRC_HVM_EMUL_PIT_START_TIMER: u32 = 540674;
pub const TRC_HVM_EMUL_RTC_START_TIMER: u32 = 540675;
pub const TRC_HVM_EMUL_LAPIC_START_TIMER: u32 = 540676;
pub const TRC_HVM_EMUL_HPET_STOP_TIMER: u32 = 540677;
pub const TRC_HVM_EMUL_PIT_STOP_TIMER: u32 = 540678;
pub const TRC_HVM_EMUL_RTC_STOP_TIMER: u32 = 540679;
pub const TRC_HVM_EMUL_LAPIC_STOP_TIMER: u32 = 540680;
pub const TRC_HVM_EMUL_PIT_TIMER_CB: u32 = 540681;
pub const TRC_HVM_EMUL_LAPIC_TIMER_CB: u32 = 540682;
pub const TRC_HVM_EMUL_PIC_INT_OUTPUT: u32 = 540683;
pub const TRC_HVM_EMUL_PIC_KICK: u32 = 540684;
pub const TRC_HVM_EMUL_PIC_INTACK: u32 = 540685;
pub const TRC_HVM_EMUL_PIC_POSEDGE: u32 = 540686;
pub const TRC_HVM_EMUL_PIC_NEGEDGE: u32 = 540687;
pub const TRC_HVM_EMUL_PIC_PEND_IRQ_CALL: u32 = 540688;
pub const TRC_HVM_EMUL_LAPIC_PIC_INTR: u32 = 540689;
pub const TRC_PM_FREQ_CHANGE: u32 = 8392705;
pub const TRC_PM_IDLE_ENTRY: u32 = 8392706;
pub const TRC_PM_IDLE_EXIT: u32 = 8392707;
pub const TRC_HW_IRQ_MOVE_CLEANUP_DELAY: u32 = 8396801;
pub const TRC_HW_IRQ_MOVE_CLEANUP: u32 = 8396802;
pub const TRC_HW_IRQ_BIND_VECTOR: u32 = 8396803;
pub const TRC_HW_IRQ_CLEAR_VECTOR: u32 = 8396804;
pub const TRC_HW_IRQ_MOVE_FINISH: u32 = 8396805;
pub const TRC_HW_IRQ_ASSIGN_VECTOR: u32 = 8396806;
pub const TRC_HW_IRQ_UNMAPPED_VECTOR: u32 = 8396807;
pub const TRC_HW_IRQ_HANDLED: u32 = 8396808;
pub const TRC_64_FLAG: u32 = 256;
pub const HVMOP_set_param: u32 = 0;
pub const HVMOP_get_param: u32 = 1;
pub const HVMOP_flush_tlbs: u32 = 5;
pub const HVMOP_pagetable_dying: u32 = 9;
pub const HVMOP_get_time: u32 = 10;
pub const HVMOP_xentrace: u32 = 11;
pub const HVMOP_set_mem_access: u32 = 12;
pub const HVMOP_get_mem_access: u32 = 13;
pub const HVMOP_get_mem_type: u32 = 15;
pub const HVM_IOREQSRV_BUFIOREQ_OFF: u32 = 0;
pub const HVM_IOREQSRV_BUFIOREQ_LEGACY: u32 = 1;
pub const HVM_IOREQSRV_BUFIOREQ_ATOMIC: u32 = 2;
pub const HVMOP_set_evtchn_upcall_vector: u32 = 23;
pub const HVMOP_guest_request_vm_event: u32 = 24;
pub const HVMOP_altp2m: u32 = 25;
pub const HVMOP_ALTP2M_INTERFACE_VERSION: u32 = 1;
pub const HVMOP_altp2m_get_domain_state: u32 = 1;
pub const HVMOP_altp2m_set_domain_state: u32 = 2;
pub const HVMOP_altp2m_vcpu_enable_notify: u32 = 3;
pub const HVMOP_altp2m_create_p2m: u32 = 4;
pub const HVMOP_altp2m_destroy_p2m: u32 = 5;
pub const HVMOP_altp2m_switch_p2m: u32 = 6;
pub const HVMOP_altp2m_set_mem_access: u32 = 7;
pub const HVMOP_altp2m_change_gfn: u32 = 8;
pub const HVMOP_altp2m_set_mem_access_multi: u32 = 9;
pub const HVMOP_altp2m_set_suppress_ve: u32 = 10;
pub const HVMOP_altp2m_get_suppress_ve: u32 = 11;
pub const HVMOP_altp2m_get_mem_access: u32 = 12;
pub const HVMOP_altp2m_vcpu_disable_notify: u32 = 13;
pub const HVMOP_altp2m_get_p2m_idx: u32 = 14;
pub const HVMOP_altp2m_set_suppress_ve_multi: u32 = 15;
pub const HVMOP_altp2m_set_visibility: u32 = 16;
pub const HVM_PARAM_PAE_ENABLED: u32 = 4;
pub const HVM_PARAM_DM_DOMAIN: u32 = 13;
pub const HVM_PARAM_MEMORY_EVENT_CR0: u32 = 20;
pub const HVM_PARAM_MEMORY_EVENT_CR3: u32 = 21;
pub const HVM_PARAM_MEMORY_EVENT_CR4: u32 = 22;
pub const HVM_PARAM_MEMORY_EVENT_INT3: u32 = 23;
pub const HVM_PARAM_NESTEDHVM: u32 = 24;
pub const HVM_PARAM_MEMORY_EVENT_SINGLE_STEP: u32 = 25;
pub const HVM_PARAM_BUFIOREQ_EVTCHN: u32 = 26;
pub const HVM_PARAM_MEMORY_EVENT_MSR: u32 = 30;
pub const HVM_PARAM_CALLBACK_IRQ: u32 = 0;
pub const HVM_PARAM_CALLBACK_TYPE_GSI: u32 = 0;
pub const HVM_PARAM_CALLBACK_TYPE_PCI_INTX: u32 = 1;
pub const HVM_PARAM_CALLBACK_TYPE_VECTOR: u32 = 2;
pub const HVM_PARAM_STORE_PFN: u32 = 1;
pub const HVM_PARAM_STORE_EVTCHN: u32 = 2;
pub const HVM_PARAM_IOREQ_PFN: u32 = 5;
pub const HVM_PARAM_BUFIOREQ_PFN: u32 = 6;
pub const HVM_PARAM_VIRIDIAN: u32 = 9;
pub const _HVMPV_base_freq: u32 = 0;
pub const HVMPV_base_freq: u32 = 1;
pub const _HVMPV_no_freq: u32 = 1;
pub const HVMPV_no_freq: u32 = 2;
pub const _HVMPV_time_ref_count: u32 = 2;
pub const HVMPV_time_ref_count: u32 = 4;
pub const _HVMPV_reference_tsc: u32 = 3;
pub const HVMPV_reference_tsc: u32 = 8;
pub const _HVMPV_hcall_remote_tlb_flush: u32 = 4;
pub const HVMPV_hcall_remote_tlb_flush: u32 = 16;
pub const _HVMPV_apic_assist: u32 = 5;
pub const HVMPV_apic_assist: u32 = 32;
pub const _HVMPV_crash_ctl: u32 = 6;
pub const HVMPV_crash_ctl: u32 = 64;
pub const _HVMPV_synic: u32 = 7;
pub const HVMPV_synic: u32 = 128;
pub const _HVMPV_stimer: u32 = 8;
pub const HVMPV_stimer: u32 = 256;
pub const _HVMPV_hcall_ipi: u32 = 9;
pub const HVMPV_hcall_ipi: u32 = 512;
pub const _HVMPV_ex_processor_masks: u32 = 10;
pub const HVMPV_ex_processor_masks: u32 = 1024;
pub const _HVMPV_no_vp_limit: u32 = 11;
pub const HVMPV_no_vp_limit: u32 = 2048;
pub const _HVMPV_cpu_hotplug: u32 = 12;
pub const HVMPV_cpu_hotplug: u32 = 4096;
pub const HVMPV_feature_mask: u32 = 8191;
pub const HVM_PARAM_TIMER_MODE: u32 = 10;
pub const HVMPTM_delay_for_missed_ticks: u32 = 0;
pub const HVMPTM_no_delay_for_missed_ticks: u32 = 1;
pub const HVMPTM_no_missed_ticks_pending: u32 = 2;
pub const HVMPTM_one_missed_tick_pending: u32 = 3;
pub const HVM_PARAM_HPET_ENABLED: u32 = 11;
pub const HVM_PARAM_IDENT_PT: u32 = 12;
pub const HVM_PARAM_ACPI_S_STATE: u32 = 14;
pub const HVM_PARAM_VM86_TSS: u32 = 15;
pub const HVM_PARAM_VPT_ALIGN: u32 = 16;
pub const HVM_PARAM_CONSOLE_PFN: u32 = 17;
pub const HVM_PARAM_CONSOLE_EVTCHN: u32 = 18;
pub const HVM_PARAM_ACPI_IOPORTS_LOCATION: u32 = 19;
pub const HVM_PARAM_PAGING_RING_PFN: u32 = 27;
pub const HVM_PARAM_MONITOR_RING_PFN: u32 = 28;
pub const HVM_PARAM_SHARING_RING_PFN: u32 = 29;
pub const HVM_PARAM_TRIPLE_FAULT_REASON: u32 = 31;
pub const HVM_PARAM_IOREQ_SERVER_PFN: u32 = 32;
pub const HVM_PARAM_NR_IOREQ_SERVER_PAGES: u32 = 33;
pub const HVM_PARAM_VM_GENERATION_ID_ADDR: u32 = 34;
pub const HVM_PARAM_ALTP2M: u32 = 35;
pub const XEN_ALTP2M_disabled: u32 = 0;
pub const XEN_ALTP2M_mixed: u32 = 1;
pub const XEN_ALTP2M_external: u32 = 2;
pub const XEN_ALTP2M_limited: u32 = 3;
pub const HVM_PARAM_X87_FIP_WIDTH: u32 = 36;
pub const HVM_PARAM_VM86_TSS_SIZED: u32 = 37;
pub const HVM_PARAM_MCA_CAP: u32 = 38;
pub const HVM_NR_PARAMS: u32 = 39;
pub const XEN_FLASK_INTERFACE_VERSION: u32 = 1;
pub const FLASK_LOAD: u32 = 1;
pub const FLASK_GETENFORCE: u32 = 2;
pub const FLASK_SETENFORCE: u32 = 3;
pub const FLASK_CONTEXT_TO_SID: u32 = 4;
pub const FLASK_SID_TO_CONTEXT: u32 = 5;
pub const FLASK_ACCESS: u32 = 6;
pub const FLASK_CREATE: u32 = 7;
pub const FLASK_RELABEL: u32 = 8;
pub const FLASK_USER: u32 = 9;
pub const FLASK_POLICYVERS: u32 = 10;
pub const FLASK_GETBOOL: u32 = 11;
pub const FLASK_SETBOOL: u32 = 12;
pub const FLASK_COMMITBOOLS: u32 = 13;
pub const FLASK_MLS: u32 = 14;
pub const FLASK_DISABLE: u32 = 15;
pub const FLASK_GETAVC_THRESHOLD: u32 = 16;
pub const FLASK_SETAVC_THRESHOLD: u32 = 17;
pub const FLASK_AVC_HASHSTATS: u32 = 18;
pub const FLASK_AVC_CACHESTATS: u32 = 19;
pub const FLASK_MEMBER: u32 = 20;
pub const FLASK_ADD_OCONTEXT: u32 = 21;
pub const FLASK_DEL_OCONTEXT: u32 = 22;
pub const FLASK_GET_PEER_SID: u32 = 23;
pub const FLASK_RELABEL_DOMAIN: u32 = 24;
pub const FLASK_DEVICETREE_LABEL: u32 = 25;
pub const KEXEC_XEN_NO_PAGES: u32 = 17;
pub const KEXEC_TYPE_DEFAULT: u32 = 0;
pub const KEXEC_TYPE_CRASH: u32 = 1;
pub const KEXEC_CMD_kexec: u32 = 0;
pub const KEXEC_CMD_kexec_load_v1: u32 = 1;
pub const KEXEC_CMD_kexec_unload_v1: u32 = 2;
pub const KEXEC_RANGE_MA_CRASH: u32 = 0;
pub const KEXEC_RANGE_MA_XEN: u32 = 1;
pub const KEXEC_RANGE_MA_CPU: u32 = 2;
pub const KEXEC_RANGE_MA_XENHEAP: u32 = 3;
pub const KEXEC_RANGE_MA_BOOT_PARAM: u32 = 4;
pub const KEXEC_RANGE_MA_EFI_MEMMAP: u32 = 5;
pub const KEXEC_RANGE_MA_VMCOREINFO: u32 = 6;
pub const KEXEC_CMD_kexec_get_range: u32 = 3;
pub const KEXEC_CMD_kexec_load: u32 = 4;
pub const KEXEC_CMD_kexec_unload: u32 = 5;
pub const KEXEC_CMD_kexec_status: u32 = 6;
pub const XENPF_INTERFACE_VERSION: u32 = 50331649;
pub const XENPF_settime32: u32 = 17;
pub const XENPF_settime64: u32 = 62;
pub const XENPF_settime: u32 = 62;
pub const XENPF_add_memtype: u32 = 31;
pub const XENPF_del_memtype: u32 = 32;
pub const XENPF_read_memtype: u32 = 33;
pub const XENPF_microcode_update: u32 = 35;
pub const XENPF_platform_quirk: u32 = 39;
pub const QUIRK_NOIRQBALANCING: u32 = 1;
pub const QUIRK_IOAPIC_BAD_REGSEL: u32 = 2;
pub const QUIRK_IOAPIC_GOOD_REGSEL: u32 = 3;
pub const XENPF_efi_runtime_call: u32 = 49;
pub const XEN_EFI_get_time: u32 = 1;
pub const XEN_EFI_set_time: u32 = 2;
pub const XEN_EFI_get_wakeup_time: u32 = 3;
pub const XEN_EFI_set_wakeup_time: u32 = 4;
pub const XEN_EFI_get_next_high_monotonic_count: u32 = 5;
pub const XEN_EFI_get_variable: u32 = 6;
pub const XEN_EFI_set_variable: u32 = 7;
pub const XEN_EFI_get_next_variable_name: u32 = 8;
pub const XEN_EFI_query_variable_info: u32 = 9;
pub const XEN_EFI_query_capsule_capabilities: u32 = 10;
pub const XEN_EFI_update_capsule: u32 = 11;
pub const XEN_EFI_GET_TIME_SET_CLEARS_NS: u32 = 1;
pub const XEN_EFI_GET_WAKEUP_TIME_ENABLED: u32 = 1;
pub const XEN_EFI_GET_WAKEUP_TIME_PENDING: u32 = 2;
pub const XEN_EFI_SET_WAKEUP_TIME_ENABLE: u32 = 1;
pub const XEN_EFI_SET_WAKEUP_TIME_ENABLE_ONLY: u32 = 2;
pub const XEN_EFI_VARIABLE_NON_VOLATILE: u32 = 1;
pub const XEN_EFI_VARIABLE_BOOTSERVICE_ACCESS: u32 = 2;
pub const XEN_EFI_VARIABLE_RUNTIME_ACCESS: u32 = 4;
pub const XEN_EFI_VARINFO_BOOT_SNAPSHOT: u32 = 1;
pub const XENPF_firmware_info: u32 = 50;
pub const XEN_FW_DISK_INFO: u32 = 1;
pub const XEN_FW_DISK_MBR_SIGNATURE: u32 = 2;
pub const XEN_FW_VBEDDC_INFO: u32 = 3;
pub const XEN_FW_EFI_INFO: u32 = 4;
pub const XEN_FW_EFI_VERSION: u32 = 0;
pub const XEN_FW_EFI_CONFIG_TABLE: u32 = 1;
pub const XEN_FW_EFI_VENDOR: u32 = 2;
pub const XEN_FW_EFI_MEM_INFO: u32 = 3;
pub const XEN_FW_EFI_RT_VERSION: u32 = 4;
pub const XEN_FW_EFI_PCI_ROM: u32 = 5;
pub const XEN_FW_EFI_APPLE_PROPERTIES: u32 = 6;
pub const XEN_FW_KBD_SHIFT_FLAGS: u32 = 5;
pub const XENPF_enter_acpi_sleep: u32 = 51;
pub const XENPF_ACPI_SLEEP_EXTENDED: u32 = 1;
pub const XENPF_change_freq: u32 = 52;
pub const XENPF_getidletime: u32 = 53;
pub const XENPF_set_processor_pminfo: u32 = 54;
pub const XEN_PROCESSOR_PM_CX: u32 = 1;
pub const XEN_PROCESSOR_PM_PX: u32 = 2;
pub const XEN_PROCESSOR_PM_TX: u32 = 4;
pub const XEN_PM_CX: u32 = 0;
pub const XEN_PM_PX: u32 = 1;
pub const XEN_PM_TX: u32 = 2;
pub const XEN_PM_PDC: u32 = 3;
pub const XEN_PX_PCT: u32 = 1;
pub const XEN_PX_PSS: u32 = 2;
pub const XEN_PX_PPC: u32 = 4;
pub const XEN_PX_PSD: u32 = 8;
pub const XEN_CPUPERF_SHARED_TYPE_HW: u32 = 1;
pub const XEN_CPUPERF_SHARED_TYPE_ALL: u32 = 2;
pub const XEN_CPUPERF_SHARED_TYPE_ANY: u32 = 3;
pub const XENPF_get_cpuinfo: u32 = 55;
pub const XEN_PCPU_FLAGS_ONLINE: u32 = 1;
pub const XEN_PCPU_FLAGS_INVALID: u32 = 2;
pub const XENPF_get_cpu_version: u32 = 48;
pub const XENPF_cpu_online: u32 = 56;
pub const XENPF_cpu_offline: u32 = 57;
pub const XENPF_cpu_hotadd: u32 = 58;
pub const XENPF_mem_hotadd: u32 = 59;
pub const XENPF_core_parking: u32 = 60;
pub const XEN_CORE_PARKING_SET: u32 = 1;
pub const XEN_CORE_PARKING_GET: u32 = 2;
pub const XENPF_resource_op: u32 = 61;
pub const XEN_RESOURCE_OP_MSR_READ: u32 = 0;
pub const XEN_RESOURCE_OP_MSR_WRITE: u32 = 1;
pub const XENPF_get_symbol: u32 = 63;
pub const XENPF_get_dom0_console: u32 = 64;
pub const XENPF_get_ucode_revision: u32 = 65;
pub const XENPF_microcode_update2: u32 = 66;
pub const XENPF_UCODE_FORCE: u32 = 1;
pub const XTL_STDIOSTREAM_SHOW_PID: u32 = 1;
pub const XTL_STDIOSTREAM_SHOW_DATE: u32 = 2;
pub const XTL_STDIOSTREAM_HIDE_PROGRESS: u32 = 4;
pub const XTL_STDIOSTREAM_PROGRESS_USE_CR: u32 = 8;
pub const XTL_STDIOSTREAM_PROGRESS_NO_CR: u32 = 16;
pub const __FOREIGN_X86_32_H_TMP__: u32 = 1;
pub const __i386___X86_32: u32 = 1;
pub const FLAT_RING1_CS_X86_32: u32 = 57369;
pub const FLAT_RING1_DS_X86_32: u32 = 57377;
pub const FLAT_RING1_SS_X86_32: u32 = 57377;
pub const FLAT_KERNEL_CS_X86_32: u32 = 57369;
pub const FLAT_KERNEL_DS_X86_32: u32 = 57377;
pub const FLAT_KERNEL_SS_X86_32: u32 = 57377;
pub const XEN_HAVE_PV_GUEST_ENTRY_X86_32: u32 = 1;
pub const XEN_LEGACY_MAX_VCPUS_X86_32: u32 = 32;
pub const _VGCF_i387_valid_X86_32: u32 = 0;
pub const VGCF_i387_valid_X86_32: u32 = 1;
pub const _VGCF_in_kernel_X86_32: u32 = 2;
pub const VGCF_in_kernel_X86_32: u32 = 4;
pub const _VGCF_failsafe_disables_events_X86_32: u32 = 3;
pub const VGCF_failsafe_disables_events_X86_32: u32 = 8;
pub const _VGCF_syscall_disables_events_X86_32: u32 = 4;
pub const VGCF_syscall_disables_events_X86_32: u32 = 16;
pub const _VGCF_online_X86_32: u32 = 5;
pub const VGCF_online_X86_32: u32 = 32;
pub const MAX_GUEST_CMDLINE_X86_32: u32 = 1024;
pub const x86_32_has_no_vcpu_cr_regs: u32 = 1;
pub const x86_32_has_no_vcpu_ar_regs: u32 = 1;
pub const x86_32_has_no_vcpu_guest_core_regs: u32 = 1;
pub const __FOREIGN_X86_64_H_TMP__: u32 = 1;
pub const __x86_64___X86_64: u32 = 1;
pub const FLAT_RING3_CS64_X86_64: u32 = 57395;
pub const FLAT_RING3_DS64_X86_64: u32 = 0;
pub const FLAT_RING3_SS64_X86_64: u32 = 57387;
pub const FLAT_KERNEL_DS64_X86_64: u32 = 0;
pub const FLAT_KERNEL_DS_X86_64: u32 = 0;
pub const FLAT_KERNEL_CS64_X86_64: u32 = 57395;
pub const FLAT_KERNEL_CS_X86_64: u32 = 57395;
pub const FLAT_KERNEL_SS64_X86_64: u32 = 57387;
pub const FLAT_KERNEL_SS_X86_64: u32 = 57387;
pub const XEN_HAVE_PV_GUEST_ENTRY_X86_64: u32 = 1;
pub const XEN_LEGACY_MAX_VCPUS_X86_64: u32 = 32;
pub const _VGCF_i387_valid_X86_64: u32 = 0;
pub const VGCF_i387_valid_X86_64: u32 = 1;
pub const _VGCF_in_kernel_X86_64: u32 = 2;
pub const VGCF_in_kernel_X86_64: u32 = 4;
pub const _VGCF_failsafe_disables_events_X86_64: u32 = 3;
pub const VGCF_failsafe_disables_events_X86_64: u32 = 8;
pub const _VGCF_syscall_disables_events_X86_64: u32 = 4;
pub const VGCF_syscall_disables_events_X86_64: u32 = 16;
pub const _VGCF_online_X86_64: u32 = 5;
pub const VGCF_online_X86_64: u32 = 32;
pub const MAX_GUEST_CMDLINE_X86_64: u32 = 1024;
pub const x86_64_has_no_vcpu_cr_regs: u32 = 1;
pub const x86_64_has_no_vcpu_ar_regs: u32 = 1;
pub const x86_64_has_no_vcpu_guest_core_regs: u32 = 1;
pub const __HYPERVISOR_mca: u32 = 48;
pub const XEN_MCA_INTERFACE_VERSION: u32 = 32292867;
pub const XEN_MC_NONURGENT: u32 = 1;
pub const XEN_MC_URGENT: u32 = 2;
pub const XEN_MC_ACK: u32 = 4;
pub const XEN_MC_OK: u32 = 0;
pub const XEN_MC_FETCHFAILED: u32 = 1;
pub const XEN_MC_NODATA: u32 = 2;
pub const XEN_MC_NOMATCH: u32 = 4;
pub const XEN_MC_CANNOTHANDLE: u32 = 8;
pub const XEN_MC_NOTDELIVERED: u32 = 16;
pub const XEN_MC_VCPUID_INVALID: u32 = 65535;
pub const VIRQ_MCA: u32 = 16;
pub const MC_TYPE_GLOBAL: u32 = 0;
pub const MC_TYPE_BANK: u32 = 1;
pub const MC_TYPE_EXTENDED: u32 = 2;
pub const MC_TYPE_RECOVERY: u32 = 3;
pub const MC_FLAG_CORRECTABLE: u32 = 1;
pub const MC_FLAG_UNCORRECTABLE: u32 = 2;
pub const MC_FLAG_RECOVERABLE: u32 = 4;
pub const MC_FLAG_POLLED: u32 = 8;
pub const MC_FLAG_RESET: u32 = 16;
pub const MC_FLAG_CMCI: u32 = 32;
pub const MC_FLAG_MCE: u32 = 64;
pub const REC_ACTION_RECOVERED: u32 = 1;
pub const REC_ACTION_NONE: u32 = 2;
pub const REC_ACTION_NEED_RESET: u32 = 4;
pub const MC_ACTION_PAGE_OFFLINE: u32 = 1;
pub const MC_ACTION_CPU_OFFLINE: u32 = 2;
pub const MC_ACTION_CACHE_SHRINK: u32 = 4;
pub const MAX_UNION_SIZE: u32 = 16;
pub const MCINFO_HYPERCALLSIZE: u32 = 1024;
pub const MCINFO_MAXSIZE: u32 = 768;
pub const MCINFO_FLAGS_UNCOMPLETE: u32 = 1;
pub const __MC_MSR_ARRAYSIZE: u32 = 8;
pub const MC_NCAPS: u32 = 7;
pub const MC_CAPS_STD_EDX: u32 = 0;
pub const MC_CAPS_AMD_EDX: u32 = 1;
pub const MC_CAPS_TM: u32 = 2;
pub const MC_CAPS_LINUX: u32 = 3;
pub const MC_CAPS_STD_ECX: u32 = 4;
pub const MC_CAPS_VIA: u32 = 5;
pub const MC_CAPS_AMD_ECX: u32 = 6;
pub const XEN_MC_fetch: u32 = 1;
pub const XEN_MC_notifydomain: u32 = 2;
pub const XEN_MC_physcpuinfo: u32 = 3;
pub const XEN_MC_msrinject: u32 = 4;
pub const MC_MSRINJ_MAXMSRS: u32 = 8;
pub const MC_MSRINJ_F_INTERPOSE: u32 = 1;
pub const MC_MSRINJ_F_GPADDR: u32 = 2;
pub const XEN_MC_mceinject: u32 = 5;
pub const XEN_MC_inject_v2: u32 = 6;
pub const XEN_MC_INJECT_TYPE_MASK: u32 = 7;
pub const XEN_MC_INJECT_TYPE_MCE: u32 = 0;
pub const XEN_MC_INJECT_TYPE_CMCI: u32 = 1;
pub const XEN_MC_INJECT_TYPE_LMCE: u32 = 2;
pub const XEN_MC_INJECT_CPU_BROADCAST: u32 = 8;
pub const XC_PAGE_SHIFT: u32 = 12;
pub const XC_PAGE_SIZE: u32 = 4096;
pub const XC_PAGE_MASK: i32 = -4096;
pub const INVALID_MFN: i32 = -1;
pub const XENCTRL_HAS_XC_INTERFACE: u32 = 1;
pub const XC_CORE_MAGIC: u32 = 4027575277;
pub const XC_CORE_MAGIC_HVM: u32 = 4027575278;
pub const XC_CPUPOOL_POOLID_ANY: u32 = 4294967295;
pub const E820_RAM: u32 = 1;
pub const E820_RESERVED: u32 = 2;
pub const E820_ACPI: u32 = 3;
pub const E820_NVS: u32 = 4;
pub const E820_UNUSABLE: u32 = 5;
pub const E820MAX: u32 = 128;
pub const XC_MAX_ERROR_MSG_LEN: u32 = 1024;
pub const XC_MSR_INPUT_UNUSED: u32 = 4294967295;
pub const XENEVTCHN_NO_CLOEXEC: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
#[allow(unsafe_code)]
pub const XS_WRITE_NONE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"NONE\0") };
#[allow(unsafe_code)]
pub const XS_WRITE_CREATE: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CREATE\0") };
#[allow(unsafe_code)]
pub const XS_WRITE_CREATE_EXCL: &::std::ffi::CStr =
    unsafe { ::std::ffi::CStr::from_bytes_with_nul_unchecked(b"CREATE|EXCL\0") };
pub const XENSTORE_RING_SIZE: u32 = 1024;
pub const XENSTORE_PAYLOAD_MAX: u32 = 4096;
pub const XENSTORE_ABS_PATH_MAX: u32 = 3072;
pub const XENSTORE_REL_PATH_MAX: u32 = 2048;
pub const XENSTORE_SERVER_FEATURE_RECONNECTION: u32 = 1;
pub const XENSTORE_SERVER_FEATURE_ERROR: u32 = 2;
pub const XENSTORE_CONNECTED: u32 = 0;
pub const XENSTORE_RECONNECT: u32 = 1;
pub const XENSTORE_ERROR_NONE: u32 = 0;
pub const XENSTORE_ERROR_COMM: u32 = 1;
pub const XENSTORE_ERROR_RINGIDX: u32 = 2;
pub const XENSTORE_ERROR_PROTO: u32 = 3;
pub const XS_PERM_NONE: u32 = 0;
pub const XS_PERM_READ: u32 = 1;
pub const XS_PERM_WRITE: u32 = 2;
pub const XS_PERM_ENOENT_OK: u32 = 4;
pub const XS_PERM_OWNER: u32 = 8;
pub const XS_PERM_IGNORE: u32 = 16;
pub const XBT_NULL: u32 = 0;
pub const XS_OPEN_READONLY: u32 = 1;
pub const XS_OPEN_SOCKETONLY: u32 = 2;
pub const XS_UNWATCH_FILTER: u32 = 4;
pub const VM_EVENT_INTERFACE_VERSION: u32 = 7;
pub const XEN_PAGE_SHIFT: u32 = 12;
pub const VM_EVENT_FLAG_VCPU_PAUSED: u32 = 1;
pub const VM_EVENT_FLAG_FOREIGN: u32 = 2;
pub const VM_EVENT_FLAG_EMULATE: u32 = 4;
pub const VM_EVENT_FLAG_EMULATE_NOWRITE: u32 = 8;
pub const VM_EVENT_FLAG_TOGGLE_SINGLESTEP: u32 = 16;
pub const VM_EVENT_FLAG_SET_EMUL_READ_DATA: u32 = 32;
pub const VM_EVENT_FLAG_DENY: u32 = 64;
pub const VM_EVENT_FLAG_ALTERNATE_P2M: u32 = 128;
pub const VM_EVENT_FLAG_SET_REGISTERS: u32 = 256;
pub const VM_EVENT_FLAG_SET_EMUL_INSN_DATA: u32 = 512;
pub const VM_EVENT_FLAG_GET_NEXT_INTERRUPT: u32 = 1024;
pub const VM_EVENT_FLAG_FAST_SINGLESTEP: u32 = 2048;
pub const VM_EVENT_FLAG_NESTED_P2M: u32 = 4096;
pub const VM_EVENT_FLAG_RESET_VMTRACE: u32 = 8192;
pub const VM_EVENT_FLAG_RESET_FORK_STATE: u32 = 16384;
pub const VM_EVENT_FLAG_RESET_FORK_MEMORY: u32 = 32768;
pub const VM_EVENT_REASON_UNKNOWN: u32 = 0;
pub const VM_EVENT_REASON_MEM_ACCESS: u32 = 1;
pub const VM_EVENT_REASON_MEM_SHARING: u32 = 2;
pub const VM_EVENT_REASON_MEM_PAGING: u32 = 3;
pub const VM_EVENT_REASON_WRITE_CTRLREG: u32 = 4;
pub const VM_EVENT_REASON_MOV_TO_MSR: u32 = 5;
pub const VM_EVENT_REASON_SOFTWARE_BREAKPOINT: u32 = 6;
pub const VM_EVENT_REASON_SINGLESTEP: u32 = 7;
pub const VM_EVENT_REASON_GUEST_REQUEST: u32 = 8;
pub const VM_EVENT_REASON_DEBUG_EXCEPTION: u32 = 9;
pub const VM_EVENT_REASON_CPUID: u32 = 10;
pub const VM_EVENT_REASON_PRIVILEGED_CALL: u32 = 11;
pub const VM_EVENT_REASON_INTERRUPT: u32 = 12;
pub const VM_EVENT_REASON_DESCRIPTOR_ACCESS: u32 = 13;
pub const VM_EVENT_REASON_EMUL_UNIMPLEMENTED: u32 = 14;
pub const VM_EVENT_REASON_VMEXIT: u32 = 15;
pub const VM_EVENT_REASON_IO_INSTRUCTION: u32 = 16;
pub const VM_EVENT_X86_CR0: u32 = 0;
pub const VM_EVENT_X86_CR3: u32 = 1;
pub const VM_EVENT_X86_CR4: u32 = 2;
pub const VM_EVENT_X86_XCR0: u32 = 3;
pub const MEM_ACCESS_R: u32 = 1;
pub const MEM_ACCESS_W: u32 = 2;
pub const MEM_ACCESS_X: u32 = 4;
pub const MEM_ACCESS_RWX: u32 = 7;
pub const MEM_ACCESS_RW: u32 = 3;
pub const MEM_ACCESS_RX: u32 = 5;
pub const MEM_ACCESS_WX: u32 = 6;
pub const MEM_ACCESS_GLA_VALID: u32 = 8;
pub const MEM_ACCESS_FAULT_WITH_GLA: u32 = 16;
pub const MEM_ACCESS_FAULT_IN_GPT: u32 = 32;
pub const VM_EVENT_DESC_IDTR: u32 = 1;
pub const VM_EVENT_DESC_GDTR: u32 = 2;
pub const VM_EVENT_DESC_LDTR: u32 = 3;
pub const VM_EVENT_DESC_TR: u32 = 4;
pub const MEM_PAGING_DROP_PAGE: u32 = 1;
pub const MEM_PAGING_EVICT_FAIL: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_2 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_2 = 250;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
impl Default for _G_fpos_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
impl Default for _G_fpos64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct iret_context {
    pub rax: u64,
    pub r11: u64,
    pub rcx: u64,
    pub flags: u64,
    pub rip: u64,
    pub cs: u64,
    pub rflags: u64,
    pub rsp: u64,
    pub ss: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iret_context"][::std::mem::size_of::<iret_context>() - 72usize];
    ["Alignment of iret_context"][::std::mem::align_of::<iret_context>() - 8usize];
    ["Offset of field: iret_context::rax"][::std::mem::offset_of!(iret_context, rax) - 0usize];
    ["Offset of field: iret_context::r11"][::std::mem::offset_of!(iret_context, r11) - 8usize];
    ["Offset of field: iret_context::rcx"][::std::mem::offset_of!(iret_context, rcx) - 16usize];
    ["Offset of field: iret_context::flags"][::std::mem::offset_of!(iret_context, flags) - 24usize];
    ["Offset of field: iret_context::rip"][::std::mem::offset_of!(iret_context, rip) - 32usize];
    ["Offset of field: iret_context::cs"][::std::mem::offset_of!(iret_context, cs) - 40usize];
    ["Offset of field: iret_context::rflags"]
        [::std::mem::offset_of!(iret_context, rflags) - 48usize];
    ["Offset of field: iret_context::rsp"][::std::mem::offset_of!(iret_context, rsp) - 56usize];
    ["Offset of field: iret_context::ss"][::std::mem::offset_of!(iret_context, ss) - 64usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpu_user_regs {
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_1,
    pub __bindgen_anon_2: cpu_user_regs__bindgen_ty_2,
    pub __bindgen_anon_3: cpu_user_regs__bindgen_ty_3,
    pub __bindgen_anon_4: cpu_user_regs__bindgen_ty_4,
    pub __bindgen_anon_5: cpu_user_regs__bindgen_ty_5,
    pub __bindgen_anon_6: cpu_user_regs__bindgen_ty_6,
    pub __bindgen_anon_7: cpu_user_regs__bindgen_ty_7,
    pub __bindgen_anon_8: cpu_user_regs__bindgen_ty_8,
    pub __bindgen_anon_9: cpu_user_regs__bindgen_ty_9,
    pub __bindgen_anon_10: cpu_user_regs__bindgen_ty_10,
    pub __bindgen_anon_11: cpu_user_regs__bindgen_ty_11,
    pub __bindgen_anon_12: cpu_user_regs__bindgen_ty_12,
    pub __bindgen_anon_13: cpu_user_regs__bindgen_ty_13,
    pub __bindgen_anon_14: cpu_user_regs__bindgen_ty_14,
    pub __bindgen_anon_15: cpu_user_regs__bindgen_ty_15,
    pub error_code: u32,
    pub entry_vector: u32,
    pub __bindgen_anon_16: cpu_user_regs__bindgen_ty_16,
    pub cs: u16,
    pub _pad0: [u16; 1usize],
    pub saved_upcall_mask: u8,
    pub _pad1: [u8; 3usize],
    pub __bindgen_anon_17: cpu_user_regs__bindgen_ty_17,
    pub __bindgen_anon_18: cpu_user_regs__bindgen_ty_18,
    pub ss: u16,
    pub _pad2: [u16; 3usize],
    pub es: u16,
    pub _pad3: [u16; 3usize],
    pub ds: u16,
    pub _pad4: [u16; 3usize],
    pub fs: u16,
    pub _pad5: [u16; 3usize],
    pub gs: u16,
    pub _pad6: [u16; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_1 {
    pub r15: u64,
    pub r15d: u32,
    pub r15w: u16,
    pub r15b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_1"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_1>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_1"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_1>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_1::r15"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_1, r15) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_1::r15d"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_1, r15d) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_1::r15w"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_1, r15w) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_1::r15b"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_1, r15b) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_2 {
    pub r14: u64,
    pub r14d: u32,
    pub r14w: u16,
    pub r14b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_2"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_2>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_2"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_2>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_2::r14"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_2, r14) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_2::r14d"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_2, r14d) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_2::r14w"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_2, r14w) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_2::r14b"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_2, r14b) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_3 {
    pub r13: u64,
    pub r13d: u32,
    pub r13w: u16,
    pub r13b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_3"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_3>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_3"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_3>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_3::r13"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_3, r13) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_3::r13d"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_3, r13d) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_3::r13w"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_3, r13w) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_3::r13b"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_3, r13b) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_4 {
    pub r12: u64,
    pub r12d: u32,
    pub r12w: u16,
    pub r12b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_4"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_4>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_4"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_4>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_4::r12"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_4, r12) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_4::r12d"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_4, r12d) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_4::r12w"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_4, r12w) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_4::r12b"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_4, r12b) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_5 {
    pub rbp: u64,
    pub ebp: u32,
    pub bp: u16,
    pub bpl: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_5"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_5>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_5"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_5>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_5::rbp"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_5, rbp) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_5::ebp"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_5, ebp) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_5::bp"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_5, bp) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_5::bpl"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_5, bpl) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_6 {
    pub rbx: u64,
    pub ebx: u32,
    pub bx: u16,
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_6__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_user_regs__bindgen_ty_6__bindgen_ty_1 {
    pub bl: u8,
    pub bh: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_6__bindgen_ty_1>() - 2usize];
    ["Alignment of cpu_user_regs__bindgen_ty_6__bindgen_ty_1"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_6__bindgen_ty_1>() - 1usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_6__bindgen_ty_1::bl"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_6__bindgen_ty_1, bl) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_6__bindgen_ty_1::bh"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_6__bindgen_ty_1, bh) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_6"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_6>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_6"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_6>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_6::rbx"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_6, rbx) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_6::ebx"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_6, ebx) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_6::bx"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_6, bx) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_7 {
    pub r11: u64,
    pub r11d: u32,
    pub r11w: u16,
    pub r11b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_7"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_7>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_7"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_7>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_7::r11"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_7, r11) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_7::r11d"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_7, r11d) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_7::r11w"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_7, r11w) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_7::r11b"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_7, r11b) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_8 {
    pub r10: u64,
    pub r10d: u32,
    pub r10w: u16,
    pub r10b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_8"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_8>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_8"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_8>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_8::r10"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_8, r10) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_8::r10d"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_8, r10d) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_8::r10w"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_8, r10w) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_8::r10b"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_8, r10b) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_9 {
    pub r9: u64,
    pub r9d: u32,
    pub r9w: u16,
    pub r9b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_9"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_9>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_9"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_9>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_9::r9"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_9, r9) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_9::r9d"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_9, r9d) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_9::r9w"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_9, r9w) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_9::r9b"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_9, r9b) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_10 {
    pub r8: u64,
    pub r8d: u32,
    pub r8w: u16,
    pub r8b: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_10"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_10>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_10"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_10>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_10::r8"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_10, r8) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_10::r8d"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_10, r8d) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_10::r8w"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_10, r8w) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_10::r8b"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_10, r8b) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_11 {
    pub rax: u64,
    pub eax: u32,
    pub ax: u16,
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_11__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_user_regs__bindgen_ty_11__bindgen_ty_1 {
    pub al: u8,
    pub ah: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_11__bindgen_ty_1"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_11__bindgen_ty_1>() - 2usize];
    ["Alignment of cpu_user_regs__bindgen_ty_11__bindgen_ty_1"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_11__bindgen_ty_1>() - 1usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_11__bindgen_ty_1::al"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_11__bindgen_ty_1, al) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_11__bindgen_ty_1::ah"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_11__bindgen_ty_1, ah) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_11"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_11>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_11"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_11>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_11::rax"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_11, rax) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_11::eax"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_11, eax) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_11::ax"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_11, ax) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_12 {
    pub rcx: u64,
    pub ecx: u32,
    pub cx: u16,
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_12__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_user_regs__bindgen_ty_12__bindgen_ty_1 {
    pub cl: u8,
    pub ch: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_12__bindgen_ty_1"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_12__bindgen_ty_1>() - 2usize];
    ["Alignment of cpu_user_regs__bindgen_ty_12__bindgen_ty_1"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_12__bindgen_ty_1>() - 1usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_12__bindgen_ty_1::cl"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_12__bindgen_ty_1, cl) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_12__bindgen_ty_1::ch"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_12__bindgen_ty_1, ch) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_12"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_12>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_12"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_12>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_12::rcx"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_12, rcx) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_12::ecx"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_12, ecx) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_12::cx"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_12, cx) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_13 {
    pub rdx: u64,
    pub edx: u32,
    pub dx: u16,
    pub __bindgen_anon_1: cpu_user_regs__bindgen_ty_13__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_user_regs__bindgen_ty_13__bindgen_ty_1 {
    pub dl: u8,
    pub dh: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_13__bindgen_ty_1"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_13__bindgen_ty_1>() - 2usize];
    ["Alignment of cpu_user_regs__bindgen_ty_13__bindgen_ty_1"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_13__bindgen_ty_1>() - 1usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_13__bindgen_ty_1::dl"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_13__bindgen_ty_1, dl) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_13__bindgen_ty_1::dh"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_13__bindgen_ty_1, dh) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_13"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_13>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_13"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_13>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_13::rdx"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_13, rdx) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_13::edx"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_13, edx) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_13::dx"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_13, dx) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_14 {
    pub rsi: u64,
    pub esi: u32,
    pub si: u16,
    pub sil: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_14"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_14>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_14"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_14>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_14::rsi"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_14, rsi) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_14::esi"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_14, esi) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_14::si"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_14, si) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_14::sil"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_14, sil) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_15 {
    pub rdi: u64,
    pub edi: u32,
    pub di: u16,
    pub dil: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_15"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_15>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_15"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_15>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_15::rdi"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_15, rdi) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_15::edi"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_15, edi) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_15::di"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_15, di) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_15::dil"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_15, dil) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_16 {
    pub rip: u64,
    pub eip: u32,
    pub ip: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_16"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_16>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_16"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_16>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_16::rip"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_16, rip) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_16::eip"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_16, eip) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_16::ip"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_16, ip) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_17 {
    pub rflags: u64,
    pub eflags: u32,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_17"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_17>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_17"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_17>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_17::rflags"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_17, rflags) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_17::eflags"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_17, eflags) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_17::flags"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_17, flags) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs__bindgen_ty_18 {
    pub rsp: u64,
    pub esp: u32,
    pub sp: u16,
    pub spl: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs__bindgen_ty_18"]
        [::std::mem::size_of::<cpu_user_regs__bindgen_ty_18>() - 8usize];
    ["Alignment of cpu_user_regs__bindgen_ty_18"]
        [::std::mem::align_of::<cpu_user_regs__bindgen_ty_18>() - 8usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_18::rsp"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_18, rsp) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_18::esp"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_18, esp) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_18::sp"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_18, sp) - 0usize];
    ["Offset of field: cpu_user_regs__bindgen_ty_18::spl"]
        [::std::mem::offset_of!(cpu_user_regs__bindgen_ty_18, spl) - 0usize];
};
impl Default for cpu_user_regs__bindgen_ty_18 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs"][::std::mem::size_of::<cpu_user_regs>() - 200usize];
    ["Alignment of cpu_user_regs"][::std::mem::align_of::<cpu_user_regs>() - 8usize];
    ["Offset of field: cpu_user_regs::error_code"]
        [::std::mem::offset_of!(cpu_user_regs, error_code) - 120usize];
    ["Offset of field: cpu_user_regs::entry_vector"]
        [::std::mem::offset_of!(cpu_user_regs, entry_vector) - 124usize];
    ["Offset of field: cpu_user_regs::cs"][::std::mem::offset_of!(cpu_user_regs, cs) - 136usize];
    ["Offset of field: cpu_user_regs::_pad0"]
        [::std::mem::offset_of!(cpu_user_regs, _pad0) - 138usize];
    ["Offset of field: cpu_user_regs::saved_upcall_mask"]
        [::std::mem::offset_of!(cpu_user_regs, saved_upcall_mask) - 140usize];
    ["Offset of field: cpu_user_regs::_pad1"]
        [::std::mem::offset_of!(cpu_user_regs, _pad1) - 141usize];
    ["Offset of field: cpu_user_regs::ss"][::std::mem::offset_of!(cpu_user_regs, ss) - 160usize];
    ["Offset of field: cpu_user_regs::_pad2"]
        [::std::mem::offset_of!(cpu_user_regs, _pad2) - 162usize];
    ["Offset of field: cpu_user_regs::es"][::std::mem::offset_of!(cpu_user_regs, es) - 168usize];
    ["Offset of field: cpu_user_regs::_pad3"]
        [::std::mem::offset_of!(cpu_user_regs, _pad3) - 170usize];
    ["Offset of field: cpu_user_regs::ds"][::std::mem::offset_of!(cpu_user_regs, ds) - 176usize];
    ["Offset of field: cpu_user_regs::_pad4"]
        [::std::mem::offset_of!(cpu_user_regs, _pad4) - 178usize];
    ["Offset of field: cpu_user_regs::fs"][::std::mem::offset_of!(cpu_user_regs, fs) - 184usize];
    ["Offset of field: cpu_user_regs::_pad5"]
        [::std::mem::offset_of!(cpu_user_regs, _pad5) - 186usize];
    ["Offset of field: cpu_user_regs::gs"][::std::mem::offset_of!(cpu_user_regs, gs) - 192usize];
    ["Offset of field: cpu_user_regs::_pad6"]
        [::std::mem::offset_of!(cpu_user_regs, _pad6) - 194usize];
};
impl Default for cpu_user_regs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cpu_user_regs_t = cpu_user_regs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_cpu_user_regs_t {
    pub p: *mut cpu_user_regs_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_cpu_user_regs_t"]
        [::std::mem::size_of::<__guest_handle_cpu_user_regs_t>() - 8usize];
    ["Alignment of __guest_handle_cpu_user_regs_t"]
        [::std::mem::align_of::<__guest_handle_cpu_user_regs_t>() - 8usize];
    ["Offset of field: __guest_handle_cpu_user_regs_t::p"]
        [::std::mem::offset_of!(__guest_handle_cpu_user_regs_t, p) - 0usize];
};
impl Default for __guest_handle_cpu_user_regs_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_cpu_user_regs_t {
    pub p: *const cpu_user_regs_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_cpu_user_regs_t"]
        [::std::mem::size_of::<__guest_handle_const_cpu_user_regs_t>() - 8usize];
    ["Alignment of __guest_handle_const_cpu_user_regs_t"]
        [::std::mem::align_of::<__guest_handle_const_cpu_user_regs_t>() - 8usize];
    ["Offset of field: __guest_handle_const_cpu_user_regs_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_cpu_user_regs_t, p) - 0usize];
};
impl Default for __guest_handle_const_cpu_user_regs_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct arch_vcpu_info {
    pub cr2: ::std::os::raw::c_ulong,
    pub pad: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_vcpu_info"][::std::mem::size_of::<arch_vcpu_info>() - 16usize];
    ["Alignment of arch_vcpu_info"][::std::mem::align_of::<arch_vcpu_info>() - 8usize];
    ["Offset of field: arch_vcpu_info::cr2"][::std::mem::offset_of!(arch_vcpu_info, cr2) - 0usize];
    ["Offset of field: arch_vcpu_info::pad"][::std::mem::offset_of!(arch_vcpu_info, pad) - 8usize];
};
pub type arch_vcpu_info_t = arch_vcpu_info;
pub type xen_callback_t = ::std::os::raw::c_ulong;
pub type xen_pfn_t = ::std::os::raw::c_ulong;
pub type xen_ulong_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct trap_info {
    pub vector: u8,
    pub flags: u8,
    pub cs: u16,
    pub address: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of trap_info"][::std::mem::size_of::<trap_info>() - 16usize];
    ["Alignment of trap_info"][::std::mem::align_of::<trap_info>() - 8usize];
    ["Offset of field: trap_info::vector"][::std::mem::offset_of!(trap_info, vector) - 0usize];
    ["Offset of field: trap_info::flags"][::std::mem::offset_of!(trap_info, flags) - 1usize];
    ["Offset of field: trap_info::cs"][::std::mem::offset_of!(trap_info, cs) - 2usize];
    ["Offset of field: trap_info::address"][::std::mem::offset_of!(trap_info, address) - 8usize];
};
pub type trap_info_t = trap_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_trap_info_t {
    pub p: *mut trap_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_trap_info_t"]
        [::std::mem::size_of::<__guest_handle_trap_info_t>() - 8usize];
    ["Alignment of __guest_handle_trap_info_t"]
        [::std::mem::align_of::<__guest_handle_trap_info_t>() - 8usize];
    ["Offset of field: __guest_handle_trap_info_t::p"]
        [::std::mem::offset_of!(__guest_handle_trap_info_t, p) - 0usize];
};
impl Default for __guest_handle_trap_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_trap_info_t {
    pub p: *const trap_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_trap_info_t"]
        [::std::mem::size_of::<__guest_handle_const_trap_info_t>() - 8usize];
    ["Alignment of __guest_handle_const_trap_info_t"]
        [::std::mem::align_of::<__guest_handle_const_trap_info_t>() - 8usize];
    ["Offset of field: __guest_handle_const_trap_info_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_trap_info_t, p) - 0usize];
};
impl Default for __guest_handle_const_trap_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type tsc_timestamp_t = u64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vcpu_guest_context {
    pub fpu_ctxt: vcpu_guest_context__bindgen_ty_1,
    pub flags: ::std::os::raw::c_ulong,
    pub user_regs: cpu_user_regs,
    pub trap_ctxt: [trap_info; 256usize],
    pub ldt_base: ::std::os::raw::c_ulong,
    pub ldt_ents: ::std::os::raw::c_ulong,
    pub gdt_frames: [::std::os::raw::c_ulong; 16usize],
    pub gdt_ents: ::std::os::raw::c_ulong,
    pub kernel_ss: ::std::os::raw::c_ulong,
    pub kernel_sp: ::std::os::raw::c_ulong,
    pub ctrlreg: [::std::os::raw::c_ulong; 8usize],
    pub debugreg: [::std::os::raw::c_ulong; 8usize],
    pub event_callback_eip: ::std::os::raw::c_ulong,
    pub failsafe_callback_eip: ::std::os::raw::c_ulong,
    pub syscall_callback_eip: ::std::os::raw::c_ulong,
    pub vm_assist: ::std::os::raw::c_ulong,
    pub fs_base: u64,
    pub gs_base_kernel: u64,
    pub gs_base_user: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_guest_context__bindgen_ty_1 {
    pub x: [::std::os::raw::c_char; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_guest_context__bindgen_ty_1"]
        [::std::mem::size_of::<vcpu_guest_context__bindgen_ty_1>() - 512usize];
    ["Alignment of vcpu_guest_context__bindgen_ty_1"]
        [::std::mem::align_of::<vcpu_guest_context__bindgen_ty_1>() - 1usize];
    ["Offset of field: vcpu_guest_context__bindgen_ty_1::x"]
        [::std::mem::offset_of!(vcpu_guest_context__bindgen_ty_1, x) - 0usize];
};
impl Default for vcpu_guest_context__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_guest_context"][::std::mem::size_of::<vcpu_guest_context>() - 5168usize];
    ["Alignment of vcpu_guest_context"][::std::mem::align_of::<vcpu_guest_context>() - 8usize];
    ["Offset of field: vcpu_guest_context::fpu_ctxt"]
        [::std::mem::offset_of!(vcpu_guest_context, fpu_ctxt) - 0usize];
    ["Offset of field: vcpu_guest_context::flags"]
        [::std::mem::offset_of!(vcpu_guest_context, flags) - 512usize];
    ["Offset of field: vcpu_guest_context::user_regs"]
        [::std::mem::offset_of!(vcpu_guest_context, user_regs) - 520usize];
    ["Offset of field: vcpu_guest_context::trap_ctxt"]
        [::std::mem::offset_of!(vcpu_guest_context, trap_ctxt) - 720usize];
    ["Offset of field: vcpu_guest_context::ldt_base"]
        [::std::mem::offset_of!(vcpu_guest_context, ldt_base) - 4816usize];
    ["Offset of field: vcpu_guest_context::ldt_ents"]
        [::std::mem::offset_of!(vcpu_guest_context, ldt_ents) - 4824usize];
    ["Offset of field: vcpu_guest_context::gdt_frames"]
        [::std::mem::offset_of!(vcpu_guest_context, gdt_frames) - 4832usize];
    ["Offset of field: vcpu_guest_context::gdt_ents"]
        [::std::mem::offset_of!(vcpu_guest_context, gdt_ents) - 4960usize];
    ["Offset of field: vcpu_guest_context::kernel_ss"]
        [::std::mem::offset_of!(vcpu_guest_context, kernel_ss) - 4968usize];
    ["Offset of field: vcpu_guest_context::kernel_sp"]
        [::std::mem::offset_of!(vcpu_guest_context, kernel_sp) - 4976usize];
    ["Offset of field: vcpu_guest_context::ctrlreg"]
        [::std::mem::offset_of!(vcpu_guest_context, ctrlreg) - 4984usize];
    ["Offset of field: vcpu_guest_context::debugreg"]
        [::std::mem::offset_of!(vcpu_guest_context, debugreg) - 5048usize];
    ["Offset of field: vcpu_guest_context::event_callback_eip"]
        [::std::mem::offset_of!(vcpu_guest_context, event_callback_eip) - 5112usize];
    ["Offset of field: vcpu_guest_context::failsafe_callback_eip"]
        [::std::mem::offset_of!(vcpu_guest_context, failsafe_callback_eip) - 5120usize];
    ["Offset of field: vcpu_guest_context::syscall_callback_eip"]
        [::std::mem::offset_of!(vcpu_guest_context, syscall_callback_eip) - 5128usize];
    ["Offset of field: vcpu_guest_context::vm_assist"]
        [::std::mem::offset_of!(vcpu_guest_context, vm_assist) - 5136usize];
    ["Offset of field: vcpu_guest_context::fs_base"]
        [::std::mem::offset_of!(vcpu_guest_context, fs_base) - 5144usize];
    ["Offset of field: vcpu_guest_context::gs_base_kernel"]
        [::std::mem::offset_of!(vcpu_guest_context, gs_base_kernel) - 5152usize];
    ["Offset of field: vcpu_guest_context::gs_base_user"]
        [::std::mem::offset_of!(vcpu_guest_context, gs_base_user) - 5160usize];
};
impl Default for vcpu_guest_context {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type vcpu_guest_context_t = vcpu_guest_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_vcpu_guest_context_t {
    pub p: *mut vcpu_guest_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_vcpu_guest_context_t"]
        [::std::mem::size_of::<__guest_handle_vcpu_guest_context_t>() - 8usize];
    ["Alignment of __guest_handle_vcpu_guest_context_t"]
        [::std::mem::align_of::<__guest_handle_vcpu_guest_context_t>() - 8usize];
    ["Offset of field: __guest_handle_vcpu_guest_context_t::p"]
        [::std::mem::offset_of!(__guest_handle_vcpu_guest_context_t, p) - 0usize];
};
impl Default for __guest_handle_vcpu_guest_context_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_vcpu_guest_context_t {
    pub p: *const vcpu_guest_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_vcpu_guest_context_t"]
        [::std::mem::size_of::<__guest_handle_const_vcpu_guest_context_t>() - 8usize];
    ["Alignment of __guest_handle_const_vcpu_guest_context_t"]
        [::std::mem::align_of::<__guest_handle_const_vcpu_guest_context_t>() - 8usize];
    ["Offset of field: __guest_handle_const_vcpu_guest_context_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_vcpu_guest_context_t, p) - 0usize];
};
impl Default for __guest_handle_const_vcpu_guest_context_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct arch_shared_info {
    pub max_pfn: ::std::os::raw::c_ulong,
    pub pfn_to_mfn_frame_list_list: xen_pfn_t,
    pub nmi_reason: ::std::os::raw::c_ulong,
    pub p2m_cr3: ::std::os::raw::c_ulong,
    pub p2m_vaddr: ::std::os::raw::c_ulong,
    pub p2m_generation: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_shared_info"][::std::mem::size_of::<arch_shared_info>() - 48usize];
    ["Alignment of arch_shared_info"][::std::mem::align_of::<arch_shared_info>() - 8usize];
    ["Offset of field: arch_shared_info::max_pfn"]
        [::std::mem::offset_of!(arch_shared_info, max_pfn) - 0usize];
    ["Offset of field: arch_shared_info::pfn_to_mfn_frame_list_list"]
        [::std::mem::offset_of!(arch_shared_info, pfn_to_mfn_frame_list_list) - 8usize];
    ["Offset of field: arch_shared_info::nmi_reason"]
        [::std::mem::offset_of!(arch_shared_info, nmi_reason) - 16usize];
    ["Offset of field: arch_shared_info::p2m_cr3"]
        [::std::mem::offset_of!(arch_shared_info, p2m_cr3) - 24usize];
    ["Offset of field: arch_shared_info::p2m_vaddr"]
        [::std::mem::offset_of!(arch_shared_info, p2m_vaddr) - 32usize];
    ["Offset of field: arch_shared_info::p2m_generation"]
        [::std::mem::offset_of!(arch_shared_info, p2m_generation) - 40usize];
};
pub type arch_shared_info_t = arch_shared_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_arch_domainconfig {
    pub emulation_flags: u32,
    pub misc_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_arch_domainconfig"][::std::mem::size_of::<xen_arch_domainconfig>() - 8usize];
    ["Alignment of xen_arch_domainconfig"]
        [::std::mem::align_of::<xen_arch_domainconfig>() - 4usize];
    ["Offset of field: xen_arch_domainconfig::emulation_flags"]
        [::std::mem::offset_of!(xen_arch_domainconfig, emulation_flags) - 0usize];
    ["Offset of field: xen_arch_domainconfig::misc_flags"]
        [::std::mem::offset_of!(xen_arch_domainconfig, misc_flags) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_cpuid_leaf {
    pub leaf: u32,
    pub subleaf: u32,
    pub a: u32,
    pub b: u32,
    pub c: u32,
    pub d: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_cpuid_leaf"][::std::mem::size_of::<xen_cpuid_leaf>() - 24usize];
    ["Alignment of xen_cpuid_leaf"][::std::mem::align_of::<xen_cpuid_leaf>() - 4usize];
    ["Offset of field: xen_cpuid_leaf::leaf"]
        [::std::mem::offset_of!(xen_cpuid_leaf, leaf) - 0usize];
    ["Offset of field: xen_cpuid_leaf::subleaf"]
        [::std::mem::offset_of!(xen_cpuid_leaf, subleaf) - 4usize];
    ["Offset of field: xen_cpuid_leaf::a"][::std::mem::offset_of!(xen_cpuid_leaf, a) - 8usize];
    ["Offset of field: xen_cpuid_leaf::b"][::std::mem::offset_of!(xen_cpuid_leaf, b) - 12usize];
    ["Offset of field: xen_cpuid_leaf::c"][::std::mem::offset_of!(xen_cpuid_leaf, c) - 16usize];
    ["Offset of field: xen_cpuid_leaf::d"][::std::mem::offset_of!(xen_cpuid_leaf, d) - 20usize];
};
pub type xen_cpuid_leaf_t = xen_cpuid_leaf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_cpuid_leaf_t {
    pub p: *mut xen_cpuid_leaf_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_cpuid_leaf_t"]
        [::std::mem::size_of::<__guest_handle_xen_cpuid_leaf_t>() - 8usize];
    ["Alignment of __guest_handle_xen_cpuid_leaf_t"]
        [::std::mem::align_of::<__guest_handle_xen_cpuid_leaf_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_cpuid_leaf_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_cpuid_leaf_t, p) - 0usize];
};
impl Default for __guest_handle_xen_cpuid_leaf_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_cpuid_leaf_t {
    pub p: *const xen_cpuid_leaf_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_cpuid_leaf_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_cpuid_leaf_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_cpuid_leaf_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_cpuid_leaf_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_cpuid_leaf_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_cpuid_leaf_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_cpuid_leaf_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_msr_entry {
    pub idx: u32,
    pub flags: u32,
    pub val: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_msr_entry"][::std::mem::size_of::<xen_msr_entry>() - 16usize];
    ["Alignment of xen_msr_entry"][::std::mem::align_of::<xen_msr_entry>() - 8usize];
    ["Offset of field: xen_msr_entry::idx"][::std::mem::offset_of!(xen_msr_entry, idx) - 0usize];
    ["Offset of field: xen_msr_entry::flags"]
        [::std::mem::offset_of!(xen_msr_entry, flags) - 4usize];
    ["Offset of field: xen_msr_entry::val"][::std::mem::offset_of!(xen_msr_entry, val) - 8usize];
};
pub type xen_msr_entry_t = xen_msr_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_msr_entry_t {
    pub p: *mut xen_msr_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_msr_entry_t"]
        [::std::mem::size_of::<__guest_handle_xen_msr_entry_t>() - 8usize];
    ["Alignment of __guest_handle_xen_msr_entry_t"]
        [::std::mem::align_of::<__guest_handle_xen_msr_entry_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_msr_entry_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_msr_entry_t, p) - 0usize];
};
impl Default for __guest_handle_xen_msr_entry_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_msr_entry_t {
    pub p: *const xen_msr_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_msr_entry_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_msr_entry_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_msr_entry_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_msr_entry_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_msr_entry_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_msr_entry_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_msr_entry_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_char {
    pub p: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_char"][::std::mem::size_of::<__guest_handle_char>() - 8usize];
    ["Alignment of __guest_handle_char"][::std::mem::align_of::<__guest_handle_char>() - 8usize];
    ["Offset of field: __guest_handle_char::p"]
        [::std::mem::offset_of!(__guest_handle_char, p) - 0usize];
};
impl Default for __guest_handle_char {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_char {
    pub p: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_char"]
        [::std::mem::size_of::<__guest_handle_const_char>() - 8usize];
    ["Alignment of __guest_handle_const_char"]
        [::std::mem::align_of::<__guest_handle_const_char>() - 8usize];
    ["Offset of field: __guest_handle_const_char::p"]
        [::std::mem::offset_of!(__guest_handle_const_char, p) - 0usize];
};
impl Default for __guest_handle_const_char {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uchar {
    pub p: *mut ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_uchar"][::std::mem::size_of::<__guest_handle_uchar>() - 8usize];
    ["Alignment of __guest_handle_uchar"][::std::mem::align_of::<__guest_handle_uchar>() - 8usize];
    ["Offset of field: __guest_handle_uchar::p"]
        [::std::mem::offset_of!(__guest_handle_uchar, p) - 0usize];
};
impl Default for __guest_handle_uchar {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uchar {
    pub p: *const ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_uchar"]
        [::std::mem::size_of::<__guest_handle_const_uchar>() - 8usize];
    ["Alignment of __guest_handle_const_uchar"]
        [::std::mem::align_of::<__guest_handle_const_uchar>() - 8usize];
    ["Offset of field: __guest_handle_const_uchar::p"]
        [::std::mem::offset_of!(__guest_handle_const_uchar, p) - 0usize];
};
impl Default for __guest_handle_const_uchar {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_int {
    pub p: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_int"][::std::mem::size_of::<__guest_handle_int>() - 8usize];
    ["Alignment of __guest_handle_int"][::std::mem::align_of::<__guest_handle_int>() - 8usize];
    ["Offset of field: __guest_handle_int::p"]
        [::std::mem::offset_of!(__guest_handle_int, p) - 0usize];
};
impl Default for __guest_handle_int {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_int {
    pub p: *const ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_int"]
        [::std::mem::size_of::<__guest_handle_const_int>() - 8usize];
    ["Alignment of __guest_handle_const_int"]
        [::std::mem::align_of::<__guest_handle_const_int>() - 8usize];
    ["Offset of field: __guest_handle_const_int::p"]
        [::std::mem::offset_of!(__guest_handle_const_int, p) - 0usize];
};
impl Default for __guest_handle_const_int {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint {
    pub p: *mut ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_uint"][::std::mem::size_of::<__guest_handle_uint>() - 8usize];
    ["Alignment of __guest_handle_uint"][::std::mem::align_of::<__guest_handle_uint>() - 8usize];
    ["Offset of field: __guest_handle_uint::p"]
        [::std::mem::offset_of!(__guest_handle_uint, p) - 0usize];
};
impl Default for __guest_handle_uint {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint {
    pub p: *const ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_uint"]
        [::std::mem::size_of::<__guest_handle_const_uint>() - 8usize];
    ["Alignment of __guest_handle_const_uint"]
        [::std::mem::align_of::<__guest_handle_const_uint>() - 8usize];
    ["Offset of field: __guest_handle_const_uint::p"]
        [::std::mem::offset_of!(__guest_handle_const_uint, p) - 0usize];
};
impl Default for __guest_handle_const_uint {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_void {
    pub p: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_void"][::std::mem::size_of::<__guest_handle_void>() - 8usize];
    ["Alignment of __guest_handle_void"][::std::mem::align_of::<__guest_handle_void>() - 8usize];
    ["Offset of field: __guest_handle_void::p"]
        [::std::mem::offset_of!(__guest_handle_void, p) - 0usize];
};
impl Default for __guest_handle_void {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_void {
    pub p: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_void"]
        [::std::mem::size_of::<__guest_handle_const_void>() - 8usize];
    ["Alignment of __guest_handle_const_void"]
        [::std::mem::align_of::<__guest_handle_const_void>() - 8usize];
    ["Offset of field: __guest_handle_const_void::p"]
        [::std::mem::offset_of!(__guest_handle_const_void, p) - 0usize];
};
impl Default for __guest_handle_const_void {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint64_t {
    pub p: *mut u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_uint64_t"][::std::mem::size_of::<__guest_handle_uint64_t>() - 8usize];
    ["Alignment of __guest_handle_uint64_t"]
        [::std::mem::align_of::<__guest_handle_uint64_t>() - 8usize];
    ["Offset of field: __guest_handle_uint64_t::p"]
        [::std::mem::offset_of!(__guest_handle_uint64_t, p) - 0usize];
};
impl Default for __guest_handle_uint64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint64_t {
    pub p: *const u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_uint64_t"]
        [::std::mem::size_of::<__guest_handle_const_uint64_t>() - 8usize];
    ["Alignment of __guest_handle_const_uint64_t"]
        [::std::mem::align_of::<__guest_handle_const_uint64_t>() - 8usize];
    ["Offset of field: __guest_handle_const_uint64_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_uint64_t, p) - 0usize];
};
impl Default for __guest_handle_const_uint64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_pfn_t {
    pub p: *mut xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_pfn_t"]
        [::std::mem::size_of::<__guest_handle_xen_pfn_t>() - 8usize];
    ["Alignment of __guest_handle_xen_pfn_t"]
        [::std::mem::align_of::<__guest_handle_xen_pfn_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_pfn_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_pfn_t, p) - 0usize];
};
impl Default for __guest_handle_xen_pfn_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_pfn_t {
    pub p: *const xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_pfn_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_pfn_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_pfn_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_pfn_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_pfn_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_pfn_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_pfn_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_ulong_t {
    pub p: *mut xen_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_ulong_t"]
        [::std::mem::size_of::<__guest_handle_xen_ulong_t>() - 8usize];
    ["Alignment of __guest_handle_xen_ulong_t"]
        [::std::mem::align_of::<__guest_handle_xen_ulong_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_ulong_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_ulong_t, p) - 0usize];
};
impl Default for __guest_handle_xen_ulong_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_ulong_t {
    pub p: *const xen_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_ulong_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_ulong_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_ulong_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_ulong_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_ulong_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_ulong_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_ulong_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmuext_op {
    pub cmd: ::std::os::raw::c_uint,
    pub arg1: mmuext_op__bindgen_ty_1,
    pub arg2: mmuext_op__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmuext_op__bindgen_ty_1 {
    pub mfn: xen_pfn_t,
    pub linear_addr: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmuext_op__bindgen_ty_1"][::std::mem::size_of::<mmuext_op__bindgen_ty_1>() - 8usize];
    ["Alignment of mmuext_op__bindgen_ty_1"]
        [::std::mem::align_of::<mmuext_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: mmuext_op__bindgen_ty_1::mfn"]
        [::std::mem::offset_of!(mmuext_op__bindgen_ty_1, mfn) - 0usize];
    ["Offset of field: mmuext_op__bindgen_ty_1::linear_addr"]
        [::std::mem::offset_of!(mmuext_op__bindgen_ty_1, linear_addr) - 0usize];
};
impl Default for mmuext_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmuext_op__bindgen_ty_2 {
    pub nr_ents: ::std::os::raw::c_uint,
    pub vcpumask: __guest_handle_const_void,
    pub src_mfn: xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmuext_op__bindgen_ty_2"][::std::mem::size_of::<mmuext_op__bindgen_ty_2>() - 8usize];
    ["Alignment of mmuext_op__bindgen_ty_2"]
        [::std::mem::align_of::<mmuext_op__bindgen_ty_2>() - 8usize];
    ["Offset of field: mmuext_op__bindgen_ty_2::nr_ents"]
        [::std::mem::offset_of!(mmuext_op__bindgen_ty_2, nr_ents) - 0usize];
    ["Offset of field: mmuext_op__bindgen_ty_2::vcpumask"]
        [::std::mem::offset_of!(mmuext_op__bindgen_ty_2, vcpumask) - 0usize];
    ["Offset of field: mmuext_op__bindgen_ty_2::src_mfn"]
        [::std::mem::offset_of!(mmuext_op__bindgen_ty_2, src_mfn) - 0usize];
};
impl Default for mmuext_op__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmuext_op"][::std::mem::size_of::<mmuext_op>() - 24usize];
    ["Alignment of mmuext_op"][::std::mem::align_of::<mmuext_op>() - 8usize];
    ["Offset of field: mmuext_op::cmd"][::std::mem::offset_of!(mmuext_op, cmd) - 0usize];
    ["Offset of field: mmuext_op::arg1"][::std::mem::offset_of!(mmuext_op, arg1) - 8usize];
    ["Offset of field: mmuext_op::arg2"][::std::mem::offset_of!(mmuext_op, arg2) - 16usize];
};
impl Default for mmuext_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mmuext_op_t = mmuext_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_mmuext_op_t {
    pub p: *mut mmuext_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_mmuext_op_t"]
        [::std::mem::size_of::<__guest_handle_mmuext_op_t>() - 8usize];
    ["Alignment of __guest_handle_mmuext_op_t"]
        [::std::mem::align_of::<__guest_handle_mmuext_op_t>() - 8usize];
    ["Offset of field: __guest_handle_mmuext_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_mmuext_op_t, p) - 0usize];
};
impl Default for __guest_handle_mmuext_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_mmuext_op_t {
    pub p: *const mmuext_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_mmuext_op_t"]
        [::std::mem::size_of::<__guest_handle_const_mmuext_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_mmuext_op_t"]
        [::std::mem::align_of::<__guest_handle_const_mmuext_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_mmuext_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_mmuext_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_mmuext_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type domid_t = u16;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mmu_update {
    pub ptr: u64,
    pub val: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mmu_update"][::std::mem::size_of::<mmu_update>() - 16usize];
    ["Alignment of mmu_update"][::std::mem::align_of::<mmu_update>() - 8usize];
    ["Offset of field: mmu_update::ptr"][::std::mem::offset_of!(mmu_update, ptr) - 0usize];
    ["Offset of field: mmu_update::val"][::std::mem::offset_of!(mmu_update, val) - 8usize];
};
pub type mmu_update_t = mmu_update;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_mmu_update_t {
    pub p: *mut mmu_update_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_mmu_update_t"]
        [::std::mem::size_of::<__guest_handle_mmu_update_t>() - 8usize];
    ["Alignment of __guest_handle_mmu_update_t"]
        [::std::mem::align_of::<__guest_handle_mmu_update_t>() - 8usize];
    ["Offset of field: __guest_handle_mmu_update_t::p"]
        [::std::mem::offset_of!(__guest_handle_mmu_update_t, p) - 0usize];
};
impl Default for __guest_handle_mmu_update_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_mmu_update_t {
    pub p: *const mmu_update_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_mmu_update_t"]
        [::std::mem::size_of::<__guest_handle_const_mmu_update_t>() - 8usize];
    ["Alignment of __guest_handle_const_mmu_update_t"]
        [::std::mem::align_of::<__guest_handle_const_mmu_update_t>() - 8usize];
    ["Offset of field: __guest_handle_const_mmu_update_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_mmu_update_t, p) - 0usize];
};
impl Default for __guest_handle_const_mmu_update_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct multicall_entry {
    pub op: xen_ulong_t,
    pub result: xen_ulong_t,
    pub args: [xen_ulong_t; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of multicall_entry"][::std::mem::size_of::<multicall_entry>() - 64usize];
    ["Alignment of multicall_entry"][::std::mem::align_of::<multicall_entry>() - 8usize];
    ["Offset of field: multicall_entry::op"][::std::mem::offset_of!(multicall_entry, op) - 0usize];
    ["Offset of field: multicall_entry::result"]
        [::std::mem::offset_of!(multicall_entry, result) - 8usize];
    ["Offset of field: multicall_entry::args"]
        [::std::mem::offset_of!(multicall_entry, args) - 16usize];
};
pub type multicall_entry_t = multicall_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_multicall_entry_t {
    pub p: *mut multicall_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_multicall_entry_t"]
        [::std::mem::size_of::<__guest_handle_multicall_entry_t>() - 8usize];
    ["Alignment of __guest_handle_multicall_entry_t"]
        [::std::mem::align_of::<__guest_handle_multicall_entry_t>() - 8usize];
    ["Offset of field: __guest_handle_multicall_entry_t::p"]
        [::std::mem::offset_of!(__guest_handle_multicall_entry_t, p) - 0usize];
};
impl Default for __guest_handle_multicall_entry_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_multicall_entry_t {
    pub p: *const multicall_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_multicall_entry_t"]
        [::std::mem::size_of::<__guest_handle_const_multicall_entry_t>() - 8usize];
    ["Alignment of __guest_handle_const_multicall_entry_t"]
        [::std::mem::align_of::<__guest_handle_const_multicall_entry_t>() - 8usize];
    ["Offset of field: __guest_handle_const_multicall_entry_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_multicall_entry_t, p) - 0usize];
};
impl Default for __guest_handle_const_multicall_entry_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_time_info {
    pub version: u32,
    pub pad0: u32,
    pub tsc_timestamp: u64,
    pub system_time: u64,
    pub tsc_to_system_mul: u32,
    pub tsc_shift: i8,
    pub flags: u8,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_time_info"][::std::mem::size_of::<vcpu_time_info>() - 32usize];
    ["Alignment of vcpu_time_info"][::std::mem::align_of::<vcpu_time_info>() - 8usize];
    ["Offset of field: vcpu_time_info::version"]
        [::std::mem::offset_of!(vcpu_time_info, version) - 0usize];
    ["Offset of field: vcpu_time_info::pad0"]
        [::std::mem::offset_of!(vcpu_time_info, pad0) - 4usize];
    ["Offset of field: vcpu_time_info::tsc_timestamp"]
        [::std::mem::offset_of!(vcpu_time_info, tsc_timestamp) - 8usize];
    ["Offset of field: vcpu_time_info::system_time"]
        [::std::mem::offset_of!(vcpu_time_info, system_time) - 16usize];
    ["Offset of field: vcpu_time_info::tsc_to_system_mul"]
        [::std::mem::offset_of!(vcpu_time_info, tsc_to_system_mul) - 24usize];
    ["Offset of field: vcpu_time_info::tsc_shift"]
        [::std::mem::offset_of!(vcpu_time_info, tsc_shift) - 28usize];
    ["Offset of field: vcpu_time_info::flags"]
        [::std::mem::offset_of!(vcpu_time_info, flags) - 29usize];
    ["Offset of field: vcpu_time_info::pad1"]
        [::std::mem::offset_of!(vcpu_time_info, pad1) - 30usize];
};
pub type vcpu_time_info_t = vcpu_time_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_info {
    pub evtchn_upcall_pending: u8,
    pub evtchn_upcall_mask: u8,
    pub evtchn_pending_sel: xen_ulong_t,
    pub arch: arch_vcpu_info,
    pub time: vcpu_time_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_info"][::std::mem::size_of::<vcpu_info>() - 64usize];
    ["Alignment of vcpu_info"][::std::mem::align_of::<vcpu_info>() - 8usize];
    ["Offset of field: vcpu_info::evtchn_upcall_pending"]
        [::std::mem::offset_of!(vcpu_info, evtchn_upcall_pending) - 0usize];
    ["Offset of field: vcpu_info::evtchn_upcall_mask"]
        [::std::mem::offset_of!(vcpu_info, evtchn_upcall_mask) - 1usize];
    ["Offset of field: vcpu_info::evtchn_pending_sel"]
        [::std::mem::offset_of!(vcpu_info, evtchn_pending_sel) - 8usize];
    ["Offset of field: vcpu_info::arch"][::std::mem::offset_of!(vcpu_info, arch) - 16usize];
    ["Offset of field: vcpu_info::time"][::std::mem::offset_of!(vcpu_info, time) - 32usize];
};
pub type vcpu_info_t = vcpu_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_info {
    pub vcpu_info: [vcpu_info; 32usize],
    pub evtchn_pending: [xen_ulong_t; 64usize],
    pub evtchn_mask: [xen_ulong_t; 64usize],
    pub wc_version: u32,
    pub wc_sec: u32,
    pub wc_nsec: u32,
    pub wc_sec_hi: u32,
    pub arch: arch_shared_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shared_info"][::std::mem::size_of::<shared_info>() - 3136usize];
    ["Alignment of shared_info"][::std::mem::align_of::<shared_info>() - 8usize];
    ["Offset of field: shared_info::vcpu_info"]
        [::std::mem::offset_of!(shared_info, vcpu_info) - 0usize];
    ["Offset of field: shared_info::evtchn_pending"]
        [::std::mem::offset_of!(shared_info, evtchn_pending) - 2048usize];
    ["Offset of field: shared_info::evtchn_mask"]
        [::std::mem::offset_of!(shared_info, evtchn_mask) - 2560usize];
    ["Offset of field: shared_info::wc_version"]
        [::std::mem::offset_of!(shared_info, wc_version) - 3072usize];
    ["Offset of field: shared_info::wc_sec"]
        [::std::mem::offset_of!(shared_info, wc_sec) - 3076usize];
    ["Offset of field: shared_info::wc_nsec"]
        [::std::mem::offset_of!(shared_info, wc_nsec) - 3080usize];
    ["Offset of field: shared_info::wc_sec_hi"]
        [::std::mem::offset_of!(shared_info, wc_sec_hi) - 3084usize];
    ["Offset of field: shared_info::arch"][::std::mem::offset_of!(shared_info, arch) - 3088usize];
};
impl Default for shared_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type shared_info_t = shared_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct start_info {
    pub magic: [::std::os::raw::c_char; 32usize],
    pub nr_pages: ::std::os::raw::c_ulong,
    pub shared_info: ::std::os::raw::c_ulong,
    pub flags: u32,
    pub store_mfn: xen_pfn_t,
    pub store_evtchn: u32,
    pub console: start_info__bindgen_ty_1,
    pub pt_base: ::std::os::raw::c_ulong,
    pub nr_pt_frames: ::std::os::raw::c_ulong,
    pub mfn_list: ::std::os::raw::c_ulong,
    pub mod_start: ::std::os::raw::c_ulong,
    pub mod_len: ::std::os::raw::c_ulong,
    pub cmd_line: [i8; 1024usize],
    pub first_p2m_pfn: ::std::os::raw::c_ulong,
    pub nr_p2m_frames: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union start_info__bindgen_ty_1 {
    pub domU: start_info__bindgen_ty_1__bindgen_ty_1,
    pub dom0: start_info__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct start_info__bindgen_ty_1__bindgen_ty_1 {
    pub mfn: xen_pfn_t,
    pub evtchn: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<start_info__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of start_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<start_info__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: start_info__bindgen_ty_1__bindgen_ty_1::mfn"]
        [::std::mem::offset_of!(start_info__bindgen_ty_1__bindgen_ty_1, mfn) - 0usize];
    ["Offset of field: start_info__bindgen_ty_1__bindgen_ty_1::evtchn"]
        [::std::mem::offset_of!(start_info__bindgen_ty_1__bindgen_ty_1, evtchn) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct start_info__bindgen_ty_1__bindgen_ty_2 {
    pub info_off: u32,
    pub info_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<start_info__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of start_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<start_info__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: start_info__bindgen_ty_1__bindgen_ty_2::info_off"]
        [::std::mem::offset_of!(start_info__bindgen_ty_1__bindgen_ty_2, info_off) - 0usize];
    ["Offset of field: start_info__bindgen_ty_1__bindgen_ty_2::info_size"]
        [::std::mem::offset_of!(start_info__bindgen_ty_1__bindgen_ty_2, info_size) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info__bindgen_ty_1"]
        [::std::mem::size_of::<start_info__bindgen_ty_1>() - 16usize];
    ["Alignment of start_info__bindgen_ty_1"]
        [::std::mem::align_of::<start_info__bindgen_ty_1>() - 8usize];
    ["Offset of field: start_info__bindgen_ty_1::domU"]
        [::std::mem::offset_of!(start_info__bindgen_ty_1, domU) - 0usize];
    ["Offset of field: start_info__bindgen_ty_1::dom0"]
        [::std::mem::offset_of!(start_info__bindgen_ty_1, dom0) - 0usize];
};
impl Default for start_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info"][::std::mem::size_of::<start_info>() - 1168usize];
    ["Alignment of start_info"][::std::mem::align_of::<start_info>() - 8usize];
    ["Offset of field: start_info::magic"][::std::mem::offset_of!(start_info, magic) - 0usize];
    ["Offset of field: start_info::nr_pages"]
        [::std::mem::offset_of!(start_info, nr_pages) - 32usize];
    ["Offset of field: start_info::shared_info"]
        [::std::mem::offset_of!(start_info, shared_info) - 40usize];
    ["Offset of field: start_info::flags"][::std::mem::offset_of!(start_info, flags) - 48usize];
    ["Offset of field: start_info::store_mfn"]
        [::std::mem::offset_of!(start_info, store_mfn) - 56usize];
    ["Offset of field: start_info::store_evtchn"]
        [::std::mem::offset_of!(start_info, store_evtchn) - 64usize];
    ["Offset of field: start_info::console"][::std::mem::offset_of!(start_info, console) - 72usize];
    ["Offset of field: start_info::pt_base"][::std::mem::offset_of!(start_info, pt_base) - 88usize];
    ["Offset of field: start_info::nr_pt_frames"]
        [::std::mem::offset_of!(start_info, nr_pt_frames) - 96usize];
    ["Offset of field: start_info::mfn_list"]
        [::std::mem::offset_of!(start_info, mfn_list) - 104usize];
    ["Offset of field: start_info::mod_start"]
        [::std::mem::offset_of!(start_info, mod_start) - 112usize];
    ["Offset of field: start_info::mod_len"]
        [::std::mem::offset_of!(start_info, mod_len) - 120usize];
    ["Offset of field: start_info::cmd_line"]
        [::std::mem::offset_of!(start_info, cmd_line) - 128usize];
    ["Offset of field: start_info::first_p2m_pfn"]
        [::std::mem::offset_of!(start_info, first_p2m_pfn) - 1152usize];
    ["Offset of field: start_info::nr_p2m_frames"]
        [::std::mem::offset_of!(start_info, nr_p2m_frames) - 1160usize];
};
impl Default for start_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type start_info_t = start_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_multiboot_mod_list {
    pub mod_start: u32,
    pub mod_end: u32,
    pub cmdline: u32,
    pub pad: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_multiboot_mod_list"][::std::mem::size_of::<xen_multiboot_mod_list>() - 16usize];
    ["Alignment of xen_multiboot_mod_list"]
        [::std::mem::align_of::<xen_multiboot_mod_list>() - 4usize];
    ["Offset of field: xen_multiboot_mod_list::mod_start"]
        [::std::mem::offset_of!(xen_multiboot_mod_list, mod_start) - 0usize];
    ["Offset of field: xen_multiboot_mod_list::mod_end"]
        [::std::mem::offset_of!(xen_multiboot_mod_list, mod_end) - 4usize];
    ["Offset of field: xen_multiboot_mod_list::cmdline"]
        [::std::mem::offset_of!(xen_multiboot_mod_list, cmdline) - 8usize];
    ["Offset of field: xen_multiboot_mod_list::pad"]
        [::std::mem::offset_of!(xen_multiboot_mod_list, pad) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dom0_vga_console_info {
    pub video_type: u8,
    pub u: dom0_vga_console_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dom0_vga_console_info__bindgen_ty_1 {
    pub text_mode_3: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
    pub vesa_lfb: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1 {
    pub font_height: u16,
    pub cursor_x: u16,
    pub cursor_y: u16,
    pub rows: u16,
    pub columns: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>() - 10usize];
    ["Alignment of dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1::font_height"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
        font_height
    ) - 0usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1::cursor_x"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
        cursor_x
    ) - 2usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1::cursor_y"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
        cursor_y
    ) - 4usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1::rows"]
        [::std::mem::offset_of!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1, rows) - 6usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1::columns"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
        columns
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2 {
    pub width: u16,
    pub height: u16,
    pub bytes_per_line: u16,
    pub bits_per_pixel: u16,
    pub lfb_base: u32,
    pub lfb_size: u32,
    pub red_pos: u8,
    pub red_size: u8,
    pub green_pos: u8,
    pub green_size: u8,
    pub blue_pos: u8,
    pub blue_size: u8,
    pub rsvd_pos: u8,
    pub rsvd_size: u8,
    pub gbl_caps: u32,
    pub mode_attrs: u16,
    pub pad: u16,
    pub ext_lfb_base: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>() - 36usize];
    ["Alignment of dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::width"]
        [::std::mem::offset_of!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2, width) - 0usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::height"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        height
    ) - 2usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::bytes_per_line"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        bytes_per_line
    )
        - 4usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::bits_per_pixel"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        bits_per_pixel
    )
        - 6usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::lfb_base"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        lfb_base
    ) - 8usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::lfb_size"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        lfb_size
    ) - 12usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::red_pos"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        red_pos
    ) - 16usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::red_size"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        red_size
    ) - 17usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::green_pos"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        green_pos
    ) - 18usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::green_size"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        green_size
    ) - 19usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::blue_pos"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        blue_pos
    ) - 20usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::blue_size"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        blue_size
    ) - 21usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::rsvd_pos"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        rsvd_pos
    ) - 22usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::rsvd_size"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        rsvd_size
    ) - 23usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::gbl_caps"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        gbl_caps
    ) - 24usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::mode_attrs"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        mode_attrs
    ) - 28usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::pad"]
        [::std::mem::offset_of!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2, pad) - 30usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2::ext_lfb_base"][::std::mem::offset_of!(
        dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
        ext_lfb_base
    )
        - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dom0_vga_console_info__bindgen_ty_1"]
        [::std::mem::size_of::<dom0_vga_console_info__bindgen_ty_1>() - 36usize];
    ["Alignment of dom0_vga_console_info__bindgen_ty_1"]
        [::std::mem::align_of::<dom0_vga_console_info__bindgen_ty_1>() - 4usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1::text_mode_3"]
        [::std::mem::offset_of!(dom0_vga_console_info__bindgen_ty_1, text_mode_3) - 0usize];
    ["Offset of field: dom0_vga_console_info__bindgen_ty_1::vesa_lfb"]
        [::std::mem::offset_of!(dom0_vga_console_info__bindgen_ty_1, vesa_lfb) - 0usize];
};
impl Default for dom0_vga_console_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dom0_vga_console_info"][::std::mem::size_of::<dom0_vga_console_info>() - 40usize];
    ["Alignment of dom0_vga_console_info"]
        [::std::mem::align_of::<dom0_vga_console_info>() - 4usize];
    ["Offset of field: dom0_vga_console_info::video_type"]
        [::std::mem::offset_of!(dom0_vga_console_info, video_type) - 0usize];
    ["Offset of field: dom0_vga_console_info::u"]
        [::std::mem::offset_of!(dom0_vga_console_info, u) - 4usize];
};
impl Default for dom0_vga_console_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type dom0_vga_console_info_t = dom0_vga_console_info;
pub type xen_domain_handle_t = [u8; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint8 {
    pub p: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_uint8"][::std::mem::size_of::<__guest_handle_uint8>() - 8usize];
    ["Alignment of __guest_handle_uint8"][::std::mem::align_of::<__guest_handle_uint8>() - 8usize];
    ["Offset of field: __guest_handle_uint8::p"]
        [::std::mem::offset_of!(__guest_handle_uint8, p) - 0usize];
};
impl Default for __guest_handle_uint8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint8 {
    pub p: *const u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_uint8"]
        [::std::mem::size_of::<__guest_handle_const_uint8>() - 8usize];
    ["Alignment of __guest_handle_const_uint8"]
        [::std::mem::align_of::<__guest_handle_const_uint8>() - 8usize];
    ["Offset of field: __guest_handle_const_uint8::p"]
        [::std::mem::offset_of!(__guest_handle_const_uint8, p) - 0usize];
};
impl Default for __guest_handle_const_uint8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint16 {
    pub p: *mut u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_uint16"][::std::mem::size_of::<__guest_handle_uint16>() - 8usize];
    ["Alignment of __guest_handle_uint16"]
        [::std::mem::align_of::<__guest_handle_uint16>() - 8usize];
    ["Offset of field: __guest_handle_uint16::p"]
        [::std::mem::offset_of!(__guest_handle_uint16, p) - 0usize];
};
impl Default for __guest_handle_uint16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint16 {
    pub p: *const u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_uint16"]
        [::std::mem::size_of::<__guest_handle_const_uint16>() - 8usize];
    ["Alignment of __guest_handle_const_uint16"]
        [::std::mem::align_of::<__guest_handle_const_uint16>() - 8usize];
    ["Offset of field: __guest_handle_const_uint16::p"]
        [::std::mem::offset_of!(__guest_handle_const_uint16, p) - 0usize];
};
impl Default for __guest_handle_const_uint16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint32 {
    pub p: *mut u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_uint32"][::std::mem::size_of::<__guest_handle_uint32>() - 8usize];
    ["Alignment of __guest_handle_uint32"]
        [::std::mem::align_of::<__guest_handle_uint32>() - 8usize];
    ["Offset of field: __guest_handle_uint32::p"]
        [::std::mem::offset_of!(__guest_handle_uint32, p) - 0usize];
};
impl Default for __guest_handle_uint32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint32 {
    pub p: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_uint32"]
        [::std::mem::size_of::<__guest_handle_const_uint32>() - 8usize];
    ["Alignment of __guest_handle_const_uint32"]
        [::std::mem::align_of::<__guest_handle_const_uint32>() - 8usize];
    ["Offset of field: __guest_handle_const_uint32::p"]
        [::std::mem::offset_of!(__guest_handle_const_uint32, p) - 0usize];
};
impl Default for __guest_handle_const_uint32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_uint64 {
    pub p: *mut u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_uint64"][::std::mem::size_of::<__guest_handle_uint64>() - 8usize];
    ["Alignment of __guest_handle_uint64"]
        [::std::mem::align_of::<__guest_handle_uint64>() - 8usize];
    ["Offset of field: __guest_handle_uint64::p"]
        [::std::mem::offset_of!(__guest_handle_uint64, p) - 0usize];
};
impl Default for __guest_handle_uint64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_uint64 {
    pub p: *const u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_uint64"]
        [::std::mem::size_of::<__guest_handle_const_uint64>() - 8usize];
    ["Alignment of __guest_handle_const_uint64"]
        [::std::mem::align_of::<__guest_handle_const_uint64>() - 8usize];
    ["Offset of field: __guest_handle_const_uint64::p"]
        [::std::mem::offset_of!(__guest_handle_const_uint64, p) - 0usize];
};
impl Default for __guest_handle_const_uint64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_uuid_t {
    pub a: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_uuid_t"][::std::mem::size_of::<xen_uuid_t>() - 16usize];
    ["Alignment of xen_uuid_t"][::std::mem::align_of::<xen_uuid_t>() - 1usize];
    ["Offset of field: xen_uuid_t::a"][::std::mem::offset_of!(xen_uuid_t, a) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenctl_bitmap {
    pub bitmap: __guest_handle_uint8,
    pub nr_bits: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenctl_bitmap"][::std::mem::size_of::<xenctl_bitmap>() - 16usize];
    ["Alignment of xenctl_bitmap"][::std::mem::align_of::<xenctl_bitmap>() - 8usize];
    ["Offset of field: xenctl_bitmap::bitmap"]
        [::std::mem::offset_of!(xenctl_bitmap, bitmap) - 0usize];
    ["Offset of field: xenctl_bitmap::nr_bits"]
        [::std::mem::offset_of!(xenctl_bitmap, nr_bits) - 8usize];
};
impl Default for xenctl_bitmap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenctl_bitmap_t = xenctl_bitmap;
pub type evtchn_port_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_evtchn_port_t {
    pub p: *mut evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_evtchn_port_t"]
        [::std::mem::size_of::<__guest_handle_evtchn_port_t>() - 8usize];
    ["Alignment of __guest_handle_evtchn_port_t"]
        [::std::mem::align_of::<__guest_handle_evtchn_port_t>() - 8usize];
    ["Offset of field: __guest_handle_evtchn_port_t::p"]
        [::std::mem::offset_of!(__guest_handle_evtchn_port_t, p) - 0usize];
};
impl Default for __guest_handle_evtchn_port_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_evtchn_port_t {
    pub p: *const evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_evtchn_port_t"]
        [::std::mem::size_of::<__guest_handle_const_evtchn_port_t>() - 8usize];
    ["Alignment of __guest_handle_const_evtchn_port_t"]
        [::std::mem::align_of::<__guest_handle_const_evtchn_port_t>() - 8usize];
    ["Offset of field: __guest_handle_const_evtchn_port_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_evtchn_port_t, p) - 0usize];
};
impl Default for __guest_handle_const_evtchn_port_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_alloc_unbound {
    pub dom: domid_t,
    pub remote_dom: domid_t,
    pub port: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_alloc_unbound"][::std::mem::size_of::<evtchn_alloc_unbound>() - 8usize];
    ["Alignment of evtchn_alloc_unbound"][::std::mem::align_of::<evtchn_alloc_unbound>() - 4usize];
    ["Offset of field: evtchn_alloc_unbound::dom"]
        [::std::mem::offset_of!(evtchn_alloc_unbound, dom) - 0usize];
    ["Offset of field: evtchn_alloc_unbound::remote_dom"]
        [::std::mem::offset_of!(evtchn_alloc_unbound, remote_dom) - 2usize];
    ["Offset of field: evtchn_alloc_unbound::port"]
        [::std::mem::offset_of!(evtchn_alloc_unbound, port) - 4usize];
};
pub type evtchn_alloc_unbound_t = evtchn_alloc_unbound;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_bind_interdomain {
    pub remote_dom: domid_t,
    pub remote_port: evtchn_port_t,
    pub local_port: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_bind_interdomain"][::std::mem::size_of::<evtchn_bind_interdomain>() - 12usize];
    ["Alignment of evtchn_bind_interdomain"]
        [::std::mem::align_of::<evtchn_bind_interdomain>() - 4usize];
    ["Offset of field: evtchn_bind_interdomain::remote_dom"]
        [::std::mem::offset_of!(evtchn_bind_interdomain, remote_dom) - 0usize];
    ["Offset of field: evtchn_bind_interdomain::remote_port"]
        [::std::mem::offset_of!(evtchn_bind_interdomain, remote_port) - 4usize];
    ["Offset of field: evtchn_bind_interdomain::local_port"]
        [::std::mem::offset_of!(evtchn_bind_interdomain, local_port) - 8usize];
};
pub type evtchn_bind_interdomain_t = evtchn_bind_interdomain;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_bind_virq {
    pub virq: u32,
    pub vcpu: u32,
    pub port: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_bind_virq"][::std::mem::size_of::<evtchn_bind_virq>() - 12usize];
    ["Alignment of evtchn_bind_virq"][::std::mem::align_of::<evtchn_bind_virq>() - 4usize];
    ["Offset of field: evtchn_bind_virq::virq"]
        [::std::mem::offset_of!(evtchn_bind_virq, virq) - 0usize];
    ["Offset of field: evtchn_bind_virq::vcpu"]
        [::std::mem::offset_of!(evtchn_bind_virq, vcpu) - 4usize];
    ["Offset of field: evtchn_bind_virq::port"]
        [::std::mem::offset_of!(evtchn_bind_virq, port) - 8usize];
};
pub type evtchn_bind_virq_t = evtchn_bind_virq;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_bind_pirq {
    pub pirq: u32,
    pub flags: u32,
    pub port: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_bind_pirq"][::std::mem::size_of::<evtchn_bind_pirq>() - 12usize];
    ["Alignment of evtchn_bind_pirq"][::std::mem::align_of::<evtchn_bind_pirq>() - 4usize];
    ["Offset of field: evtchn_bind_pirq::pirq"]
        [::std::mem::offset_of!(evtchn_bind_pirq, pirq) - 0usize];
    ["Offset of field: evtchn_bind_pirq::flags"]
        [::std::mem::offset_of!(evtchn_bind_pirq, flags) - 4usize];
    ["Offset of field: evtchn_bind_pirq::port"]
        [::std::mem::offset_of!(evtchn_bind_pirq, port) - 8usize];
};
pub type evtchn_bind_pirq_t = evtchn_bind_pirq;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_bind_ipi {
    pub vcpu: u32,
    pub port: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_bind_ipi"][::std::mem::size_of::<evtchn_bind_ipi>() - 8usize];
    ["Alignment of evtchn_bind_ipi"][::std::mem::align_of::<evtchn_bind_ipi>() - 4usize];
    ["Offset of field: evtchn_bind_ipi::vcpu"]
        [::std::mem::offset_of!(evtchn_bind_ipi, vcpu) - 0usize];
    ["Offset of field: evtchn_bind_ipi::port"]
        [::std::mem::offset_of!(evtchn_bind_ipi, port) - 4usize];
};
pub type evtchn_bind_ipi_t = evtchn_bind_ipi;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_close {
    pub port: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_close"][::std::mem::size_of::<evtchn_close>() - 4usize];
    ["Alignment of evtchn_close"][::std::mem::align_of::<evtchn_close>() - 4usize];
    ["Offset of field: evtchn_close::port"][::std::mem::offset_of!(evtchn_close, port) - 0usize];
};
pub type evtchn_close_t = evtchn_close;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_send {
    pub port: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_send"][::std::mem::size_of::<evtchn_send>() - 4usize];
    ["Alignment of evtchn_send"][::std::mem::align_of::<evtchn_send>() - 4usize];
    ["Offset of field: evtchn_send::port"][::std::mem::offset_of!(evtchn_send, port) - 0usize];
};
pub type evtchn_send_t = evtchn_send;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evtchn_status {
    pub dom: domid_t,
    pub port: evtchn_port_t,
    pub status: u32,
    pub vcpu: u32,
    pub u: evtchn_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evtchn_status__bindgen_ty_1 {
    pub unbound: evtchn_status__bindgen_ty_1__bindgen_ty_1,
    pub interdomain: evtchn_status__bindgen_ty_1__bindgen_ty_2,
    pub pirq: u32,
    pub virq: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_status__bindgen_ty_1__bindgen_ty_1 {
    pub dom: domid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_status__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<evtchn_status__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of evtchn_status__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<evtchn_status__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: evtchn_status__bindgen_ty_1__bindgen_ty_1::dom"]
        [::std::mem::offset_of!(evtchn_status__bindgen_ty_1__bindgen_ty_1, dom) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_status__bindgen_ty_1__bindgen_ty_2 {
    pub dom: domid_t,
    pub port: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_status__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<evtchn_status__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of evtchn_status__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<evtchn_status__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: evtchn_status__bindgen_ty_1__bindgen_ty_2::dom"]
        [::std::mem::offset_of!(evtchn_status__bindgen_ty_1__bindgen_ty_2, dom) - 0usize];
    ["Offset of field: evtchn_status__bindgen_ty_1__bindgen_ty_2::port"]
        [::std::mem::offset_of!(evtchn_status__bindgen_ty_1__bindgen_ty_2, port) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_status__bindgen_ty_1"]
        [::std::mem::size_of::<evtchn_status__bindgen_ty_1>() - 8usize];
    ["Alignment of evtchn_status__bindgen_ty_1"]
        [::std::mem::align_of::<evtchn_status__bindgen_ty_1>() - 4usize];
    ["Offset of field: evtchn_status__bindgen_ty_1::unbound"]
        [::std::mem::offset_of!(evtchn_status__bindgen_ty_1, unbound) - 0usize];
    ["Offset of field: evtchn_status__bindgen_ty_1::interdomain"]
        [::std::mem::offset_of!(evtchn_status__bindgen_ty_1, interdomain) - 0usize];
    ["Offset of field: evtchn_status__bindgen_ty_1::pirq"]
        [::std::mem::offset_of!(evtchn_status__bindgen_ty_1, pirq) - 0usize];
    ["Offset of field: evtchn_status__bindgen_ty_1::virq"]
        [::std::mem::offset_of!(evtchn_status__bindgen_ty_1, virq) - 0usize];
};
impl Default for evtchn_status__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_status"][::std::mem::size_of::<evtchn_status>() - 24usize];
    ["Alignment of evtchn_status"][::std::mem::align_of::<evtchn_status>() - 4usize];
    ["Offset of field: evtchn_status::dom"][::std::mem::offset_of!(evtchn_status, dom) - 0usize];
    ["Offset of field: evtchn_status::port"][::std::mem::offset_of!(evtchn_status, port) - 4usize];
    ["Offset of field: evtchn_status::status"]
        [::std::mem::offset_of!(evtchn_status, status) - 8usize];
    ["Offset of field: evtchn_status::vcpu"][::std::mem::offset_of!(evtchn_status, vcpu) - 12usize];
    ["Offset of field: evtchn_status::u"][::std::mem::offset_of!(evtchn_status, u) - 16usize];
};
impl Default for evtchn_status {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type evtchn_status_t = evtchn_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_bind_vcpu {
    pub port: evtchn_port_t,
    pub vcpu: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_bind_vcpu"][::std::mem::size_of::<evtchn_bind_vcpu>() - 8usize];
    ["Alignment of evtchn_bind_vcpu"][::std::mem::align_of::<evtchn_bind_vcpu>() - 4usize];
    ["Offset of field: evtchn_bind_vcpu::port"]
        [::std::mem::offset_of!(evtchn_bind_vcpu, port) - 0usize];
    ["Offset of field: evtchn_bind_vcpu::vcpu"]
        [::std::mem::offset_of!(evtchn_bind_vcpu, vcpu) - 4usize];
};
pub type evtchn_bind_vcpu_t = evtchn_bind_vcpu;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_unmask {
    pub port: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_unmask"][::std::mem::size_of::<evtchn_unmask>() - 4usize];
    ["Alignment of evtchn_unmask"][::std::mem::align_of::<evtchn_unmask>() - 4usize];
    ["Offset of field: evtchn_unmask::port"][::std::mem::offset_of!(evtchn_unmask, port) - 0usize];
};
pub type evtchn_unmask_t = evtchn_unmask;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_reset {
    pub dom: domid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_reset"][::std::mem::size_of::<evtchn_reset>() - 2usize];
    ["Alignment of evtchn_reset"][::std::mem::align_of::<evtchn_reset>() - 2usize];
    ["Offset of field: evtchn_reset::dom"][::std::mem::offset_of!(evtchn_reset, dom) - 0usize];
};
pub type evtchn_reset_t = evtchn_reset;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_init_control {
    pub control_gfn: u64,
    pub offset: u32,
    pub vcpu: u32,
    pub link_bits: u8,
    pub _pad: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_init_control"][::std::mem::size_of::<evtchn_init_control>() - 24usize];
    ["Alignment of evtchn_init_control"][::std::mem::align_of::<evtchn_init_control>() - 8usize];
    ["Offset of field: evtchn_init_control::control_gfn"]
        [::std::mem::offset_of!(evtchn_init_control, control_gfn) - 0usize];
    ["Offset of field: evtchn_init_control::offset"]
        [::std::mem::offset_of!(evtchn_init_control, offset) - 8usize];
    ["Offset of field: evtchn_init_control::vcpu"]
        [::std::mem::offset_of!(evtchn_init_control, vcpu) - 12usize];
    ["Offset of field: evtchn_init_control::link_bits"]
        [::std::mem::offset_of!(evtchn_init_control, link_bits) - 16usize];
    ["Offset of field: evtchn_init_control::_pad"]
        [::std::mem::offset_of!(evtchn_init_control, _pad) - 17usize];
};
pub type evtchn_init_control_t = evtchn_init_control;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_expand_array {
    pub array_gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_expand_array"][::std::mem::size_of::<evtchn_expand_array>() - 8usize];
    ["Alignment of evtchn_expand_array"][::std::mem::align_of::<evtchn_expand_array>() - 8usize];
    ["Offset of field: evtchn_expand_array::array_gfn"]
        [::std::mem::offset_of!(evtchn_expand_array, array_gfn) - 0usize];
};
pub type evtchn_expand_array_t = evtchn_expand_array;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_set_priority {
    pub port: evtchn_port_t,
    pub priority: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_set_priority"][::std::mem::size_of::<evtchn_set_priority>() - 8usize];
    ["Alignment of evtchn_set_priority"][::std::mem::align_of::<evtchn_set_priority>() - 4usize];
    ["Offset of field: evtchn_set_priority::port"]
        [::std::mem::offset_of!(evtchn_set_priority, port) - 0usize];
    ["Offset of field: evtchn_set_priority::priority"]
        [::std::mem::offset_of!(evtchn_set_priority, priority) - 4usize];
};
pub type evtchn_set_priority_t = evtchn_set_priority;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evtchn_op {
    pub cmd: u32,
    pub u: evtchn_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evtchn_op__bindgen_ty_1 {
    pub alloc_unbound: evtchn_alloc_unbound_t,
    pub bind_interdomain: evtchn_bind_interdomain_t,
    pub bind_virq: evtchn_bind_virq_t,
    pub bind_pirq: evtchn_bind_pirq_t,
    pub bind_ipi: evtchn_bind_ipi_t,
    pub close: evtchn_close_t,
    pub send: evtchn_send_t,
    pub status: evtchn_status_t,
    pub bind_vcpu: evtchn_bind_vcpu_t,
    pub unmask: evtchn_unmask_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_op__bindgen_ty_1"][::std::mem::size_of::<evtchn_op__bindgen_ty_1>() - 24usize];
    ["Alignment of evtchn_op__bindgen_ty_1"]
        [::std::mem::align_of::<evtchn_op__bindgen_ty_1>() - 4usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::alloc_unbound"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, alloc_unbound) - 0usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::bind_interdomain"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, bind_interdomain) - 0usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::bind_virq"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, bind_virq) - 0usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::bind_pirq"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, bind_pirq) - 0usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::bind_ipi"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, bind_ipi) - 0usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::close"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, close) - 0usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::send"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, send) - 0usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::status"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, status) - 0usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::bind_vcpu"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, bind_vcpu) - 0usize];
    ["Offset of field: evtchn_op__bindgen_ty_1::unmask"]
        [::std::mem::offset_of!(evtchn_op__bindgen_ty_1, unmask) - 0usize];
};
impl Default for evtchn_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_op"][::std::mem::size_of::<evtchn_op>() - 28usize];
    ["Alignment of evtchn_op"][::std::mem::align_of::<evtchn_op>() - 4usize];
    ["Offset of field: evtchn_op::cmd"][::std::mem::offset_of!(evtchn_op, cmd) - 0usize];
    ["Offset of field: evtchn_op::u"][::std::mem::offset_of!(evtchn_op, u) - 4usize];
};
impl Default for evtchn_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type evtchn_op_t = evtchn_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_evtchn_op_t {
    pub p: *mut evtchn_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_evtchn_op_t"]
        [::std::mem::size_of::<__guest_handle_evtchn_op_t>() - 8usize];
    ["Alignment of __guest_handle_evtchn_op_t"]
        [::std::mem::align_of::<__guest_handle_evtchn_op_t>() - 8usize];
    ["Offset of field: __guest_handle_evtchn_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_evtchn_op_t, p) - 0usize];
};
impl Default for __guest_handle_evtchn_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_evtchn_op_t {
    pub p: *const evtchn_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_evtchn_op_t"]
        [::std::mem::size_of::<__guest_handle_const_evtchn_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_evtchn_op_t"]
        [::std::mem::align_of::<__guest_handle_const_evtchn_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_evtchn_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_evtchn_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_evtchn_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type event_word_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct evtchn_fifo_control_block {
    pub ready: u32,
    pub _rsvd: u32,
    pub head: [u32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of evtchn_fifo_control_block"]
        [::std::mem::size_of::<evtchn_fifo_control_block>() - 72usize];
    ["Alignment of evtchn_fifo_control_block"]
        [::std::mem::align_of::<evtchn_fifo_control_block>() - 4usize];
    ["Offset of field: evtchn_fifo_control_block::ready"]
        [::std::mem::offset_of!(evtchn_fifo_control_block, ready) - 0usize];
    ["Offset of field: evtchn_fifo_control_block::_rsvd"]
        [::std::mem::offset_of!(evtchn_fifo_control_block, _rsvd) - 4usize];
    ["Offset of field: evtchn_fifo_control_block::head"]
        [::std::mem::offset_of!(evtchn_fifo_control_block, head) - 8usize];
};
pub type evtchn_fifo_control_block_t = evtchn_fifo_control_block;
pub type grant_ref_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct grant_entry_v1 {
    pub flags: u16,
    pub domid: domid_t,
    pub frame: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of grant_entry_v1"][::std::mem::size_of::<grant_entry_v1>() - 8usize];
    ["Alignment of grant_entry_v1"][::std::mem::align_of::<grant_entry_v1>() - 4usize];
    ["Offset of field: grant_entry_v1::flags"]
        [::std::mem::offset_of!(grant_entry_v1, flags) - 0usize];
    ["Offset of field: grant_entry_v1::domid"]
        [::std::mem::offset_of!(grant_entry_v1, domid) - 2usize];
    ["Offset of field: grant_entry_v1::frame"]
        [::std::mem::offset_of!(grant_entry_v1, frame) - 4usize];
};
pub type grant_entry_v1_t = grant_entry_v1;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct grant_entry_header {
    pub flags: u16,
    pub domid: domid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of grant_entry_header"][::std::mem::size_of::<grant_entry_header>() - 4usize];
    ["Alignment of grant_entry_header"][::std::mem::align_of::<grant_entry_header>() - 2usize];
    ["Offset of field: grant_entry_header::flags"]
        [::std::mem::offset_of!(grant_entry_header, flags) - 0usize];
    ["Offset of field: grant_entry_header::domid"]
        [::std::mem::offset_of!(grant_entry_header, domid) - 2usize];
};
pub type grant_entry_header_t = grant_entry_header;
#[repr(C)]
#[derive(Copy, Clone)]
pub union grant_entry_v2 {
    pub hdr: grant_entry_header_t,
    pub full_page: grant_entry_v2__bindgen_ty_1,
    pub sub_page: grant_entry_v2__bindgen_ty_2,
    pub transitive: grant_entry_v2__bindgen_ty_3,
    pub __spacer: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_1 {
    pub hdr: grant_entry_header_t,
    pub pad0: u32,
    pub frame: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of grant_entry_v2__bindgen_ty_1"]
        [::std::mem::size_of::<grant_entry_v2__bindgen_ty_1>() - 16usize];
    ["Alignment of grant_entry_v2__bindgen_ty_1"]
        [::std::mem::align_of::<grant_entry_v2__bindgen_ty_1>() - 8usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_1, hdr) - 0usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_1::pad0"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_1, pad0) - 4usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_1::frame"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_1, frame) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_2 {
    pub hdr: grant_entry_header_t,
    pub page_off: u16,
    pub length: u16,
    pub frame: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of grant_entry_v2__bindgen_ty_2"]
        [::std::mem::size_of::<grant_entry_v2__bindgen_ty_2>() - 16usize];
    ["Alignment of grant_entry_v2__bindgen_ty_2"]
        [::std::mem::align_of::<grant_entry_v2__bindgen_ty_2>() - 8usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_2::hdr"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_2, hdr) - 0usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_2::page_off"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_2, page_off) - 4usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_2::length"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_2, length) - 6usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_2::frame"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_2, frame) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_3 {
    pub hdr: grant_entry_header_t,
    pub trans_domid: domid_t,
    pub pad0: u16,
    pub gref: grant_ref_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of grant_entry_v2__bindgen_ty_3"]
        [::std::mem::size_of::<grant_entry_v2__bindgen_ty_3>() - 12usize];
    ["Alignment of grant_entry_v2__bindgen_ty_3"]
        [::std::mem::align_of::<grant_entry_v2__bindgen_ty_3>() - 4usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_3::hdr"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_3, hdr) - 0usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_3::trans_domid"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_3, trans_domid) - 4usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_3::pad0"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_3, pad0) - 6usize];
    ["Offset of field: grant_entry_v2__bindgen_ty_3::gref"]
        [::std::mem::offset_of!(grant_entry_v2__bindgen_ty_3, gref) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of grant_entry_v2"][::std::mem::size_of::<grant_entry_v2>() - 16usize];
    ["Alignment of grant_entry_v2"][::std::mem::align_of::<grant_entry_v2>() - 8usize];
    ["Offset of field: grant_entry_v2::hdr"][::std::mem::offset_of!(grant_entry_v2, hdr) - 0usize];
    ["Offset of field: grant_entry_v2::full_page"]
        [::std::mem::offset_of!(grant_entry_v2, full_page) - 0usize];
    ["Offset of field: grant_entry_v2::sub_page"]
        [::std::mem::offset_of!(grant_entry_v2, sub_page) - 0usize];
    ["Offset of field: grant_entry_v2::transitive"]
        [::std::mem::offset_of!(grant_entry_v2, transitive) - 0usize];
    ["Offset of field: grant_entry_v2::__spacer"]
        [::std::mem::offset_of!(grant_entry_v2, __spacer) - 0usize];
};
impl Default for grant_entry_v2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type grant_entry_v2_t = grant_entry_v2;
pub type grant_status_t = u16;
pub type grant_handle_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gnttab_map_grant_ref {
    pub host_addr: u64,
    pub flags: u32,
    pub ref_: grant_ref_t,
    pub dom: domid_t,
    pub status: i16,
    pub handle: grant_handle_t,
    pub dev_bus_addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_map_grant_ref"][::std::mem::size_of::<gnttab_map_grant_ref>() - 32usize];
    ["Alignment of gnttab_map_grant_ref"][::std::mem::align_of::<gnttab_map_grant_ref>() - 8usize];
    ["Offset of field: gnttab_map_grant_ref::host_addr"]
        [::std::mem::offset_of!(gnttab_map_grant_ref, host_addr) - 0usize];
    ["Offset of field: gnttab_map_grant_ref::flags"]
        [::std::mem::offset_of!(gnttab_map_grant_ref, flags) - 8usize];
    ["Offset of field: gnttab_map_grant_ref::ref_"]
        [::std::mem::offset_of!(gnttab_map_grant_ref, ref_) - 12usize];
    ["Offset of field: gnttab_map_grant_ref::dom"]
        [::std::mem::offset_of!(gnttab_map_grant_ref, dom) - 16usize];
    ["Offset of field: gnttab_map_grant_ref::status"]
        [::std::mem::offset_of!(gnttab_map_grant_ref, status) - 18usize];
    ["Offset of field: gnttab_map_grant_ref::handle"]
        [::std::mem::offset_of!(gnttab_map_grant_ref, handle) - 20usize];
    ["Offset of field: gnttab_map_grant_ref::dev_bus_addr"]
        [::std::mem::offset_of!(gnttab_map_grant_ref, dev_bus_addr) - 24usize];
};
pub type gnttab_map_grant_ref_t = gnttab_map_grant_ref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_map_grant_ref_t {
    pub p: *mut gnttab_map_grant_ref_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_map_grant_ref_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_map_grant_ref_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_map_grant_ref_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_map_grant_ref_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_map_grant_ref_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_map_grant_ref_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_map_grant_ref_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_map_grant_ref_t {
    pub p: *const gnttab_map_grant_ref_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_map_grant_ref_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_map_grant_ref_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_map_grant_ref_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_map_grant_ref_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_map_grant_ref_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_map_grant_ref_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_map_grant_ref_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gnttab_unmap_grant_ref {
    pub host_addr: u64,
    pub dev_bus_addr: u64,
    pub handle: grant_handle_t,
    pub status: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_unmap_grant_ref"][::std::mem::size_of::<gnttab_unmap_grant_ref>() - 24usize];
    ["Alignment of gnttab_unmap_grant_ref"]
        [::std::mem::align_of::<gnttab_unmap_grant_ref>() - 8usize];
    ["Offset of field: gnttab_unmap_grant_ref::host_addr"]
        [::std::mem::offset_of!(gnttab_unmap_grant_ref, host_addr) - 0usize];
    ["Offset of field: gnttab_unmap_grant_ref::dev_bus_addr"]
        [::std::mem::offset_of!(gnttab_unmap_grant_ref, dev_bus_addr) - 8usize];
    ["Offset of field: gnttab_unmap_grant_ref::handle"]
        [::std::mem::offset_of!(gnttab_unmap_grant_ref, handle) - 16usize];
    ["Offset of field: gnttab_unmap_grant_ref::status"]
        [::std::mem::offset_of!(gnttab_unmap_grant_ref, status) - 20usize];
};
pub type gnttab_unmap_grant_ref_t = gnttab_unmap_grant_ref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_unmap_grant_ref_t {
    pub p: *mut gnttab_unmap_grant_ref_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_unmap_grant_ref_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_unmap_grant_ref_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_unmap_grant_ref_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_unmap_grant_ref_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_unmap_grant_ref_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_unmap_grant_ref_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_unmap_grant_ref_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_unmap_grant_ref_t {
    pub p: *const gnttab_unmap_grant_ref_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_unmap_grant_ref_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_unmap_grant_ref_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_unmap_grant_ref_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_unmap_grant_ref_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_unmap_grant_ref_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_unmap_grant_ref_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_unmap_grant_ref_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_setup_table {
    pub dom: domid_t,
    pub nr_frames: u32,
    pub status: i16,
    pub frame_list: __guest_handle_xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_setup_table"][::std::mem::size_of::<gnttab_setup_table>() - 24usize];
    ["Alignment of gnttab_setup_table"][::std::mem::align_of::<gnttab_setup_table>() - 8usize];
    ["Offset of field: gnttab_setup_table::dom"]
        [::std::mem::offset_of!(gnttab_setup_table, dom) - 0usize];
    ["Offset of field: gnttab_setup_table::nr_frames"]
        [::std::mem::offset_of!(gnttab_setup_table, nr_frames) - 4usize];
    ["Offset of field: gnttab_setup_table::status"]
        [::std::mem::offset_of!(gnttab_setup_table, status) - 8usize];
    ["Offset of field: gnttab_setup_table::frame_list"]
        [::std::mem::offset_of!(gnttab_setup_table, frame_list) - 16usize];
};
impl Default for gnttab_setup_table {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type gnttab_setup_table_t = gnttab_setup_table;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_setup_table_t {
    pub p: *mut gnttab_setup_table_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_setup_table_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_setup_table_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_setup_table_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_setup_table_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_setup_table_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_setup_table_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_setup_table_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_setup_table_t {
    pub p: *const gnttab_setup_table_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_setup_table_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_setup_table_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_setup_table_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_setup_table_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_setup_table_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_setup_table_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_setup_table_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gnttab_dump_table {
    pub dom: domid_t,
    pub status: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_dump_table"][::std::mem::size_of::<gnttab_dump_table>() - 4usize];
    ["Alignment of gnttab_dump_table"][::std::mem::align_of::<gnttab_dump_table>() - 2usize];
    ["Offset of field: gnttab_dump_table::dom"]
        [::std::mem::offset_of!(gnttab_dump_table, dom) - 0usize];
    ["Offset of field: gnttab_dump_table::status"]
        [::std::mem::offset_of!(gnttab_dump_table, status) - 2usize];
};
pub type gnttab_dump_table_t = gnttab_dump_table;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_dump_table_t {
    pub p: *mut gnttab_dump_table_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_dump_table_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_dump_table_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_dump_table_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_dump_table_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_dump_table_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_dump_table_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_dump_table_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_dump_table_t {
    pub p: *const gnttab_dump_table_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_dump_table_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_dump_table_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_dump_table_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_dump_table_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_dump_table_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_dump_table_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_dump_table_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gnttab_transfer {
    pub mfn: xen_pfn_t,
    pub domid: domid_t,
    pub ref_: grant_ref_t,
    pub status: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_transfer"][::std::mem::size_of::<gnttab_transfer>() - 24usize];
    ["Alignment of gnttab_transfer"][::std::mem::align_of::<gnttab_transfer>() - 8usize];
    ["Offset of field: gnttab_transfer::mfn"]
        [::std::mem::offset_of!(gnttab_transfer, mfn) - 0usize];
    ["Offset of field: gnttab_transfer::domid"]
        [::std::mem::offset_of!(gnttab_transfer, domid) - 8usize];
    ["Offset of field: gnttab_transfer::ref_"]
        [::std::mem::offset_of!(gnttab_transfer, ref_) - 12usize];
    ["Offset of field: gnttab_transfer::status"]
        [::std::mem::offset_of!(gnttab_transfer, status) - 16usize];
};
pub type gnttab_transfer_t = gnttab_transfer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_transfer_t {
    pub p: *mut gnttab_transfer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_transfer_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_transfer_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_transfer_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_transfer_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_transfer_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_transfer_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_transfer_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_transfer_t {
    pub p: *const gnttab_transfer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_transfer_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_transfer_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_transfer_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_transfer_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_transfer_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_transfer_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_transfer_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_copy {
    pub source: gnttab_copy_gnttab_copy_ptr,
    pub dest: gnttab_copy_gnttab_copy_ptr,
    pub len: u16,
    pub flags: u16,
    pub status: i16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_copy_gnttab_copy_ptr {
    pub u: gnttab_copy_gnttab_copy_ptr__bindgen_ty_1,
    pub domid: domid_t,
    pub offset: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gnttab_copy_gnttab_copy_ptr__bindgen_ty_1 {
    pub ref_: grant_ref_t,
    pub gmfn: xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_copy_gnttab_copy_ptr__bindgen_ty_1"]
        [::std::mem::size_of::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>() - 8usize];
    ["Alignment of gnttab_copy_gnttab_copy_ptr__bindgen_ty_1"]
        [::std::mem::align_of::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>() - 8usize];
    ["Offset of field: gnttab_copy_gnttab_copy_ptr__bindgen_ty_1::ref_"]
        [::std::mem::offset_of!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1, ref_) - 0usize];
    ["Offset of field: gnttab_copy_gnttab_copy_ptr__bindgen_ty_1::gmfn"]
        [::std::mem::offset_of!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1, gmfn) - 0usize];
};
impl Default for gnttab_copy_gnttab_copy_ptr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_copy_gnttab_copy_ptr"]
        [::std::mem::size_of::<gnttab_copy_gnttab_copy_ptr>() - 16usize];
    ["Alignment of gnttab_copy_gnttab_copy_ptr"]
        [::std::mem::align_of::<gnttab_copy_gnttab_copy_ptr>() - 8usize];
    ["Offset of field: gnttab_copy_gnttab_copy_ptr::u"]
        [::std::mem::offset_of!(gnttab_copy_gnttab_copy_ptr, u) - 0usize];
    ["Offset of field: gnttab_copy_gnttab_copy_ptr::domid"]
        [::std::mem::offset_of!(gnttab_copy_gnttab_copy_ptr, domid) - 8usize];
    ["Offset of field: gnttab_copy_gnttab_copy_ptr::offset"]
        [::std::mem::offset_of!(gnttab_copy_gnttab_copy_ptr, offset) - 10usize];
};
impl Default for gnttab_copy_gnttab_copy_ptr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_copy"][::std::mem::size_of::<gnttab_copy>() - 40usize];
    ["Alignment of gnttab_copy"][::std::mem::align_of::<gnttab_copy>() - 8usize];
    ["Offset of field: gnttab_copy::source"][::std::mem::offset_of!(gnttab_copy, source) - 0usize];
    ["Offset of field: gnttab_copy::dest"][::std::mem::offset_of!(gnttab_copy, dest) - 16usize];
    ["Offset of field: gnttab_copy::len"][::std::mem::offset_of!(gnttab_copy, len) - 32usize];
    ["Offset of field: gnttab_copy::flags"][::std::mem::offset_of!(gnttab_copy, flags) - 34usize];
    ["Offset of field: gnttab_copy::status"][::std::mem::offset_of!(gnttab_copy, status) - 36usize];
};
impl Default for gnttab_copy {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type gnttab_copy_t = gnttab_copy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_copy_t {
    pub p: *mut gnttab_copy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_copy_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_copy_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_copy_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_copy_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_copy_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_copy_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_copy_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_copy_t {
    pub p: *const gnttab_copy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_copy_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_copy_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_copy_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_copy_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_copy_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_copy_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_copy_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gnttab_query_size {
    pub dom: domid_t,
    pub nr_frames: u32,
    pub max_nr_frames: u32,
    pub status: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_query_size"][::std::mem::size_of::<gnttab_query_size>() - 16usize];
    ["Alignment of gnttab_query_size"][::std::mem::align_of::<gnttab_query_size>() - 4usize];
    ["Offset of field: gnttab_query_size::dom"]
        [::std::mem::offset_of!(gnttab_query_size, dom) - 0usize];
    ["Offset of field: gnttab_query_size::nr_frames"]
        [::std::mem::offset_of!(gnttab_query_size, nr_frames) - 4usize];
    ["Offset of field: gnttab_query_size::max_nr_frames"]
        [::std::mem::offset_of!(gnttab_query_size, max_nr_frames) - 8usize];
    ["Offset of field: gnttab_query_size::status"]
        [::std::mem::offset_of!(gnttab_query_size, status) - 12usize];
};
pub type gnttab_query_size_t = gnttab_query_size;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_query_size_t {
    pub p: *mut gnttab_query_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_query_size_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_query_size_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_query_size_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_query_size_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_query_size_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_query_size_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_query_size_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_query_size_t {
    pub p: *const gnttab_query_size_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_query_size_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_query_size_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_query_size_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_query_size_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_query_size_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_query_size_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_query_size_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gnttab_unmap_and_replace {
    pub host_addr: u64,
    pub new_addr: u64,
    pub handle: grant_handle_t,
    pub status: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_unmap_and_replace"]
        [::std::mem::size_of::<gnttab_unmap_and_replace>() - 24usize];
    ["Alignment of gnttab_unmap_and_replace"]
        [::std::mem::align_of::<gnttab_unmap_and_replace>() - 8usize];
    ["Offset of field: gnttab_unmap_and_replace::host_addr"]
        [::std::mem::offset_of!(gnttab_unmap_and_replace, host_addr) - 0usize];
    ["Offset of field: gnttab_unmap_and_replace::new_addr"]
        [::std::mem::offset_of!(gnttab_unmap_and_replace, new_addr) - 8usize];
    ["Offset of field: gnttab_unmap_and_replace::handle"]
        [::std::mem::offset_of!(gnttab_unmap_and_replace, handle) - 16usize];
    ["Offset of field: gnttab_unmap_and_replace::status"]
        [::std::mem::offset_of!(gnttab_unmap_and_replace, status) - 20usize];
};
pub type gnttab_unmap_and_replace_t = gnttab_unmap_and_replace;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_unmap_and_replace_t {
    pub p: *mut gnttab_unmap_and_replace_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_unmap_and_replace_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_unmap_and_replace_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_unmap_and_replace_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_unmap_and_replace_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_unmap_and_replace_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_unmap_and_replace_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_unmap_and_replace_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_unmap_and_replace_t {
    pub p: *const gnttab_unmap_and_replace_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_unmap_and_replace_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_unmap_and_replace_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_unmap_and_replace_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_unmap_and_replace_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_unmap_and_replace_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_unmap_and_replace_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_unmap_and_replace_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gnttab_set_version {
    pub version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_set_version"][::std::mem::size_of::<gnttab_set_version>() - 4usize];
    ["Alignment of gnttab_set_version"][::std::mem::align_of::<gnttab_set_version>() - 4usize];
    ["Offset of field: gnttab_set_version::version"]
        [::std::mem::offset_of!(gnttab_set_version, version) - 0usize];
};
pub type gnttab_set_version_t = gnttab_set_version;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_set_version_t {
    pub p: *mut gnttab_set_version_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_set_version_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_set_version_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_set_version_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_set_version_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_set_version_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_set_version_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_set_version_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_set_version_t {
    pub p: *const gnttab_set_version_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_set_version_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_set_version_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_set_version_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_set_version_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_set_version_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_set_version_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_set_version_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_get_status_frames {
    pub nr_frames: u32,
    pub dom: domid_t,
    pub status: i16,
    pub frame_list: __guest_handle_uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_get_status_frames"]
        [::std::mem::size_of::<gnttab_get_status_frames>() - 16usize];
    ["Alignment of gnttab_get_status_frames"]
        [::std::mem::align_of::<gnttab_get_status_frames>() - 8usize];
    ["Offset of field: gnttab_get_status_frames::nr_frames"]
        [::std::mem::offset_of!(gnttab_get_status_frames, nr_frames) - 0usize];
    ["Offset of field: gnttab_get_status_frames::dom"]
        [::std::mem::offset_of!(gnttab_get_status_frames, dom) - 4usize];
    ["Offset of field: gnttab_get_status_frames::status"]
        [::std::mem::offset_of!(gnttab_get_status_frames, status) - 6usize];
    ["Offset of field: gnttab_get_status_frames::frame_list"]
        [::std::mem::offset_of!(gnttab_get_status_frames, frame_list) - 8usize];
};
impl Default for gnttab_get_status_frames {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type gnttab_get_status_frames_t = gnttab_get_status_frames;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_get_status_frames_t {
    pub p: *mut gnttab_get_status_frames_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_get_status_frames_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_get_status_frames_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_get_status_frames_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_get_status_frames_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_get_status_frames_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_get_status_frames_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_get_status_frames_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_get_status_frames_t {
    pub p: *const gnttab_get_status_frames_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_get_status_frames_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_get_status_frames_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_get_status_frames_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_get_status_frames_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_get_status_frames_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_get_status_frames_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_get_status_frames_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gnttab_get_version {
    pub dom: domid_t,
    pub pad: u16,
    pub version: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_get_version"][::std::mem::size_of::<gnttab_get_version>() - 8usize];
    ["Alignment of gnttab_get_version"][::std::mem::align_of::<gnttab_get_version>() - 4usize];
    ["Offset of field: gnttab_get_version::dom"]
        [::std::mem::offset_of!(gnttab_get_version, dom) - 0usize];
    ["Offset of field: gnttab_get_version::pad"]
        [::std::mem::offset_of!(gnttab_get_version, pad) - 2usize];
    ["Offset of field: gnttab_get_version::version"]
        [::std::mem::offset_of!(gnttab_get_version, version) - 4usize];
};
pub type gnttab_get_version_t = gnttab_get_version;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_get_version_t {
    pub p: *mut gnttab_get_version_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_get_version_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_get_version_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_get_version_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_get_version_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_get_version_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_get_version_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_get_version_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_get_version_t {
    pub p: *const gnttab_get_version_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_get_version_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_get_version_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_get_version_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_get_version_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_get_version_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_get_version_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_get_version_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct gnttab_swap_grant_ref {
    pub ref_a: grant_ref_t,
    pub ref_b: grant_ref_t,
    pub status: i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_swap_grant_ref"][::std::mem::size_of::<gnttab_swap_grant_ref>() - 12usize];
    ["Alignment of gnttab_swap_grant_ref"]
        [::std::mem::align_of::<gnttab_swap_grant_ref>() - 4usize];
    ["Offset of field: gnttab_swap_grant_ref::ref_a"]
        [::std::mem::offset_of!(gnttab_swap_grant_ref, ref_a) - 0usize];
    ["Offset of field: gnttab_swap_grant_ref::ref_b"]
        [::std::mem::offset_of!(gnttab_swap_grant_ref, ref_b) - 4usize];
    ["Offset of field: gnttab_swap_grant_ref::status"]
        [::std::mem::offset_of!(gnttab_swap_grant_ref, status) - 8usize];
};
pub type gnttab_swap_grant_ref_t = gnttab_swap_grant_ref;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_swap_grant_ref_t {
    pub p: *mut gnttab_swap_grant_ref_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_swap_grant_ref_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_swap_grant_ref_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_swap_grant_ref_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_swap_grant_ref_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_swap_grant_ref_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_swap_grant_ref_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_swap_grant_ref_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_swap_grant_ref_t {
    pub p: *const gnttab_swap_grant_ref_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_swap_grant_ref_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_swap_grant_ref_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_swap_grant_ref_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_swap_grant_ref_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_swap_grant_ref_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_swap_grant_ref_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_swap_grant_ref_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_cache_flush {
    pub a: gnttab_cache_flush__bindgen_ty_1,
    pub offset: u16,
    pub length: u16,
    pub op: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gnttab_cache_flush__bindgen_ty_1 {
    pub dev_bus_addr: u64,
    pub ref_: grant_ref_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_cache_flush__bindgen_ty_1"]
        [::std::mem::size_of::<gnttab_cache_flush__bindgen_ty_1>() - 8usize];
    ["Alignment of gnttab_cache_flush__bindgen_ty_1"]
        [::std::mem::align_of::<gnttab_cache_flush__bindgen_ty_1>() - 8usize];
    ["Offset of field: gnttab_cache_flush__bindgen_ty_1::dev_bus_addr"]
        [::std::mem::offset_of!(gnttab_cache_flush__bindgen_ty_1, dev_bus_addr) - 0usize];
    ["Offset of field: gnttab_cache_flush__bindgen_ty_1::ref_"]
        [::std::mem::offset_of!(gnttab_cache_flush__bindgen_ty_1, ref_) - 0usize];
};
impl Default for gnttab_cache_flush__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gnttab_cache_flush"][::std::mem::size_of::<gnttab_cache_flush>() - 16usize];
    ["Alignment of gnttab_cache_flush"][::std::mem::align_of::<gnttab_cache_flush>() - 8usize];
    ["Offset of field: gnttab_cache_flush::a"]
        [::std::mem::offset_of!(gnttab_cache_flush, a) - 0usize];
    ["Offset of field: gnttab_cache_flush::offset"]
        [::std::mem::offset_of!(gnttab_cache_flush, offset) - 8usize];
    ["Offset of field: gnttab_cache_flush::length"]
        [::std::mem::offset_of!(gnttab_cache_flush, length) - 10usize];
    ["Offset of field: gnttab_cache_flush::op"]
        [::std::mem::offset_of!(gnttab_cache_flush, op) - 12usize];
};
impl Default for gnttab_cache_flush {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type gnttab_cache_flush_t = gnttab_cache_flush;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_gnttab_cache_flush_t {
    pub p: *mut gnttab_cache_flush_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_gnttab_cache_flush_t"]
        [::std::mem::size_of::<__guest_handle_gnttab_cache_flush_t>() - 8usize];
    ["Alignment of __guest_handle_gnttab_cache_flush_t"]
        [::std::mem::align_of::<__guest_handle_gnttab_cache_flush_t>() - 8usize];
    ["Offset of field: __guest_handle_gnttab_cache_flush_t::p"]
        [::std::mem::offset_of!(__guest_handle_gnttab_cache_flush_t, p) - 0usize];
};
impl Default for __guest_handle_gnttab_cache_flush_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_gnttab_cache_flush_t {
    pub p: *const gnttab_cache_flush_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_gnttab_cache_flush_t"]
        [::std::mem::size_of::<__guest_handle_const_gnttab_cache_flush_t>() - 8usize];
    ["Alignment of __guest_handle_const_gnttab_cache_flush_t"]
        [::std::mem::align_of::<__guest_handle_const_gnttab_cache_flush_t>() - 8usize];
    ["Offset of field: __guest_handle_const_gnttab_cache_flush_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_gnttab_cache_flush_t, p) - 0usize];
};
impl Default for __guest_handle_const_gnttab_cache_flush_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_save_descriptor {
    pub typecode: u16,
    pub instance: u16,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_save_descriptor"][::std::mem::size_of::<hvm_save_descriptor>() - 8usize];
    ["Alignment of hvm_save_descriptor"][::std::mem::align_of::<hvm_save_descriptor>() - 4usize];
    ["Offset of field: hvm_save_descriptor::typecode"]
        [::std::mem::offset_of!(hvm_save_descriptor, typecode) - 0usize];
    ["Offset of field: hvm_save_descriptor::instance"]
        [::std::mem::offset_of!(hvm_save_descriptor, instance) - 2usize];
    ["Offset of field: hvm_save_descriptor::length"]
        [::std::mem::offset_of!(hvm_save_descriptor, length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_save_end {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_save_end"][::std::mem::size_of::<hvm_save_end>() - 0usize];
    ["Alignment of hvm_save_end"][::std::mem::align_of::<hvm_save_end>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct __HVM_SAVE_TYPE_END {
    pub t: hvm_save_end,
    pub c: __IncompleteArrayField<::std::os::raw::c_char>,
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_END"][::std::mem::size_of::<__HVM_SAVE_TYPE_END>() - 1usize];
    ["Alignment of __HVM_SAVE_TYPE_END"][::std::mem::align_of::<__HVM_SAVE_TYPE_END>() - 1usize];
    ["Offset of field: __HVM_SAVE_TYPE_END::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_END, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_END::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_END, c) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_END::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_END, cpt) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_save_header {
    pub magic: u32,
    pub version: u32,
    pub changeset: u64,
    pub cpuid: u32,
    pub gtsc_khz: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_save_header"][::std::mem::size_of::<hvm_save_header>() - 24usize];
    ["Alignment of hvm_save_header"][::std::mem::align_of::<hvm_save_header>() - 8usize];
    ["Offset of field: hvm_save_header::magic"]
        [::std::mem::offset_of!(hvm_save_header, magic) - 0usize];
    ["Offset of field: hvm_save_header::version"]
        [::std::mem::offset_of!(hvm_save_header, version) - 4usize];
    ["Offset of field: hvm_save_header::changeset"]
        [::std::mem::offset_of!(hvm_save_header, changeset) - 8usize];
    ["Offset of field: hvm_save_header::cpuid"]
        [::std::mem::offset_of!(hvm_save_header, cpuid) - 16usize];
    ["Offset of field: hvm_save_header::gtsc_khz"]
        [::std::mem::offset_of!(hvm_save_header, gtsc_khz) - 20usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_HEADER {
    pub t: hvm_save_header,
    pub c: [::std::os::raw::c_char; 1usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_HEADER"][::std::mem::size_of::<__HVM_SAVE_TYPE_HEADER>() - 32usize];
    ["Alignment of __HVM_SAVE_TYPE_HEADER"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_HEADER>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_HEADER::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_HEADER, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_HEADER::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_HEADER, c) - 24usize];
    ["Offset of field: __HVM_SAVE_TYPE_HEADER::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_HEADER, cpt) - 25usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_cpu {
    pub fpu_regs: [u8; 512usize],
    pub rax: u64,
    pub rbx: u64,
    pub rcx: u64,
    pub rdx: u64,
    pub rbp: u64,
    pub rsi: u64,
    pub rdi: u64,
    pub rsp: u64,
    pub r8: u64,
    pub r9: u64,
    pub r10: u64,
    pub r11: u64,
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rip: u64,
    pub rflags: u64,
    pub cr0: u64,
    pub cr2: u64,
    pub cr3: u64,
    pub cr4: u64,
    pub dr0: u64,
    pub dr1: u64,
    pub dr2: u64,
    pub dr3: u64,
    pub dr6: u64,
    pub dr7: u64,
    pub cs_sel: u32,
    pub ds_sel: u32,
    pub es_sel: u32,
    pub fs_sel: u32,
    pub gs_sel: u32,
    pub ss_sel: u32,
    pub tr_sel: u32,
    pub ldtr_sel: u32,
    pub cs_limit: u32,
    pub ds_limit: u32,
    pub es_limit: u32,
    pub fs_limit: u32,
    pub gs_limit: u32,
    pub ss_limit: u32,
    pub tr_limit: u32,
    pub ldtr_limit: u32,
    pub idtr_limit: u32,
    pub gdtr_limit: u32,
    pub cs_base: u64,
    pub ds_base: u64,
    pub es_base: u64,
    pub fs_base: u64,
    pub gs_base: u64,
    pub ss_base: u64,
    pub tr_base: u64,
    pub ldtr_base: u64,
    pub idtr_base: u64,
    pub gdtr_base: u64,
    pub cs_arbytes: u32,
    pub ds_arbytes: u32,
    pub es_arbytes: u32,
    pub fs_arbytes: u32,
    pub gs_arbytes: u32,
    pub ss_arbytes: u32,
    pub tr_arbytes: u32,
    pub ldtr_arbytes: u32,
    pub sysenter_cs: u64,
    pub sysenter_esp: u64,
    pub sysenter_eip: u64,
    pub shadow_gs: u64,
    pub msr_flags: u64,
    pub msr_lstar: u64,
    pub msr_star: u64,
    pub msr_cstar: u64,
    pub msr_syscall_mask: u64,
    pub msr_efer: u64,
    pub msr_tsc_aux: u64,
    pub tsc: u64,
    pub __bindgen_anon_1: hvm_hw_cpu__bindgen_ty_1,
    pub error_code: u32,
    pub flags: u32,
    pub pad0: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hvm_hw_cpu__bindgen_ty_1 {
    pub pending_event: u32,
    pub __bindgen_anon_1: hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl hvm_hw_cpu__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn pending_vector(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_pending_vector(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pending_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_error_valid(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pending_error_valid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 19u8) as u32) }
    }
    #[inline]
    pub fn set_pending_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_valid(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pending_valid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pending_vector: u8,
        pending_type: u8,
        pending_error_valid: u8,
        pending_reserved: u32,
        pending_valid: u8,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let pending_vector: u8 = unsafe { ::std::mem::transmute(pending_vector) };
            pending_vector as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let pending_type: u8 = unsafe { ::std::mem::transmute(pending_type) };
            pending_type as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let pending_error_valid: u8 = unsafe { ::std::mem::transmute(pending_error_valid) };
            pending_error_valid as u64
        });
        __bindgen_bitfield_unit.set(12usize, 19u8, {
            let pending_reserved: u32 = unsafe { ::std::mem::transmute(pending_reserved) };
            pending_reserved as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let pending_valid: u8 = unsafe { ::std::mem::transmute(pending_valid) };
            pending_valid as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu__bindgen_ty_1"]
        [::std::mem::size_of::<hvm_hw_cpu__bindgen_ty_1>() - 4usize];
    ["Alignment of hvm_hw_cpu__bindgen_ty_1"]
        [::std::mem::align_of::<hvm_hw_cpu__bindgen_ty_1>() - 4usize];
    ["Offset of field: hvm_hw_cpu__bindgen_ty_1::pending_event"]
        [::std::mem::offset_of!(hvm_hw_cpu__bindgen_ty_1, pending_event) - 0usize];
};
impl Default for hvm_hw_cpu__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu"][::std::mem::size_of::<hvm_hw_cpu>() - 1032usize];
    ["Alignment of hvm_hw_cpu"][::std::mem::align_of::<hvm_hw_cpu>() - 8usize];
    ["Offset of field: hvm_hw_cpu::fpu_regs"]
        [::std::mem::offset_of!(hvm_hw_cpu, fpu_regs) - 0usize];
    ["Offset of field: hvm_hw_cpu::rax"][::std::mem::offset_of!(hvm_hw_cpu, rax) - 512usize];
    ["Offset of field: hvm_hw_cpu::rbx"][::std::mem::offset_of!(hvm_hw_cpu, rbx) - 520usize];
    ["Offset of field: hvm_hw_cpu::rcx"][::std::mem::offset_of!(hvm_hw_cpu, rcx) - 528usize];
    ["Offset of field: hvm_hw_cpu::rdx"][::std::mem::offset_of!(hvm_hw_cpu, rdx) - 536usize];
    ["Offset of field: hvm_hw_cpu::rbp"][::std::mem::offset_of!(hvm_hw_cpu, rbp) - 544usize];
    ["Offset of field: hvm_hw_cpu::rsi"][::std::mem::offset_of!(hvm_hw_cpu, rsi) - 552usize];
    ["Offset of field: hvm_hw_cpu::rdi"][::std::mem::offset_of!(hvm_hw_cpu, rdi) - 560usize];
    ["Offset of field: hvm_hw_cpu::rsp"][::std::mem::offset_of!(hvm_hw_cpu, rsp) - 568usize];
    ["Offset of field: hvm_hw_cpu::r8"][::std::mem::offset_of!(hvm_hw_cpu, r8) - 576usize];
    ["Offset of field: hvm_hw_cpu::r9"][::std::mem::offset_of!(hvm_hw_cpu, r9) - 584usize];
    ["Offset of field: hvm_hw_cpu::r10"][::std::mem::offset_of!(hvm_hw_cpu, r10) - 592usize];
    ["Offset of field: hvm_hw_cpu::r11"][::std::mem::offset_of!(hvm_hw_cpu, r11) - 600usize];
    ["Offset of field: hvm_hw_cpu::r12"][::std::mem::offset_of!(hvm_hw_cpu, r12) - 608usize];
    ["Offset of field: hvm_hw_cpu::r13"][::std::mem::offset_of!(hvm_hw_cpu, r13) - 616usize];
    ["Offset of field: hvm_hw_cpu::r14"][::std::mem::offset_of!(hvm_hw_cpu, r14) - 624usize];
    ["Offset of field: hvm_hw_cpu::r15"][::std::mem::offset_of!(hvm_hw_cpu, r15) - 632usize];
    ["Offset of field: hvm_hw_cpu::rip"][::std::mem::offset_of!(hvm_hw_cpu, rip) - 640usize];
    ["Offset of field: hvm_hw_cpu::rflags"][::std::mem::offset_of!(hvm_hw_cpu, rflags) - 648usize];
    ["Offset of field: hvm_hw_cpu::cr0"][::std::mem::offset_of!(hvm_hw_cpu, cr0) - 656usize];
    ["Offset of field: hvm_hw_cpu::cr2"][::std::mem::offset_of!(hvm_hw_cpu, cr2) - 664usize];
    ["Offset of field: hvm_hw_cpu::cr3"][::std::mem::offset_of!(hvm_hw_cpu, cr3) - 672usize];
    ["Offset of field: hvm_hw_cpu::cr4"][::std::mem::offset_of!(hvm_hw_cpu, cr4) - 680usize];
    ["Offset of field: hvm_hw_cpu::dr0"][::std::mem::offset_of!(hvm_hw_cpu, dr0) - 688usize];
    ["Offset of field: hvm_hw_cpu::dr1"][::std::mem::offset_of!(hvm_hw_cpu, dr1) - 696usize];
    ["Offset of field: hvm_hw_cpu::dr2"][::std::mem::offset_of!(hvm_hw_cpu, dr2) - 704usize];
    ["Offset of field: hvm_hw_cpu::dr3"][::std::mem::offset_of!(hvm_hw_cpu, dr3) - 712usize];
    ["Offset of field: hvm_hw_cpu::dr6"][::std::mem::offset_of!(hvm_hw_cpu, dr6) - 720usize];
    ["Offset of field: hvm_hw_cpu::dr7"][::std::mem::offset_of!(hvm_hw_cpu, dr7) - 728usize];
    ["Offset of field: hvm_hw_cpu::cs_sel"][::std::mem::offset_of!(hvm_hw_cpu, cs_sel) - 736usize];
    ["Offset of field: hvm_hw_cpu::ds_sel"][::std::mem::offset_of!(hvm_hw_cpu, ds_sel) - 740usize];
    ["Offset of field: hvm_hw_cpu::es_sel"][::std::mem::offset_of!(hvm_hw_cpu, es_sel) - 744usize];
    ["Offset of field: hvm_hw_cpu::fs_sel"][::std::mem::offset_of!(hvm_hw_cpu, fs_sel) - 748usize];
    ["Offset of field: hvm_hw_cpu::gs_sel"][::std::mem::offset_of!(hvm_hw_cpu, gs_sel) - 752usize];
    ["Offset of field: hvm_hw_cpu::ss_sel"][::std::mem::offset_of!(hvm_hw_cpu, ss_sel) - 756usize];
    ["Offset of field: hvm_hw_cpu::tr_sel"][::std::mem::offset_of!(hvm_hw_cpu, tr_sel) - 760usize];
    ["Offset of field: hvm_hw_cpu::ldtr_sel"]
        [::std::mem::offset_of!(hvm_hw_cpu, ldtr_sel) - 764usize];
    ["Offset of field: hvm_hw_cpu::cs_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, cs_limit) - 768usize];
    ["Offset of field: hvm_hw_cpu::ds_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, ds_limit) - 772usize];
    ["Offset of field: hvm_hw_cpu::es_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, es_limit) - 776usize];
    ["Offset of field: hvm_hw_cpu::fs_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, fs_limit) - 780usize];
    ["Offset of field: hvm_hw_cpu::gs_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, gs_limit) - 784usize];
    ["Offset of field: hvm_hw_cpu::ss_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, ss_limit) - 788usize];
    ["Offset of field: hvm_hw_cpu::tr_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, tr_limit) - 792usize];
    ["Offset of field: hvm_hw_cpu::ldtr_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, ldtr_limit) - 796usize];
    ["Offset of field: hvm_hw_cpu::idtr_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, idtr_limit) - 800usize];
    ["Offset of field: hvm_hw_cpu::gdtr_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu, gdtr_limit) - 804usize];
    ["Offset of field: hvm_hw_cpu::cs_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, cs_base) - 808usize];
    ["Offset of field: hvm_hw_cpu::ds_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, ds_base) - 816usize];
    ["Offset of field: hvm_hw_cpu::es_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, es_base) - 824usize];
    ["Offset of field: hvm_hw_cpu::fs_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, fs_base) - 832usize];
    ["Offset of field: hvm_hw_cpu::gs_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, gs_base) - 840usize];
    ["Offset of field: hvm_hw_cpu::ss_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, ss_base) - 848usize];
    ["Offset of field: hvm_hw_cpu::tr_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, tr_base) - 856usize];
    ["Offset of field: hvm_hw_cpu::ldtr_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, ldtr_base) - 864usize];
    ["Offset of field: hvm_hw_cpu::idtr_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, idtr_base) - 872usize];
    ["Offset of field: hvm_hw_cpu::gdtr_base"]
        [::std::mem::offset_of!(hvm_hw_cpu, gdtr_base) - 880usize];
    ["Offset of field: hvm_hw_cpu::cs_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu, cs_arbytes) - 888usize];
    ["Offset of field: hvm_hw_cpu::ds_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu, ds_arbytes) - 892usize];
    ["Offset of field: hvm_hw_cpu::es_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu, es_arbytes) - 896usize];
    ["Offset of field: hvm_hw_cpu::fs_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu, fs_arbytes) - 900usize];
    ["Offset of field: hvm_hw_cpu::gs_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu, gs_arbytes) - 904usize];
    ["Offset of field: hvm_hw_cpu::ss_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu, ss_arbytes) - 908usize];
    ["Offset of field: hvm_hw_cpu::tr_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu, tr_arbytes) - 912usize];
    ["Offset of field: hvm_hw_cpu::ldtr_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu, ldtr_arbytes) - 916usize];
    ["Offset of field: hvm_hw_cpu::sysenter_cs"]
        [::std::mem::offset_of!(hvm_hw_cpu, sysenter_cs) - 920usize];
    ["Offset of field: hvm_hw_cpu::sysenter_esp"]
        [::std::mem::offset_of!(hvm_hw_cpu, sysenter_esp) - 928usize];
    ["Offset of field: hvm_hw_cpu::sysenter_eip"]
        [::std::mem::offset_of!(hvm_hw_cpu, sysenter_eip) - 936usize];
    ["Offset of field: hvm_hw_cpu::shadow_gs"]
        [::std::mem::offset_of!(hvm_hw_cpu, shadow_gs) - 944usize];
    ["Offset of field: hvm_hw_cpu::msr_flags"]
        [::std::mem::offset_of!(hvm_hw_cpu, msr_flags) - 952usize];
    ["Offset of field: hvm_hw_cpu::msr_lstar"]
        [::std::mem::offset_of!(hvm_hw_cpu, msr_lstar) - 960usize];
    ["Offset of field: hvm_hw_cpu::msr_star"]
        [::std::mem::offset_of!(hvm_hw_cpu, msr_star) - 968usize];
    ["Offset of field: hvm_hw_cpu::msr_cstar"]
        [::std::mem::offset_of!(hvm_hw_cpu, msr_cstar) - 976usize];
    ["Offset of field: hvm_hw_cpu::msr_syscall_mask"]
        [::std::mem::offset_of!(hvm_hw_cpu, msr_syscall_mask) - 984usize];
    ["Offset of field: hvm_hw_cpu::msr_efer"]
        [::std::mem::offset_of!(hvm_hw_cpu, msr_efer) - 992usize];
    ["Offset of field: hvm_hw_cpu::msr_tsc_aux"]
        [::std::mem::offset_of!(hvm_hw_cpu, msr_tsc_aux) - 1000usize];
    ["Offset of field: hvm_hw_cpu::tsc"][::std::mem::offset_of!(hvm_hw_cpu, tsc) - 1008usize];
    ["Offset of field: hvm_hw_cpu::error_code"]
        [::std::mem::offset_of!(hvm_hw_cpu, error_code) - 1020usize];
    ["Offset of field: hvm_hw_cpu::flags"][::std::mem::offset_of!(hvm_hw_cpu, flags) - 1024usize];
    ["Offset of field: hvm_hw_cpu::pad0"][::std::mem::offset_of!(hvm_hw_cpu, pad0) - 1028usize];
};
impl Default for hvm_hw_cpu {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_cpu_compat {
    pub fpu_regs: [u8; 512usize],
    pub rax: u64,
    pub rbx: u64,
    pub rcx: u64,
    pub rdx: u64,
    pub rbp: u64,
    pub rsi: u64,
    pub rdi: u64,
    pub rsp: u64,
    pub r8: u64,
    pub r9: u64,
    pub r10: u64,
    pub r11: u64,
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rip: u64,
    pub rflags: u64,
    pub cr0: u64,
    pub cr2: u64,
    pub cr3: u64,
    pub cr4: u64,
    pub dr0: u64,
    pub dr1: u64,
    pub dr2: u64,
    pub dr3: u64,
    pub dr6: u64,
    pub dr7: u64,
    pub cs_sel: u32,
    pub ds_sel: u32,
    pub es_sel: u32,
    pub fs_sel: u32,
    pub gs_sel: u32,
    pub ss_sel: u32,
    pub tr_sel: u32,
    pub ldtr_sel: u32,
    pub cs_limit: u32,
    pub ds_limit: u32,
    pub es_limit: u32,
    pub fs_limit: u32,
    pub gs_limit: u32,
    pub ss_limit: u32,
    pub tr_limit: u32,
    pub ldtr_limit: u32,
    pub idtr_limit: u32,
    pub gdtr_limit: u32,
    pub cs_base: u64,
    pub ds_base: u64,
    pub es_base: u64,
    pub fs_base: u64,
    pub gs_base: u64,
    pub ss_base: u64,
    pub tr_base: u64,
    pub ldtr_base: u64,
    pub idtr_base: u64,
    pub gdtr_base: u64,
    pub cs_arbytes: u32,
    pub ds_arbytes: u32,
    pub es_arbytes: u32,
    pub fs_arbytes: u32,
    pub gs_arbytes: u32,
    pub ss_arbytes: u32,
    pub tr_arbytes: u32,
    pub ldtr_arbytes: u32,
    pub sysenter_cs: u64,
    pub sysenter_esp: u64,
    pub sysenter_eip: u64,
    pub shadow_gs: u64,
    pub msr_flags: u64,
    pub msr_lstar: u64,
    pub msr_star: u64,
    pub msr_cstar: u64,
    pub msr_syscall_mask: u64,
    pub msr_efer: u64,
    pub tsc: u64,
    pub __bindgen_anon_1: hvm_hw_cpu_compat__bindgen_ty_1,
    pub error_code: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hvm_hw_cpu_compat__bindgen_ty_1 {
    pub pending_event: u32,
    pub __bindgen_anon_1: hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl hvm_hw_cpu_compat__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn pending_vector(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_pending_vector(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_type(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_pending_type(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_error_valid(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pending_error_valid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 19u8) as u32) }
    }
    #[inline]
    pub fn set_pending_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn pending_valid(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pending_valid(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pending_vector: u8,
        pending_type: u8,
        pending_error_valid: u8,
        pending_reserved: u32,
        pending_valid: u8,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let pending_vector: u8 = unsafe { ::std::mem::transmute(pending_vector) };
            pending_vector as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let pending_type: u8 = unsafe { ::std::mem::transmute(pending_type) };
            pending_type as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let pending_error_valid: u8 = unsafe { ::std::mem::transmute(pending_error_valid) };
            pending_error_valid as u64
        });
        __bindgen_bitfield_unit.set(12usize, 19u8, {
            let pending_reserved: u32 = unsafe { ::std::mem::transmute(pending_reserved) };
            pending_reserved as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let pending_valid: u8 = unsafe { ::std::mem::transmute(pending_valid) };
            pending_valid as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu_compat__bindgen_ty_1"]
        [::std::mem::size_of::<hvm_hw_cpu_compat__bindgen_ty_1>() - 4usize];
    ["Alignment of hvm_hw_cpu_compat__bindgen_ty_1"]
        [::std::mem::align_of::<hvm_hw_cpu_compat__bindgen_ty_1>() - 4usize];
    ["Offset of field: hvm_hw_cpu_compat__bindgen_ty_1::pending_event"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat__bindgen_ty_1, pending_event) - 0usize];
};
impl Default for hvm_hw_cpu_compat__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu_compat"][::std::mem::size_of::<hvm_hw_cpu_compat>() - 1016usize];
    ["Alignment of hvm_hw_cpu_compat"][::std::mem::align_of::<hvm_hw_cpu_compat>() - 8usize];
    ["Offset of field: hvm_hw_cpu_compat::fpu_regs"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, fpu_regs) - 0usize];
    ["Offset of field: hvm_hw_cpu_compat::rax"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rax) - 512usize];
    ["Offset of field: hvm_hw_cpu_compat::rbx"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rbx) - 520usize];
    ["Offset of field: hvm_hw_cpu_compat::rcx"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rcx) - 528usize];
    ["Offset of field: hvm_hw_cpu_compat::rdx"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rdx) - 536usize];
    ["Offset of field: hvm_hw_cpu_compat::rbp"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rbp) - 544usize];
    ["Offset of field: hvm_hw_cpu_compat::rsi"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rsi) - 552usize];
    ["Offset of field: hvm_hw_cpu_compat::rdi"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rdi) - 560usize];
    ["Offset of field: hvm_hw_cpu_compat::rsp"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rsp) - 568usize];
    ["Offset of field: hvm_hw_cpu_compat::r8"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, r8) - 576usize];
    ["Offset of field: hvm_hw_cpu_compat::r9"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, r9) - 584usize];
    ["Offset of field: hvm_hw_cpu_compat::r10"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, r10) - 592usize];
    ["Offset of field: hvm_hw_cpu_compat::r11"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, r11) - 600usize];
    ["Offset of field: hvm_hw_cpu_compat::r12"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, r12) - 608usize];
    ["Offset of field: hvm_hw_cpu_compat::r13"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, r13) - 616usize];
    ["Offset of field: hvm_hw_cpu_compat::r14"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, r14) - 624usize];
    ["Offset of field: hvm_hw_cpu_compat::r15"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, r15) - 632usize];
    ["Offset of field: hvm_hw_cpu_compat::rip"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rip) - 640usize];
    ["Offset of field: hvm_hw_cpu_compat::rflags"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, rflags) - 648usize];
    ["Offset of field: hvm_hw_cpu_compat::cr0"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, cr0) - 656usize];
    ["Offset of field: hvm_hw_cpu_compat::cr2"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, cr2) - 664usize];
    ["Offset of field: hvm_hw_cpu_compat::cr3"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, cr3) - 672usize];
    ["Offset of field: hvm_hw_cpu_compat::cr4"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, cr4) - 680usize];
    ["Offset of field: hvm_hw_cpu_compat::dr0"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, dr0) - 688usize];
    ["Offset of field: hvm_hw_cpu_compat::dr1"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, dr1) - 696usize];
    ["Offset of field: hvm_hw_cpu_compat::dr2"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, dr2) - 704usize];
    ["Offset of field: hvm_hw_cpu_compat::dr3"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, dr3) - 712usize];
    ["Offset of field: hvm_hw_cpu_compat::dr6"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, dr6) - 720usize];
    ["Offset of field: hvm_hw_cpu_compat::dr7"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, dr7) - 728usize];
    ["Offset of field: hvm_hw_cpu_compat::cs_sel"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, cs_sel) - 736usize];
    ["Offset of field: hvm_hw_cpu_compat::ds_sel"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ds_sel) - 740usize];
    ["Offset of field: hvm_hw_cpu_compat::es_sel"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, es_sel) - 744usize];
    ["Offset of field: hvm_hw_cpu_compat::fs_sel"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, fs_sel) - 748usize];
    ["Offset of field: hvm_hw_cpu_compat::gs_sel"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, gs_sel) - 752usize];
    ["Offset of field: hvm_hw_cpu_compat::ss_sel"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ss_sel) - 756usize];
    ["Offset of field: hvm_hw_cpu_compat::tr_sel"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, tr_sel) - 760usize];
    ["Offset of field: hvm_hw_cpu_compat::ldtr_sel"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ldtr_sel) - 764usize];
    ["Offset of field: hvm_hw_cpu_compat::cs_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, cs_limit) - 768usize];
    ["Offset of field: hvm_hw_cpu_compat::ds_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ds_limit) - 772usize];
    ["Offset of field: hvm_hw_cpu_compat::es_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, es_limit) - 776usize];
    ["Offset of field: hvm_hw_cpu_compat::fs_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, fs_limit) - 780usize];
    ["Offset of field: hvm_hw_cpu_compat::gs_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, gs_limit) - 784usize];
    ["Offset of field: hvm_hw_cpu_compat::ss_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ss_limit) - 788usize];
    ["Offset of field: hvm_hw_cpu_compat::tr_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, tr_limit) - 792usize];
    ["Offset of field: hvm_hw_cpu_compat::ldtr_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ldtr_limit) - 796usize];
    ["Offset of field: hvm_hw_cpu_compat::idtr_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, idtr_limit) - 800usize];
    ["Offset of field: hvm_hw_cpu_compat::gdtr_limit"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, gdtr_limit) - 804usize];
    ["Offset of field: hvm_hw_cpu_compat::cs_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, cs_base) - 808usize];
    ["Offset of field: hvm_hw_cpu_compat::ds_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ds_base) - 816usize];
    ["Offset of field: hvm_hw_cpu_compat::es_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, es_base) - 824usize];
    ["Offset of field: hvm_hw_cpu_compat::fs_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, fs_base) - 832usize];
    ["Offset of field: hvm_hw_cpu_compat::gs_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, gs_base) - 840usize];
    ["Offset of field: hvm_hw_cpu_compat::ss_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ss_base) - 848usize];
    ["Offset of field: hvm_hw_cpu_compat::tr_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, tr_base) - 856usize];
    ["Offset of field: hvm_hw_cpu_compat::ldtr_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ldtr_base) - 864usize];
    ["Offset of field: hvm_hw_cpu_compat::idtr_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, idtr_base) - 872usize];
    ["Offset of field: hvm_hw_cpu_compat::gdtr_base"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, gdtr_base) - 880usize];
    ["Offset of field: hvm_hw_cpu_compat::cs_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, cs_arbytes) - 888usize];
    ["Offset of field: hvm_hw_cpu_compat::ds_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ds_arbytes) - 892usize];
    ["Offset of field: hvm_hw_cpu_compat::es_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, es_arbytes) - 896usize];
    ["Offset of field: hvm_hw_cpu_compat::fs_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, fs_arbytes) - 900usize];
    ["Offset of field: hvm_hw_cpu_compat::gs_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, gs_arbytes) - 904usize];
    ["Offset of field: hvm_hw_cpu_compat::ss_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ss_arbytes) - 908usize];
    ["Offset of field: hvm_hw_cpu_compat::tr_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, tr_arbytes) - 912usize];
    ["Offset of field: hvm_hw_cpu_compat::ldtr_arbytes"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, ldtr_arbytes) - 916usize];
    ["Offset of field: hvm_hw_cpu_compat::sysenter_cs"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, sysenter_cs) - 920usize];
    ["Offset of field: hvm_hw_cpu_compat::sysenter_esp"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, sysenter_esp) - 928usize];
    ["Offset of field: hvm_hw_cpu_compat::sysenter_eip"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, sysenter_eip) - 936usize];
    ["Offset of field: hvm_hw_cpu_compat::shadow_gs"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, shadow_gs) - 944usize];
    ["Offset of field: hvm_hw_cpu_compat::msr_flags"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, msr_flags) - 952usize];
    ["Offset of field: hvm_hw_cpu_compat::msr_lstar"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, msr_lstar) - 960usize];
    ["Offset of field: hvm_hw_cpu_compat::msr_star"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, msr_star) - 968usize];
    ["Offset of field: hvm_hw_cpu_compat::msr_cstar"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, msr_cstar) - 976usize];
    ["Offset of field: hvm_hw_cpu_compat::msr_syscall_mask"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, msr_syscall_mask) - 984usize];
    ["Offset of field: hvm_hw_cpu_compat::msr_efer"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, msr_efer) - 992usize];
    ["Offset of field: hvm_hw_cpu_compat::tsc"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, tsc) - 1000usize];
    ["Offset of field: hvm_hw_cpu_compat::error_code"]
        [::std::mem::offset_of!(hvm_hw_cpu_compat, error_code) - 1012usize];
};
impl Default for hvm_hw_cpu_compat {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __HVM_SAVE_TYPE_CPU {
    pub t: hvm_hw_cpu,
    pub c: [::std::os::raw::c_char; 2usize],
    pub cpt: [::std::os::raw::c_char; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_CPU"][::std::mem::size_of::<__HVM_SAVE_TYPE_CPU>() - 1040usize];
    ["Alignment of __HVM_SAVE_TYPE_CPU"][::std::mem::align_of::<__HVM_SAVE_TYPE_CPU>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_CPU::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_CPU, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_CPU::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_CPU, c) - 1032usize];
    ["Offset of field: __HVM_SAVE_TYPE_CPU::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_CPU, cpt) - 1034usize];
};
impl Default for __HVM_SAVE_TYPE_CPU {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_vpic {
    pub irr: u8,
    pub imr: u8,
    pub isr: u8,
    pub irq_base: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub elcr: u8,
    pub int_output: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_vpic"][::std::mem::size_of::<hvm_hw_vpic>() - 8usize];
    ["Alignment of hvm_hw_vpic"][::std::mem::align_of::<hvm_hw_vpic>() - 1usize];
    ["Offset of field: hvm_hw_vpic::irr"][::std::mem::offset_of!(hvm_hw_vpic, irr) - 0usize];
    ["Offset of field: hvm_hw_vpic::imr"][::std::mem::offset_of!(hvm_hw_vpic, imr) - 1usize];
    ["Offset of field: hvm_hw_vpic::isr"][::std::mem::offset_of!(hvm_hw_vpic, isr) - 2usize];
    ["Offset of field: hvm_hw_vpic::irq_base"]
        [::std::mem::offset_of!(hvm_hw_vpic, irq_base) - 3usize];
    ["Offset of field: hvm_hw_vpic::elcr"][::std::mem::offset_of!(hvm_hw_vpic, elcr) - 6usize];
    ["Offset of field: hvm_hw_vpic::int_output"]
        [::std::mem::offset_of!(hvm_hw_vpic, int_output) - 7usize];
};
impl hvm_hw_vpic {
    #[inline]
    pub fn init_state(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_init_state(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn priority_add(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_priority_add(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn readsel_isr(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_readsel_isr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn poll(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_poll(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auto_eoi(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_auto_eoi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rotate_on_auto_eoi(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rotate_on_auto_eoi(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn special_fully_nested_mode(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_special_fully_nested_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn special_mask_mode(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_special_mask_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_master(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_is_master(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        init_state: u8,
        priority_add: u8,
        readsel_isr: u8,
        poll: u8,
        auto_eoi: u8,
        rotate_on_auto_eoi: u8,
        special_fully_nested_mode: u8,
        special_mask_mode: u8,
        is_master: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let init_state: u8 = unsafe { ::std::mem::transmute(init_state) };
            init_state as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let priority_add: u8 = unsafe { ::std::mem::transmute(priority_add) };
            priority_add as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let readsel_isr: u8 = unsafe { ::std::mem::transmute(readsel_isr) };
            readsel_isr as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let poll: u8 = unsafe { ::std::mem::transmute(poll) };
            poll as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let auto_eoi: u8 = unsafe { ::std::mem::transmute(auto_eoi) };
            auto_eoi as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let rotate_on_auto_eoi: u8 = unsafe { ::std::mem::transmute(rotate_on_auto_eoi) };
            rotate_on_auto_eoi as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let special_fully_nested_mode: u8 =
                unsafe { ::std::mem::transmute(special_fully_nested_mode) };
            special_fully_nested_mode as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let special_mask_mode: u8 = unsafe { ::std::mem::transmute(special_mask_mode) };
            special_mask_mode as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let is_master: u8 = unsafe { ::std::mem::transmute(is_master) };
            is_master as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PIC {
    pub t: hvm_hw_vpic,
    pub c: [::std::os::raw::c_char; 3usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_PIC"][::std::mem::size_of::<__HVM_SAVE_TYPE_PIC>() - 12usize];
    ["Alignment of __HVM_SAVE_TYPE_PIC"][::std::mem::align_of::<__HVM_SAVE_TYPE_PIC>() - 1usize];
    ["Offset of field: __HVM_SAVE_TYPE_PIC::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PIC, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_PIC::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PIC, c) - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_PIC::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PIC, cpt) - 11usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union vioapic_redir_entry {
    pub bits: u64,
    pub fields: vioapic_redir_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vioapic_redir_entry__bindgen_ty_1 {
    pub vector: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub reserved: [u8; 4usize],
    pub dest_id: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vioapic_redir_entry__bindgen_ty_1"]
        [::std::mem::size_of::<vioapic_redir_entry__bindgen_ty_1>() - 8usize];
    ["Alignment of vioapic_redir_entry__bindgen_ty_1"]
        [::std::mem::align_of::<vioapic_redir_entry__bindgen_ty_1>() - 1usize];
    ["Offset of field: vioapic_redir_entry__bindgen_ty_1::vector"]
        [::std::mem::offset_of!(vioapic_redir_entry__bindgen_ty_1, vector) - 0usize];
    ["Offset of field: vioapic_redir_entry__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(vioapic_redir_entry__bindgen_ty_1, reserved) - 3usize];
    ["Offset of field: vioapic_redir_entry__bindgen_ty_1::dest_id"]
        [::std::mem::offset_of!(vioapic_redir_entry__bindgen_ty_1, dest_id) - 7usize];
};
impl vioapic_redir_entry__bindgen_ty_1 {
    #[inline]
    pub fn delivery_mode(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_delivery_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn dest_mode(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dest_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn delivery_status(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_delivery_status(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn polarity(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_polarity(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn remote_irr(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_remote_irr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trig_mode(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_trig_mode(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mask(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserve(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set_reserve(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        delivery_mode: u8,
        dest_mode: u8,
        delivery_status: u8,
        polarity: u8,
        remote_irr: u8,
        trig_mode: u8,
        mask: u8,
        reserve: u8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let delivery_mode: u8 = unsafe { ::std::mem::transmute(delivery_mode) };
            delivery_mode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let dest_mode: u8 = unsafe { ::std::mem::transmute(dest_mode) };
            dest_mode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let delivery_status: u8 = unsafe { ::std::mem::transmute(delivery_status) };
            delivery_status as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let polarity: u8 = unsafe { ::std::mem::transmute(polarity) };
            polarity as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let remote_irr: u8 = unsafe { ::std::mem::transmute(remote_irr) };
            remote_irr as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let trig_mode: u8 = unsafe { ::std::mem::transmute(trig_mode) };
            trig_mode as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let mask: u8 = unsafe { ::std::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(9usize, 7u8, {
            let reserve: u8 = unsafe { ::std::mem::transmute(reserve) };
            reserve as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vioapic_redir_entry"][::std::mem::size_of::<vioapic_redir_entry>() - 8usize];
    ["Alignment of vioapic_redir_entry"][::std::mem::align_of::<vioapic_redir_entry>() - 8usize];
    ["Offset of field: vioapic_redir_entry::bits"]
        [::std::mem::offset_of!(vioapic_redir_entry, bits) - 0usize];
    ["Offset of field: vioapic_redir_entry::fields"]
        [::std::mem::offset_of!(vioapic_redir_entry, fields) - 0usize];
};
impl Default for vioapic_redir_entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_vioapic {
    pub base_address: u64,
    pub ioregsel: u32,
    pub id: u32,
    pub redirtbl: [vioapic_redir_entry; 48usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_vioapic"][::std::mem::size_of::<hvm_hw_vioapic>() - 400usize];
    ["Alignment of hvm_hw_vioapic"][::std::mem::align_of::<hvm_hw_vioapic>() - 8usize];
    ["Offset of field: hvm_hw_vioapic::base_address"]
        [::std::mem::offset_of!(hvm_hw_vioapic, base_address) - 0usize];
    ["Offset of field: hvm_hw_vioapic::ioregsel"]
        [::std::mem::offset_of!(hvm_hw_vioapic, ioregsel) - 8usize];
    ["Offset of field: hvm_hw_vioapic::id"][::std::mem::offset_of!(hvm_hw_vioapic, id) - 12usize];
    ["Offset of field: hvm_hw_vioapic::redirtbl"]
        [::std::mem::offset_of!(hvm_hw_vioapic, redirtbl) - 16usize];
};
impl Default for hvm_hw_vioapic {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __HVM_SAVE_TYPE_IOAPIC {
    pub t: hvm_hw_vioapic,
    pub c: [::std::os::raw::c_char; 4usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_IOAPIC"][::std::mem::size_of::<__HVM_SAVE_TYPE_IOAPIC>() - 408usize];
    ["Alignment of __HVM_SAVE_TYPE_IOAPIC"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_IOAPIC>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_IOAPIC::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_IOAPIC, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_IOAPIC::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_IOAPIC, c) - 400usize];
    ["Offset of field: __HVM_SAVE_TYPE_IOAPIC::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_IOAPIC, cpt) - 404usize];
};
impl Default for __HVM_SAVE_TYPE_IOAPIC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_lapic {
    pub apic_base_msr: u64,
    pub disabled: u32,
    pub timer_divisor: u32,
    pub tdt_msr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_lapic"][::std::mem::size_of::<hvm_hw_lapic>() - 24usize];
    ["Alignment of hvm_hw_lapic"][::std::mem::align_of::<hvm_hw_lapic>() - 8usize];
    ["Offset of field: hvm_hw_lapic::apic_base_msr"]
        [::std::mem::offset_of!(hvm_hw_lapic, apic_base_msr) - 0usize];
    ["Offset of field: hvm_hw_lapic::disabled"]
        [::std::mem::offset_of!(hvm_hw_lapic, disabled) - 8usize];
    ["Offset of field: hvm_hw_lapic::timer_divisor"]
        [::std::mem::offset_of!(hvm_hw_lapic, timer_divisor) - 12usize];
    ["Offset of field: hvm_hw_lapic::tdt_msr"]
        [::std::mem::offset_of!(hvm_hw_lapic, tdt_msr) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_LAPIC {
    pub t: hvm_hw_lapic,
    pub c: [::std::os::raw::c_char; 5usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_LAPIC"][::std::mem::size_of::<__HVM_SAVE_TYPE_LAPIC>() - 32usize];
    ["Alignment of __HVM_SAVE_TYPE_LAPIC"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_LAPIC>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_LAPIC::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_LAPIC, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_LAPIC::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_LAPIC, c) - 24usize];
    ["Offset of field: __HVM_SAVE_TYPE_LAPIC::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_LAPIC, cpt) - 29usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_lapic_regs {
    pub data: [u8; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_lapic_regs"][::std::mem::size_of::<hvm_hw_lapic_regs>() - 1024usize];
    ["Alignment of hvm_hw_lapic_regs"][::std::mem::align_of::<hvm_hw_lapic_regs>() - 1usize];
    ["Offset of field: hvm_hw_lapic_regs::data"]
        [::std::mem::offset_of!(hvm_hw_lapic_regs, data) - 0usize];
};
impl Default for hvm_hw_lapic_regs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_LAPIC_REGS {
    pub t: hvm_hw_lapic_regs,
    pub c: [::std::os::raw::c_char; 6usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_LAPIC_REGS"]
        [::std::mem::size_of::<__HVM_SAVE_TYPE_LAPIC_REGS>() - 1031usize];
    ["Alignment of __HVM_SAVE_TYPE_LAPIC_REGS"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_LAPIC_REGS>() - 1usize];
    ["Offset of field: __HVM_SAVE_TYPE_LAPIC_REGS::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_LAPIC_REGS, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_LAPIC_REGS::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_LAPIC_REGS, c) - 1024usize];
    ["Offset of field: __HVM_SAVE_TYPE_LAPIC_REGS::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_LAPIC_REGS, cpt) - 1030usize];
};
impl Default for __HVM_SAVE_TYPE_LAPIC_REGS {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_pci_irqs {
    pub __bindgen_anon_1: hvm_hw_pci_irqs__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hvm_hw_pci_irqs__bindgen_ty_1 {
    pub i: [::std::os::raw::c_ulong; 2usize],
    pub pad: [u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_pci_irqs__bindgen_ty_1"]
        [::std::mem::size_of::<hvm_hw_pci_irqs__bindgen_ty_1>() - 16usize];
    ["Alignment of hvm_hw_pci_irqs__bindgen_ty_1"]
        [::std::mem::align_of::<hvm_hw_pci_irqs__bindgen_ty_1>() - 8usize];
    ["Offset of field: hvm_hw_pci_irqs__bindgen_ty_1::i"]
        [::std::mem::offset_of!(hvm_hw_pci_irqs__bindgen_ty_1, i) - 0usize];
    ["Offset of field: hvm_hw_pci_irqs__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(hvm_hw_pci_irqs__bindgen_ty_1, pad) - 0usize];
};
impl Default for hvm_hw_pci_irqs__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_pci_irqs"][::std::mem::size_of::<hvm_hw_pci_irqs>() - 16usize];
    ["Alignment of hvm_hw_pci_irqs"][::std::mem::align_of::<hvm_hw_pci_irqs>() - 8usize];
};
impl Default for hvm_hw_pci_irqs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PCI_IRQ {
    pub t: hvm_hw_pci_irqs,
    pub c: [::std::os::raw::c_char; 7usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_PCI_IRQ"][::std::mem::size_of::<__HVM_SAVE_TYPE_PCI_IRQ>() - 24usize];
    ["Alignment of __HVM_SAVE_TYPE_PCI_IRQ"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_PCI_IRQ>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_PCI_IRQ::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PCI_IRQ, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_PCI_IRQ::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PCI_IRQ, c) - 16usize];
    ["Offset of field: __HVM_SAVE_TYPE_PCI_IRQ::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PCI_IRQ, cpt) - 23usize];
};
impl Default for __HVM_SAVE_TYPE_PCI_IRQ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hvm_hw_isa_irqs {
    pub __bindgen_anon_1: hvm_hw_isa_irqs__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hvm_hw_isa_irqs__bindgen_ty_1 {
    pub i: [::std::os::raw::c_ulong; 1usize],
    pub pad: [u64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_isa_irqs__bindgen_ty_1"]
        [::std::mem::size_of::<hvm_hw_isa_irqs__bindgen_ty_1>() - 8usize];
    ["Alignment of hvm_hw_isa_irqs__bindgen_ty_1"]
        [::std::mem::align_of::<hvm_hw_isa_irqs__bindgen_ty_1>() - 8usize];
    ["Offset of field: hvm_hw_isa_irqs__bindgen_ty_1::i"]
        [::std::mem::offset_of!(hvm_hw_isa_irqs__bindgen_ty_1, i) - 0usize];
    ["Offset of field: hvm_hw_isa_irqs__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(hvm_hw_isa_irqs__bindgen_ty_1, pad) - 0usize];
};
impl Default for hvm_hw_isa_irqs__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_isa_irqs"][::std::mem::size_of::<hvm_hw_isa_irqs>() - 8usize];
    ["Alignment of hvm_hw_isa_irqs"][::std::mem::align_of::<hvm_hw_isa_irqs>() - 8usize];
};
impl Default for hvm_hw_isa_irqs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __HVM_SAVE_TYPE_ISA_IRQ {
    pub t: hvm_hw_isa_irqs,
    pub c: [::std::os::raw::c_char; 8usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_ISA_IRQ"][::std::mem::size_of::<__HVM_SAVE_TYPE_ISA_IRQ>() - 24usize];
    ["Alignment of __HVM_SAVE_TYPE_ISA_IRQ"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_ISA_IRQ>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_ISA_IRQ::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_ISA_IRQ, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_ISA_IRQ::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_ISA_IRQ, c) - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_ISA_IRQ::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_ISA_IRQ, cpt) - 16usize];
};
impl Default for __HVM_SAVE_TYPE_ISA_IRQ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_pci_link {
    pub route: [u8; 4usize],
    pub pad0: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_pci_link"][::std::mem::size_of::<hvm_hw_pci_link>() - 8usize];
    ["Alignment of hvm_hw_pci_link"][::std::mem::align_of::<hvm_hw_pci_link>() - 1usize];
    ["Offset of field: hvm_hw_pci_link::route"]
        [::std::mem::offset_of!(hvm_hw_pci_link, route) - 0usize];
    ["Offset of field: hvm_hw_pci_link::pad0"]
        [::std::mem::offset_of!(hvm_hw_pci_link, pad0) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PCI_LINK {
    pub t: hvm_hw_pci_link,
    pub c: [::std::os::raw::c_char; 9usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_PCI_LINK"]
        [::std::mem::size_of::<__HVM_SAVE_TYPE_PCI_LINK>() - 18usize];
    ["Alignment of __HVM_SAVE_TYPE_PCI_LINK"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_PCI_LINK>() - 1usize];
    ["Offset of field: __HVM_SAVE_TYPE_PCI_LINK::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PCI_LINK, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_PCI_LINK::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PCI_LINK, c) - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_PCI_LINK::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PCI_LINK, cpt) - 17usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_pit {
    pub channels: [hvm_hw_pit_hvm_hw_pit_channel; 3usize],
    pub speaker_data_on: u32,
    pub pad0: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_pit_hvm_hw_pit_channel {
    pub count: u32,
    pub latched_count: u16,
    pub count_latched: u8,
    pub status_latched: u8,
    pub status: u8,
    pub read_state: u8,
    pub write_state: u8,
    pub write_latch: u8,
    pub rw_mode: u8,
    pub mode: u8,
    pub bcd: u8,
    pub gate: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_pit_hvm_hw_pit_channel"]
        [::std::mem::size_of::<hvm_hw_pit_hvm_hw_pit_channel>() - 16usize];
    ["Alignment of hvm_hw_pit_hvm_hw_pit_channel"]
        [::std::mem::align_of::<hvm_hw_pit_hvm_hw_pit_channel>() - 4usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::count"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, count) - 0usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::latched_count"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, latched_count) - 4usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::count_latched"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, count_latched) - 6usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::status_latched"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, status_latched) - 7usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::status"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, status) - 8usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::read_state"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, read_state) - 9usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::write_state"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, write_state) - 10usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::write_latch"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, write_latch) - 11usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::rw_mode"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, rw_mode) - 12usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::mode"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, mode) - 13usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::bcd"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, bcd) - 14usize];
    ["Offset of field: hvm_hw_pit_hvm_hw_pit_channel::gate"]
        [::std::mem::offset_of!(hvm_hw_pit_hvm_hw_pit_channel, gate) - 15usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_pit"][::std::mem::size_of::<hvm_hw_pit>() - 56usize];
    ["Alignment of hvm_hw_pit"][::std::mem::align_of::<hvm_hw_pit>() - 4usize];
    ["Offset of field: hvm_hw_pit::channels"]
        [::std::mem::offset_of!(hvm_hw_pit, channels) - 0usize];
    ["Offset of field: hvm_hw_pit::speaker_data_on"]
        [::std::mem::offset_of!(hvm_hw_pit, speaker_data_on) - 48usize];
    ["Offset of field: hvm_hw_pit::pad0"][::std::mem::offset_of!(hvm_hw_pit, pad0) - 52usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PIT {
    pub t: hvm_hw_pit,
    pub c: [::std::os::raw::c_char; 10usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_PIT"][::std::mem::size_of::<__HVM_SAVE_TYPE_PIT>() - 68usize];
    ["Alignment of __HVM_SAVE_TYPE_PIT"][::std::mem::align_of::<__HVM_SAVE_TYPE_PIT>() - 4usize];
    ["Offset of field: __HVM_SAVE_TYPE_PIT::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PIT, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_PIT::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PIT, c) - 56usize];
    ["Offset of field: __HVM_SAVE_TYPE_PIT::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PIT, cpt) - 66usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_rtc {
    pub cmos_data: [u8; 14usize],
    pub cmos_index: u8,
    pub pad0: u8,
    pub rtc_offset: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_rtc"][::std::mem::size_of::<hvm_hw_rtc>() - 24usize];
    ["Alignment of hvm_hw_rtc"][::std::mem::align_of::<hvm_hw_rtc>() - 8usize];
    ["Offset of field: hvm_hw_rtc::cmos_data"]
        [::std::mem::offset_of!(hvm_hw_rtc, cmos_data) - 0usize];
    ["Offset of field: hvm_hw_rtc::cmos_index"]
        [::std::mem::offset_of!(hvm_hw_rtc, cmos_index) - 14usize];
    ["Offset of field: hvm_hw_rtc::pad0"][::std::mem::offset_of!(hvm_hw_rtc, pad0) - 15usize];
    ["Offset of field: hvm_hw_rtc::rtc_offset"]
        [::std::mem::offset_of!(hvm_hw_rtc, rtc_offset) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_RTC {
    pub t: hvm_hw_rtc,
    pub c: [::std::os::raw::c_char; 11usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_RTC"][::std::mem::size_of::<__HVM_SAVE_TYPE_RTC>() - 40usize];
    ["Alignment of __HVM_SAVE_TYPE_RTC"][::std::mem::align_of::<__HVM_SAVE_TYPE_RTC>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_RTC::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_RTC, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_RTC::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_RTC, c) - 24usize];
    ["Offset of field: __HVM_SAVE_TYPE_RTC::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_RTC, cpt) - 35usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_hpet {
    pub capability: u64,
    pub res0: u64,
    pub config: u64,
    pub res1: u64,
    pub isr: u64,
    pub res2: [u64; 25usize],
    pub mc64: u64,
    pub res3: u64,
    pub timers: [hvm_hw_hpet__bindgen_ty_1; 3usize],
    pub res5: [u64; 84usize],
    pub period: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_hpet__bindgen_ty_1 {
    pub config: u64,
    pub cmp: u64,
    pub fsb: u64,
    pub res4: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_hpet__bindgen_ty_1"]
        [::std::mem::size_of::<hvm_hw_hpet__bindgen_ty_1>() - 32usize];
    ["Alignment of hvm_hw_hpet__bindgen_ty_1"]
        [::std::mem::align_of::<hvm_hw_hpet__bindgen_ty_1>() - 8usize];
    ["Offset of field: hvm_hw_hpet__bindgen_ty_1::config"]
        [::std::mem::offset_of!(hvm_hw_hpet__bindgen_ty_1, config) - 0usize];
    ["Offset of field: hvm_hw_hpet__bindgen_ty_1::cmp"]
        [::std::mem::offset_of!(hvm_hw_hpet__bindgen_ty_1, cmp) - 8usize];
    ["Offset of field: hvm_hw_hpet__bindgen_ty_1::fsb"]
        [::std::mem::offset_of!(hvm_hw_hpet__bindgen_ty_1, fsb) - 16usize];
    ["Offset of field: hvm_hw_hpet__bindgen_ty_1::res4"]
        [::std::mem::offset_of!(hvm_hw_hpet__bindgen_ty_1, res4) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_hpet"][::std::mem::size_of::<hvm_hw_hpet>() - 1048usize];
    ["Alignment of hvm_hw_hpet"][::std::mem::align_of::<hvm_hw_hpet>() - 8usize];
    ["Offset of field: hvm_hw_hpet::capability"]
        [::std::mem::offset_of!(hvm_hw_hpet, capability) - 0usize];
    ["Offset of field: hvm_hw_hpet::res0"][::std::mem::offset_of!(hvm_hw_hpet, res0) - 8usize];
    ["Offset of field: hvm_hw_hpet::config"][::std::mem::offset_of!(hvm_hw_hpet, config) - 16usize];
    ["Offset of field: hvm_hw_hpet::res1"][::std::mem::offset_of!(hvm_hw_hpet, res1) - 24usize];
    ["Offset of field: hvm_hw_hpet::isr"][::std::mem::offset_of!(hvm_hw_hpet, isr) - 32usize];
    ["Offset of field: hvm_hw_hpet::res2"][::std::mem::offset_of!(hvm_hw_hpet, res2) - 40usize];
    ["Offset of field: hvm_hw_hpet::mc64"][::std::mem::offset_of!(hvm_hw_hpet, mc64) - 240usize];
    ["Offset of field: hvm_hw_hpet::res3"][::std::mem::offset_of!(hvm_hw_hpet, res3) - 248usize];
    ["Offset of field: hvm_hw_hpet::timers"]
        [::std::mem::offset_of!(hvm_hw_hpet, timers) - 256usize];
    ["Offset of field: hvm_hw_hpet::res5"][::std::mem::offset_of!(hvm_hw_hpet, res5) - 352usize];
    ["Offset of field: hvm_hw_hpet::period"]
        [::std::mem::offset_of!(hvm_hw_hpet, period) - 1024usize];
};
impl Default for hvm_hw_hpet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_HPET {
    pub t: hvm_hw_hpet,
    pub c: [::std::os::raw::c_char; 12usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_HPET"][::std::mem::size_of::<__HVM_SAVE_TYPE_HPET>() - 1064usize];
    ["Alignment of __HVM_SAVE_TYPE_HPET"][::std::mem::align_of::<__HVM_SAVE_TYPE_HPET>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_HPET::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_HPET, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_HPET::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_HPET, c) - 1048usize];
    ["Offset of field: __HVM_SAVE_TYPE_HPET::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_HPET, cpt) - 1060usize];
};
impl Default for __HVM_SAVE_TYPE_HPET {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_pmtimer {
    pub tmr_val: u32,
    pub pm1a_sts: u16,
    pub pm1a_en: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_pmtimer"][::std::mem::size_of::<hvm_hw_pmtimer>() - 8usize];
    ["Alignment of hvm_hw_pmtimer"][::std::mem::align_of::<hvm_hw_pmtimer>() - 4usize];
    ["Offset of field: hvm_hw_pmtimer::tmr_val"]
        [::std::mem::offset_of!(hvm_hw_pmtimer, tmr_val) - 0usize];
    ["Offset of field: hvm_hw_pmtimer::pm1a_sts"]
        [::std::mem::offset_of!(hvm_hw_pmtimer, pm1a_sts) - 4usize];
    ["Offset of field: hvm_hw_pmtimer::pm1a_en"]
        [::std::mem::offset_of!(hvm_hw_pmtimer, pm1a_en) - 6usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_PMTIMER {
    pub t: hvm_hw_pmtimer,
    pub c: [::std::os::raw::c_char; 13usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_PMTIMER"][::std::mem::size_of::<__HVM_SAVE_TYPE_PMTIMER>() - 24usize];
    ["Alignment of __HVM_SAVE_TYPE_PMTIMER"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_PMTIMER>() - 4usize];
    ["Offset of field: __HVM_SAVE_TYPE_PMTIMER::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PMTIMER, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_PMTIMER::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PMTIMER, c) - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_PMTIMER::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_PMTIMER, cpt) - 21usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_mtrr {
    pub msr_pat_cr: u64,
    pub msr_mtrr_var: [u64; 16usize],
    pub msr_mtrr_fixed: [u64; 11usize],
    pub msr_mtrr_cap: u64,
    pub msr_mtrr_def_type: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_mtrr"][::std::mem::size_of::<hvm_hw_mtrr>() - 240usize];
    ["Alignment of hvm_hw_mtrr"][::std::mem::align_of::<hvm_hw_mtrr>() - 8usize];
    ["Offset of field: hvm_hw_mtrr::msr_pat_cr"]
        [::std::mem::offset_of!(hvm_hw_mtrr, msr_pat_cr) - 0usize];
    ["Offset of field: hvm_hw_mtrr::msr_mtrr_var"]
        [::std::mem::offset_of!(hvm_hw_mtrr, msr_mtrr_var) - 8usize];
    ["Offset of field: hvm_hw_mtrr::msr_mtrr_fixed"]
        [::std::mem::offset_of!(hvm_hw_mtrr, msr_mtrr_fixed) - 136usize];
    ["Offset of field: hvm_hw_mtrr::msr_mtrr_cap"]
        [::std::mem::offset_of!(hvm_hw_mtrr, msr_mtrr_cap) - 224usize];
    ["Offset of field: hvm_hw_mtrr::msr_mtrr_def_type"]
        [::std::mem::offset_of!(hvm_hw_mtrr, msr_mtrr_def_type) - 232usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_MTRR {
    pub t: hvm_hw_mtrr,
    pub c: [::std::os::raw::c_char; 14usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_MTRR"][::std::mem::size_of::<__HVM_SAVE_TYPE_MTRR>() - 256usize];
    ["Alignment of __HVM_SAVE_TYPE_MTRR"][::std::mem::align_of::<__HVM_SAVE_TYPE_MTRR>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_MTRR::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_MTRR, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_MTRR::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_MTRR, c) - 240usize];
    ["Offset of field: __HVM_SAVE_TYPE_MTRR::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_MTRR, cpt) - 254usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_cpu_xsave {
    pub xfeature_mask: u64,
    pub xcr0: u64,
    pub xcr0_accum: u64,
    pub save_area: hvm_hw_cpu_xsave__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_cpu_xsave__bindgen_ty_1 {
    pub fpu_sse: hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1,
    pub xsave_hdr: hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1 {
    pub x: [::std::os::raw::c_char; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1>() - 512usize];
    ["Alignment of hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1::x"]
        [::std::mem::offset_of!(hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1, x) - 0usize];
};
impl Default for hvm_hw_cpu_xsave__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr {
    pub xstate_bv: u64,
    pub xcomp_bv: u64,
    pub reserved: [u64; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr"]
        [::std::mem::size_of::<hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr>() - 64usize];
    ["Alignment of hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr"]
        [::std::mem::align_of::<hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr>() - 8usize];
    ["Offset of field: hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr::xstate_bv"][::std::mem::offset_of!(
        hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr,
        xstate_bv
    ) - 0usize];
    ["Offset of field: hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr::xcomp_bv"][::std::mem::offset_of!(
        hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr,
        xcomp_bv
    ) - 8usize];
    ["Offset of field: hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr::reserved"][::std::mem::offset_of!(
        hvm_hw_cpu_xsave__bindgen_ty_1_hvm_hw_cpu_xsave_hdr,
        reserved
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu_xsave__bindgen_ty_1"]
        [::std::mem::size_of::<hvm_hw_cpu_xsave__bindgen_ty_1>() - 576usize];
    ["Alignment of hvm_hw_cpu_xsave__bindgen_ty_1"]
        [::std::mem::align_of::<hvm_hw_cpu_xsave__bindgen_ty_1>() - 8usize];
    ["Offset of field: hvm_hw_cpu_xsave__bindgen_ty_1::fpu_sse"]
        [::std::mem::offset_of!(hvm_hw_cpu_xsave__bindgen_ty_1, fpu_sse) - 0usize];
    ["Offset of field: hvm_hw_cpu_xsave__bindgen_ty_1::xsave_hdr"]
        [::std::mem::offset_of!(hvm_hw_cpu_xsave__bindgen_ty_1, xsave_hdr) - 512usize];
};
impl Default for hvm_hw_cpu_xsave__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_hw_cpu_xsave"][::std::mem::size_of::<hvm_hw_cpu_xsave>() - 600usize];
    ["Alignment of hvm_hw_cpu_xsave"][::std::mem::align_of::<hvm_hw_cpu_xsave>() - 8usize];
    ["Offset of field: hvm_hw_cpu_xsave::xfeature_mask"]
        [::std::mem::offset_of!(hvm_hw_cpu_xsave, xfeature_mask) - 0usize];
    ["Offset of field: hvm_hw_cpu_xsave::xcr0"]
        [::std::mem::offset_of!(hvm_hw_cpu_xsave, xcr0) - 8usize];
    ["Offset of field: hvm_hw_cpu_xsave::xcr0_accum"]
        [::std::mem::offset_of!(hvm_hw_cpu_xsave, xcr0_accum) - 16usize];
    ["Offset of field: hvm_hw_cpu_xsave::save_area"]
        [::std::mem::offset_of!(hvm_hw_cpu_xsave, save_area) - 24usize];
};
impl Default for hvm_hw_cpu_xsave {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_viridian_domain_context {
    pub hypercall_gpa: u64,
    pub guest_os_id: u64,
    pub time_ref_count: u64,
    pub reference_tsc: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_viridian_domain_context"]
        [::std::mem::size_of::<hvm_viridian_domain_context>() - 32usize];
    ["Alignment of hvm_viridian_domain_context"]
        [::std::mem::align_of::<hvm_viridian_domain_context>() - 8usize];
    ["Offset of field: hvm_viridian_domain_context::hypercall_gpa"]
        [::std::mem::offset_of!(hvm_viridian_domain_context, hypercall_gpa) - 0usize];
    ["Offset of field: hvm_viridian_domain_context::guest_os_id"]
        [::std::mem::offset_of!(hvm_viridian_domain_context, guest_os_id) - 8usize];
    ["Offset of field: hvm_viridian_domain_context::time_ref_count"]
        [::std::mem::offset_of!(hvm_viridian_domain_context, time_ref_count) - 16usize];
    ["Offset of field: hvm_viridian_domain_context::reference_tsc"]
        [::std::mem::offset_of!(hvm_viridian_domain_context, reference_tsc) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_VIRIDIAN_DOMAIN {
    pub t: hvm_viridian_domain_context,
    pub c: [::std::os::raw::c_char; 15usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_VIRIDIAN_DOMAIN"]
        [::std::mem::size_of::<__HVM_SAVE_TYPE_VIRIDIAN_DOMAIN>() - 48usize];
    ["Alignment of __HVM_SAVE_TYPE_VIRIDIAN_DOMAIN"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_VIRIDIAN_DOMAIN>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_VIRIDIAN_DOMAIN::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_VIRIDIAN_DOMAIN, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_VIRIDIAN_DOMAIN::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_VIRIDIAN_DOMAIN, c) - 32usize];
    ["Offset of field: __HVM_SAVE_TYPE_VIRIDIAN_DOMAIN::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_VIRIDIAN_DOMAIN, cpt) - 47usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_viridian_vcpu_context {
    pub vp_assist_msr: u64,
    pub apic_assist_pending: u8,
    pub _pad: [u8; 7usize],
    pub simp_msr: u64,
    pub sint_msr: [u64; 16usize],
    pub stimer_config_msr: [u64; 4usize],
    pub stimer_count_msr: [u64; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_viridian_vcpu_context"]
        [::std::mem::size_of::<hvm_viridian_vcpu_context>() - 216usize];
    ["Alignment of hvm_viridian_vcpu_context"]
        [::std::mem::align_of::<hvm_viridian_vcpu_context>() - 8usize];
    ["Offset of field: hvm_viridian_vcpu_context::vp_assist_msr"]
        [::std::mem::offset_of!(hvm_viridian_vcpu_context, vp_assist_msr) - 0usize];
    ["Offset of field: hvm_viridian_vcpu_context::apic_assist_pending"]
        [::std::mem::offset_of!(hvm_viridian_vcpu_context, apic_assist_pending) - 8usize];
    ["Offset of field: hvm_viridian_vcpu_context::_pad"]
        [::std::mem::offset_of!(hvm_viridian_vcpu_context, _pad) - 9usize];
    ["Offset of field: hvm_viridian_vcpu_context::simp_msr"]
        [::std::mem::offset_of!(hvm_viridian_vcpu_context, simp_msr) - 16usize];
    ["Offset of field: hvm_viridian_vcpu_context::sint_msr"]
        [::std::mem::offset_of!(hvm_viridian_vcpu_context, sint_msr) - 24usize];
    ["Offset of field: hvm_viridian_vcpu_context::stimer_config_msr"]
        [::std::mem::offset_of!(hvm_viridian_vcpu_context, stimer_config_msr) - 152usize];
    ["Offset of field: hvm_viridian_vcpu_context::stimer_count_msr"]
        [::std::mem::offset_of!(hvm_viridian_vcpu_context, stimer_count_msr) - 184usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_VIRIDIAN_VCPU {
    pub t: hvm_viridian_vcpu_context,
    pub c: [::std::os::raw::c_char; 17usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_VIRIDIAN_VCPU"]
        [::std::mem::size_of::<__HVM_SAVE_TYPE_VIRIDIAN_VCPU>() - 240usize];
    ["Alignment of __HVM_SAVE_TYPE_VIRIDIAN_VCPU"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_VIRIDIAN_VCPU>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_VIRIDIAN_VCPU::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_VIRIDIAN_VCPU, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_VIRIDIAN_VCPU::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_VIRIDIAN_VCPU, c) - 216usize];
    ["Offset of field: __HVM_SAVE_TYPE_VIRIDIAN_VCPU::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_VIRIDIAN_VCPU, cpt) - 233usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_vmce_vcpu {
    pub caps: u64,
    pub mci_ctl2_bank0: u64,
    pub mci_ctl2_bank1: u64,
    pub mcg_ext_ctl: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_vmce_vcpu"][::std::mem::size_of::<hvm_vmce_vcpu>() - 32usize];
    ["Alignment of hvm_vmce_vcpu"][::std::mem::align_of::<hvm_vmce_vcpu>() - 8usize];
    ["Offset of field: hvm_vmce_vcpu::caps"][::std::mem::offset_of!(hvm_vmce_vcpu, caps) - 0usize];
    ["Offset of field: hvm_vmce_vcpu::mci_ctl2_bank0"]
        [::std::mem::offset_of!(hvm_vmce_vcpu, mci_ctl2_bank0) - 8usize];
    ["Offset of field: hvm_vmce_vcpu::mci_ctl2_bank1"]
        [::std::mem::offset_of!(hvm_vmce_vcpu, mci_ctl2_bank1) - 16usize];
    ["Offset of field: hvm_vmce_vcpu::mcg_ext_ctl"]
        [::std::mem::offset_of!(hvm_vmce_vcpu, mcg_ext_ctl) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_VMCE_VCPU {
    pub t: hvm_vmce_vcpu,
    pub c: [::std::os::raw::c_char; 18usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_VMCE_VCPU"]
        [::std::mem::size_of::<__HVM_SAVE_TYPE_VMCE_VCPU>() - 56usize];
    ["Alignment of __HVM_SAVE_TYPE_VMCE_VCPU"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_VMCE_VCPU>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_VMCE_VCPU::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_VMCE_VCPU, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_VMCE_VCPU::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_VMCE_VCPU, c) - 32usize];
    ["Offset of field: __HVM_SAVE_TYPE_VMCE_VCPU::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_VMCE_VCPU, cpt) - 50usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_tsc_adjust {
    pub tsc_adjust: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_tsc_adjust"][::std::mem::size_of::<hvm_tsc_adjust>() - 8usize];
    ["Alignment of hvm_tsc_adjust"][::std::mem::align_of::<hvm_tsc_adjust>() - 8usize];
    ["Offset of field: hvm_tsc_adjust::tsc_adjust"]
        [::std::mem::offset_of!(hvm_tsc_adjust, tsc_adjust) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __HVM_SAVE_TYPE_TSC_ADJUST {
    pub t: hvm_tsc_adjust,
    pub c: [::std::os::raw::c_char; 19usize],
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __HVM_SAVE_TYPE_TSC_ADJUST"]
        [::std::mem::size_of::<__HVM_SAVE_TYPE_TSC_ADJUST>() - 32usize];
    ["Alignment of __HVM_SAVE_TYPE_TSC_ADJUST"]
        [::std::mem::align_of::<__HVM_SAVE_TYPE_TSC_ADJUST>() - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_TSC_ADJUST::t"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_TSC_ADJUST, t) - 0usize];
    ["Offset of field: __HVM_SAVE_TYPE_TSC_ADJUST::c"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_TSC_ADJUST, c) - 8usize];
    ["Offset of field: __HVM_SAVE_TYPE_TSC_ADJUST::cpt"]
        [::std::mem::offset_of!(__HVM_SAVE_TYPE_TSC_ADJUST, cpt) - 27usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct hvm_msr {
    pub count: u32,
    pub msr: __IncompleteArrayField<hvm_msr_hvm_one_msr>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct hvm_msr_hvm_one_msr {
    pub index: u32,
    pub _rsvd: u32,
    pub val: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_msr_hvm_one_msr"][::std::mem::size_of::<hvm_msr_hvm_one_msr>() - 16usize];
    ["Alignment of hvm_msr_hvm_one_msr"][::std::mem::align_of::<hvm_msr_hvm_one_msr>() - 8usize];
    ["Offset of field: hvm_msr_hvm_one_msr::index"]
        [::std::mem::offset_of!(hvm_msr_hvm_one_msr, index) - 0usize];
    ["Offset of field: hvm_msr_hvm_one_msr::_rsvd"]
        [::std::mem::offset_of!(hvm_msr_hvm_one_msr, _rsvd) - 4usize];
    ["Offset of field: hvm_msr_hvm_one_msr::val"]
        [::std::mem::offset_of!(hvm_msr_hvm_one_msr, val) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hvm_msr"][::std::mem::size_of::<hvm_msr>() - 8usize];
    ["Alignment of hvm_msr"][::std::mem::align_of::<hvm_msr>() - 8usize];
    ["Offset of field: hvm_msr::count"][::std::mem::offset_of!(hvm_msr, count) - 0usize];
    ["Offset of field: hvm_msr::msr"][::std::mem::offset_of!(hvm_msr, msr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_eoi {
    pub irq: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_eoi"][::std::mem::size_of::<physdev_eoi>() - 4usize];
    ["Alignment of physdev_eoi"][::std::mem::align_of::<physdev_eoi>() - 4usize];
    ["Offset of field: physdev_eoi::irq"][::std::mem::offset_of!(physdev_eoi, irq) - 0usize];
};
pub type physdev_eoi_t = physdev_eoi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_eoi_t {
    pub p: *mut physdev_eoi_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_eoi_t"]
        [::std::mem::size_of::<__guest_handle_physdev_eoi_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_eoi_t"]
        [::std::mem::align_of::<__guest_handle_physdev_eoi_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_eoi_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_eoi_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_eoi_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_eoi_t {
    pub p: *const physdev_eoi_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_eoi_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_eoi_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_eoi_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_eoi_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_eoi_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_eoi_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_eoi_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_pirq_eoi_gmfn {
    pub gmfn: xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_pirq_eoi_gmfn"][::std::mem::size_of::<physdev_pirq_eoi_gmfn>() - 8usize];
    ["Alignment of physdev_pirq_eoi_gmfn"]
        [::std::mem::align_of::<physdev_pirq_eoi_gmfn>() - 8usize];
    ["Offset of field: physdev_pirq_eoi_gmfn::gmfn"]
        [::std::mem::offset_of!(physdev_pirq_eoi_gmfn, gmfn) - 0usize];
};
pub type physdev_pirq_eoi_gmfn_t = physdev_pirq_eoi_gmfn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_pirq_eoi_gmfn_t {
    pub p: *mut physdev_pirq_eoi_gmfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_pirq_eoi_gmfn_t"]
        [::std::mem::size_of::<__guest_handle_physdev_pirq_eoi_gmfn_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_pirq_eoi_gmfn_t"]
        [::std::mem::align_of::<__guest_handle_physdev_pirq_eoi_gmfn_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_pirq_eoi_gmfn_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_pirq_eoi_gmfn_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_pirq_eoi_gmfn_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_pirq_eoi_gmfn_t {
    pub p: *const physdev_pirq_eoi_gmfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_pirq_eoi_gmfn_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_pirq_eoi_gmfn_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_pirq_eoi_gmfn_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_pirq_eoi_gmfn_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_pirq_eoi_gmfn_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_irq_status_query {
    pub irq: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_irq_status_query"]
        [::std::mem::size_of::<physdev_irq_status_query>() - 8usize];
    ["Alignment of physdev_irq_status_query"]
        [::std::mem::align_of::<physdev_irq_status_query>() - 4usize];
    ["Offset of field: physdev_irq_status_query::irq"]
        [::std::mem::offset_of!(physdev_irq_status_query, irq) - 0usize];
    ["Offset of field: physdev_irq_status_query::flags"]
        [::std::mem::offset_of!(physdev_irq_status_query, flags) - 4usize];
};
pub type physdev_irq_status_query_t = physdev_irq_status_query;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_irq_status_query_t {
    pub p: *mut physdev_irq_status_query_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_irq_status_query_t"]
        [::std::mem::size_of::<__guest_handle_physdev_irq_status_query_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_irq_status_query_t"]
        [::std::mem::align_of::<__guest_handle_physdev_irq_status_query_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_irq_status_query_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_irq_status_query_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_irq_status_query_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_irq_status_query_t {
    pub p: *const physdev_irq_status_query_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_irq_status_query_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_irq_status_query_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_irq_status_query_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_irq_status_query_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_irq_status_query_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_irq_status_query_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_irq_status_query_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_set_iopl {
    pub iopl: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_set_iopl"][::std::mem::size_of::<physdev_set_iopl>() - 4usize];
    ["Alignment of physdev_set_iopl"][::std::mem::align_of::<physdev_set_iopl>() - 4usize];
    ["Offset of field: physdev_set_iopl::iopl"]
        [::std::mem::offset_of!(physdev_set_iopl, iopl) - 0usize];
};
pub type physdev_set_iopl_t = physdev_set_iopl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_set_iopl_t {
    pub p: *mut physdev_set_iopl_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_set_iopl_t"]
        [::std::mem::size_of::<__guest_handle_physdev_set_iopl_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_set_iopl_t"]
        [::std::mem::align_of::<__guest_handle_physdev_set_iopl_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_set_iopl_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_set_iopl_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_set_iopl_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_set_iopl_t {
    pub p: *const physdev_set_iopl_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_set_iopl_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_set_iopl_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_set_iopl_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_set_iopl_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_set_iopl_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_set_iopl_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_set_iopl_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_set_iobitmap {
    pub bitmap: __guest_handle_uint8,
    pub nr_ports: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_set_iobitmap"][::std::mem::size_of::<physdev_set_iobitmap>() - 16usize];
    ["Alignment of physdev_set_iobitmap"][::std::mem::align_of::<physdev_set_iobitmap>() - 8usize];
    ["Offset of field: physdev_set_iobitmap::bitmap"]
        [::std::mem::offset_of!(physdev_set_iobitmap, bitmap) - 0usize];
    ["Offset of field: physdev_set_iobitmap::nr_ports"]
        [::std::mem::offset_of!(physdev_set_iobitmap, nr_ports) - 8usize];
};
impl Default for physdev_set_iobitmap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type physdev_set_iobitmap_t = physdev_set_iobitmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_set_iobitmap_t {
    pub p: *mut physdev_set_iobitmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_set_iobitmap_t"]
        [::std::mem::size_of::<__guest_handle_physdev_set_iobitmap_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_set_iobitmap_t"]
        [::std::mem::align_of::<__guest_handle_physdev_set_iobitmap_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_set_iobitmap_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_set_iobitmap_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_set_iobitmap_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_set_iobitmap_t {
    pub p: *const physdev_set_iobitmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_set_iobitmap_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_set_iobitmap_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_set_iobitmap_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_set_iobitmap_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_set_iobitmap_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_set_iobitmap_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_set_iobitmap_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_apic {
    pub apic_physbase: ::std::os::raw::c_ulong,
    pub reg: u32,
    pub value: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_apic"][::std::mem::size_of::<physdev_apic>() - 16usize];
    ["Alignment of physdev_apic"][::std::mem::align_of::<physdev_apic>() - 8usize];
    ["Offset of field: physdev_apic::apic_physbase"]
        [::std::mem::offset_of!(physdev_apic, apic_physbase) - 0usize];
    ["Offset of field: physdev_apic::reg"][::std::mem::offset_of!(physdev_apic, reg) - 8usize];
    ["Offset of field: physdev_apic::value"][::std::mem::offset_of!(physdev_apic, value) - 12usize];
};
pub type physdev_apic_t = physdev_apic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_apic_t {
    pub p: *mut physdev_apic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_apic_t"]
        [::std::mem::size_of::<__guest_handle_physdev_apic_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_apic_t"]
        [::std::mem::align_of::<__guest_handle_physdev_apic_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_apic_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_apic_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_apic_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_apic_t {
    pub p: *const physdev_apic_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_apic_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_apic_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_apic_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_apic_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_apic_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_apic_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_apic_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_irq {
    pub irq: u32,
    pub vector: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_irq"][::std::mem::size_of::<physdev_irq>() - 8usize];
    ["Alignment of physdev_irq"][::std::mem::align_of::<physdev_irq>() - 4usize];
    ["Offset of field: physdev_irq::irq"][::std::mem::offset_of!(physdev_irq, irq) - 0usize];
    ["Offset of field: physdev_irq::vector"][::std::mem::offset_of!(physdev_irq, vector) - 4usize];
};
pub type physdev_irq_t = physdev_irq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_irq_t {
    pub p: *mut physdev_irq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_irq_t"]
        [::std::mem::size_of::<__guest_handle_physdev_irq_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_irq_t"]
        [::std::mem::align_of::<__guest_handle_physdev_irq_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_irq_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_irq_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_irq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_irq_t {
    pub p: *const physdev_irq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_irq_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_irq_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_irq_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_irq_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_irq_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_irq_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_irq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_map_pirq {
    pub domid: domid_t,
    pub type_: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub pirq: ::std::os::raw::c_int,
    pub bus: ::std::os::raw::c_int,
    pub devfn: ::std::os::raw::c_int,
    pub entry_nr: ::std::os::raw::c_int,
    pub table_base: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_map_pirq"][::std::mem::size_of::<physdev_map_pirq>() - 40usize];
    ["Alignment of physdev_map_pirq"][::std::mem::align_of::<physdev_map_pirq>() - 8usize];
    ["Offset of field: physdev_map_pirq::domid"]
        [::std::mem::offset_of!(physdev_map_pirq, domid) - 0usize];
    ["Offset of field: physdev_map_pirq::type_"]
        [::std::mem::offset_of!(physdev_map_pirq, type_) - 4usize];
    ["Offset of field: physdev_map_pirq::index"]
        [::std::mem::offset_of!(physdev_map_pirq, index) - 8usize];
    ["Offset of field: physdev_map_pirq::pirq"]
        [::std::mem::offset_of!(physdev_map_pirq, pirq) - 12usize];
    ["Offset of field: physdev_map_pirq::bus"]
        [::std::mem::offset_of!(physdev_map_pirq, bus) - 16usize];
    ["Offset of field: physdev_map_pirq::devfn"]
        [::std::mem::offset_of!(physdev_map_pirq, devfn) - 20usize];
    ["Offset of field: physdev_map_pirq::entry_nr"]
        [::std::mem::offset_of!(physdev_map_pirq, entry_nr) - 24usize];
    ["Offset of field: physdev_map_pirq::table_base"]
        [::std::mem::offset_of!(physdev_map_pirq, table_base) - 32usize];
};
pub type physdev_map_pirq_t = physdev_map_pirq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_map_pirq_t {
    pub p: *mut physdev_map_pirq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_map_pirq_t"]
        [::std::mem::size_of::<__guest_handle_physdev_map_pirq_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_map_pirq_t"]
        [::std::mem::align_of::<__guest_handle_physdev_map_pirq_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_map_pirq_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_map_pirq_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_map_pirq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_map_pirq_t {
    pub p: *const physdev_map_pirq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_map_pirq_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_map_pirq_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_map_pirq_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_map_pirq_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_map_pirq_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_map_pirq_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_map_pirq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_unmap_pirq {
    pub domid: domid_t,
    pub pirq: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_unmap_pirq"][::std::mem::size_of::<physdev_unmap_pirq>() - 8usize];
    ["Alignment of physdev_unmap_pirq"][::std::mem::align_of::<physdev_unmap_pirq>() - 4usize];
    ["Offset of field: physdev_unmap_pirq::domid"]
        [::std::mem::offset_of!(physdev_unmap_pirq, domid) - 0usize];
    ["Offset of field: physdev_unmap_pirq::pirq"]
        [::std::mem::offset_of!(physdev_unmap_pirq, pirq) - 4usize];
};
pub type physdev_unmap_pirq_t = physdev_unmap_pirq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_unmap_pirq_t {
    pub p: *mut physdev_unmap_pirq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_unmap_pirq_t"]
        [::std::mem::size_of::<__guest_handle_physdev_unmap_pirq_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_unmap_pirq_t"]
        [::std::mem::align_of::<__guest_handle_physdev_unmap_pirq_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_unmap_pirq_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_unmap_pirq_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_unmap_pirq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_unmap_pirq_t {
    pub p: *const physdev_unmap_pirq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_unmap_pirq_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_unmap_pirq_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_unmap_pirq_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_unmap_pirq_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_unmap_pirq_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_unmap_pirq_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_unmap_pirq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_manage_pci {
    pub bus: u8,
    pub devfn: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_manage_pci"][::std::mem::size_of::<physdev_manage_pci>() - 2usize];
    ["Alignment of physdev_manage_pci"][::std::mem::align_of::<physdev_manage_pci>() - 1usize];
    ["Offset of field: physdev_manage_pci::bus"]
        [::std::mem::offset_of!(physdev_manage_pci, bus) - 0usize];
    ["Offset of field: physdev_manage_pci::devfn"]
        [::std::mem::offset_of!(physdev_manage_pci, devfn) - 1usize];
};
pub type physdev_manage_pci_t = physdev_manage_pci;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_manage_pci_t {
    pub p: *mut physdev_manage_pci_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_manage_pci_t"]
        [::std::mem::size_of::<__guest_handle_physdev_manage_pci_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_manage_pci_t"]
        [::std::mem::align_of::<__guest_handle_physdev_manage_pci_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_manage_pci_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_manage_pci_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_manage_pci_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_manage_pci_t {
    pub p: *const physdev_manage_pci_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_manage_pci_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_manage_pci_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_manage_pci_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_manage_pci_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_manage_pci_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_manage_pci_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_manage_pci_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_restore_msi {
    pub bus: u8,
    pub devfn: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_restore_msi"][::std::mem::size_of::<physdev_restore_msi>() - 2usize];
    ["Alignment of physdev_restore_msi"][::std::mem::align_of::<physdev_restore_msi>() - 1usize];
    ["Offset of field: physdev_restore_msi::bus"]
        [::std::mem::offset_of!(physdev_restore_msi, bus) - 0usize];
    ["Offset of field: physdev_restore_msi::devfn"]
        [::std::mem::offset_of!(physdev_restore_msi, devfn) - 1usize];
};
pub type physdev_restore_msi_t = physdev_restore_msi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_restore_msi_t {
    pub p: *mut physdev_restore_msi_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_restore_msi_t"]
        [::std::mem::size_of::<__guest_handle_physdev_restore_msi_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_restore_msi_t"]
        [::std::mem::align_of::<__guest_handle_physdev_restore_msi_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_restore_msi_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_restore_msi_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_restore_msi_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_restore_msi_t {
    pub p: *const physdev_restore_msi_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_restore_msi_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_restore_msi_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_restore_msi_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_restore_msi_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_restore_msi_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_restore_msi_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_restore_msi_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_manage_pci_ext {
    pub bus: u8,
    pub devfn: u8,
    pub is_extfn: u32,
    pub is_virtfn: u32,
    pub physfn: physdev_manage_pci_ext__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_manage_pci_ext__bindgen_ty_1 {
    pub bus: u8,
    pub devfn: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_manage_pci_ext__bindgen_ty_1"]
        [::std::mem::size_of::<physdev_manage_pci_ext__bindgen_ty_1>() - 2usize];
    ["Alignment of physdev_manage_pci_ext__bindgen_ty_1"]
        [::std::mem::align_of::<physdev_manage_pci_ext__bindgen_ty_1>() - 1usize];
    ["Offset of field: physdev_manage_pci_ext__bindgen_ty_1::bus"]
        [::std::mem::offset_of!(physdev_manage_pci_ext__bindgen_ty_1, bus) - 0usize];
    ["Offset of field: physdev_manage_pci_ext__bindgen_ty_1::devfn"]
        [::std::mem::offset_of!(physdev_manage_pci_ext__bindgen_ty_1, devfn) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_manage_pci_ext"][::std::mem::size_of::<physdev_manage_pci_ext>() - 16usize];
    ["Alignment of physdev_manage_pci_ext"]
        [::std::mem::align_of::<physdev_manage_pci_ext>() - 4usize];
    ["Offset of field: physdev_manage_pci_ext::bus"]
        [::std::mem::offset_of!(physdev_manage_pci_ext, bus) - 0usize];
    ["Offset of field: physdev_manage_pci_ext::devfn"]
        [::std::mem::offset_of!(physdev_manage_pci_ext, devfn) - 1usize];
    ["Offset of field: physdev_manage_pci_ext::is_extfn"]
        [::std::mem::offset_of!(physdev_manage_pci_ext, is_extfn) - 4usize];
    ["Offset of field: physdev_manage_pci_ext::is_virtfn"]
        [::std::mem::offset_of!(physdev_manage_pci_ext, is_virtfn) - 8usize];
    ["Offset of field: physdev_manage_pci_ext::physfn"]
        [::std::mem::offset_of!(physdev_manage_pci_ext, physfn) - 12usize];
};
pub type physdev_manage_pci_ext_t = physdev_manage_pci_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_manage_pci_ext_t {
    pub p: *mut physdev_manage_pci_ext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_manage_pci_ext_t"]
        [::std::mem::size_of::<__guest_handle_physdev_manage_pci_ext_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_manage_pci_ext_t"]
        [::std::mem::align_of::<__guest_handle_physdev_manage_pci_ext_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_manage_pci_ext_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_manage_pci_ext_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_manage_pci_ext_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_manage_pci_ext_t {
    pub p: *const physdev_manage_pci_ext_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_manage_pci_ext_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_manage_pci_ext_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_manage_pci_ext_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_manage_pci_ext_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_manage_pci_ext_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_manage_pci_ext_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_manage_pci_ext_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_op {
    pub cmd: u32,
    pub u: physdev_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union physdev_op__bindgen_ty_1 {
    pub irq_status_query: physdev_irq_status_query_t,
    pub set_iopl: physdev_set_iopl_t,
    pub set_iobitmap: physdev_set_iobitmap_t,
    pub apic_op: physdev_apic_t,
    pub irq_op: physdev_irq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_op__bindgen_ty_1"]
        [::std::mem::size_of::<physdev_op__bindgen_ty_1>() - 16usize];
    ["Alignment of physdev_op__bindgen_ty_1"]
        [::std::mem::align_of::<physdev_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: physdev_op__bindgen_ty_1::irq_status_query"]
        [::std::mem::offset_of!(physdev_op__bindgen_ty_1, irq_status_query) - 0usize];
    ["Offset of field: physdev_op__bindgen_ty_1::set_iopl"]
        [::std::mem::offset_of!(physdev_op__bindgen_ty_1, set_iopl) - 0usize];
    ["Offset of field: physdev_op__bindgen_ty_1::set_iobitmap"]
        [::std::mem::offset_of!(physdev_op__bindgen_ty_1, set_iobitmap) - 0usize];
    ["Offset of field: physdev_op__bindgen_ty_1::apic_op"]
        [::std::mem::offset_of!(physdev_op__bindgen_ty_1, apic_op) - 0usize];
    ["Offset of field: physdev_op__bindgen_ty_1::irq_op"]
        [::std::mem::offset_of!(physdev_op__bindgen_ty_1, irq_op) - 0usize];
};
impl Default for physdev_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_op"][::std::mem::size_of::<physdev_op>() - 24usize];
    ["Alignment of physdev_op"][::std::mem::align_of::<physdev_op>() - 8usize];
    ["Offset of field: physdev_op::cmd"][::std::mem::offset_of!(physdev_op, cmd) - 0usize];
    ["Offset of field: physdev_op::u"][::std::mem::offset_of!(physdev_op, u) - 8usize];
};
impl Default for physdev_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type physdev_op_t = physdev_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_op_t {
    pub p: *mut physdev_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_op_t"]
        [::std::mem::size_of::<__guest_handle_physdev_op_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_op_t"]
        [::std::mem::align_of::<__guest_handle_physdev_op_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_op_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_op_t {
    pub p: *const physdev_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_op_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_op_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_setup_gsi {
    pub gsi: ::std::os::raw::c_int,
    pub triggering: u8,
    pub polarity: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_setup_gsi"][::std::mem::size_of::<physdev_setup_gsi>() - 8usize];
    ["Alignment of physdev_setup_gsi"][::std::mem::align_of::<physdev_setup_gsi>() - 4usize];
    ["Offset of field: physdev_setup_gsi::gsi"]
        [::std::mem::offset_of!(physdev_setup_gsi, gsi) - 0usize];
    ["Offset of field: physdev_setup_gsi::triggering"]
        [::std::mem::offset_of!(physdev_setup_gsi, triggering) - 4usize];
    ["Offset of field: physdev_setup_gsi::polarity"]
        [::std::mem::offset_of!(physdev_setup_gsi, polarity) - 5usize];
};
pub type physdev_setup_gsi_t = physdev_setup_gsi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_setup_gsi_t {
    pub p: *mut physdev_setup_gsi_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_setup_gsi_t"]
        [::std::mem::size_of::<__guest_handle_physdev_setup_gsi_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_setup_gsi_t"]
        [::std::mem::align_of::<__guest_handle_physdev_setup_gsi_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_setup_gsi_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_setup_gsi_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_setup_gsi_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_setup_gsi_t {
    pub p: *const physdev_setup_gsi_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_setup_gsi_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_setup_gsi_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_setup_gsi_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_setup_gsi_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_setup_gsi_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_setup_gsi_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_setup_gsi_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_get_free_pirq {
    pub type_: ::std::os::raw::c_int,
    pub pirq: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_get_free_pirq"][::std::mem::size_of::<physdev_get_free_pirq>() - 8usize];
    ["Alignment of physdev_get_free_pirq"]
        [::std::mem::align_of::<physdev_get_free_pirq>() - 4usize];
    ["Offset of field: physdev_get_free_pirq::type_"]
        [::std::mem::offset_of!(physdev_get_free_pirq, type_) - 0usize];
    ["Offset of field: physdev_get_free_pirq::pirq"]
        [::std::mem::offset_of!(physdev_get_free_pirq, pirq) - 4usize];
};
pub type physdev_get_free_pirq_t = physdev_get_free_pirq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_get_free_pirq_t {
    pub p: *mut physdev_get_free_pirq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_get_free_pirq_t"]
        [::std::mem::size_of::<__guest_handle_physdev_get_free_pirq_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_get_free_pirq_t"]
        [::std::mem::align_of::<__guest_handle_physdev_get_free_pirq_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_get_free_pirq_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_get_free_pirq_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_get_free_pirq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_get_free_pirq_t {
    pub p: *const physdev_get_free_pirq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_get_free_pirq_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_get_free_pirq_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_get_free_pirq_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_get_free_pirq_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_get_free_pirq_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_get_free_pirq_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_get_free_pirq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_pci_mmcfg_reserved {
    pub address: u64,
    pub segment: u16,
    pub start_bus: u8,
    pub end_bus: u8,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_pci_mmcfg_reserved"]
        [::std::mem::size_of::<physdev_pci_mmcfg_reserved>() - 16usize];
    ["Alignment of physdev_pci_mmcfg_reserved"]
        [::std::mem::align_of::<physdev_pci_mmcfg_reserved>() - 8usize];
    ["Offset of field: physdev_pci_mmcfg_reserved::address"]
        [::std::mem::offset_of!(physdev_pci_mmcfg_reserved, address) - 0usize];
    ["Offset of field: physdev_pci_mmcfg_reserved::segment"]
        [::std::mem::offset_of!(physdev_pci_mmcfg_reserved, segment) - 8usize];
    ["Offset of field: physdev_pci_mmcfg_reserved::start_bus"]
        [::std::mem::offset_of!(physdev_pci_mmcfg_reserved, start_bus) - 10usize];
    ["Offset of field: physdev_pci_mmcfg_reserved::end_bus"]
        [::std::mem::offset_of!(physdev_pci_mmcfg_reserved, end_bus) - 11usize];
    ["Offset of field: physdev_pci_mmcfg_reserved::flags"]
        [::std::mem::offset_of!(physdev_pci_mmcfg_reserved, flags) - 12usize];
};
pub type physdev_pci_mmcfg_reserved_t = physdev_pci_mmcfg_reserved;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_pci_mmcfg_reserved_t {
    pub p: *mut physdev_pci_mmcfg_reserved_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_pci_mmcfg_reserved_t"]
        [::std::mem::size_of::<__guest_handle_physdev_pci_mmcfg_reserved_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_pci_mmcfg_reserved_t"]
        [::std::mem::align_of::<__guest_handle_physdev_pci_mmcfg_reserved_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_pci_mmcfg_reserved_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_pci_mmcfg_reserved_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_pci_mmcfg_reserved_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_pci_mmcfg_reserved_t {
    pub p: *const physdev_pci_mmcfg_reserved_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_pci_mmcfg_reserved_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_pci_mmcfg_reserved_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_pci_mmcfg_reserved_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_pci_mmcfg_reserved_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_pci_mmcfg_reserved_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_pci_mmcfg_reserved_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_pci_mmcfg_reserved_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct physdev_pci_device_add {
    pub seg: u16,
    pub bus: u8,
    pub devfn: u8,
    pub flags: u32,
    pub physfn: physdev_pci_device_add__bindgen_ty_1,
    pub optarr: __IncompleteArrayField<u32>,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_pci_device_add__bindgen_ty_1 {
    pub bus: u8,
    pub devfn: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_pci_device_add__bindgen_ty_1"]
        [::std::mem::size_of::<physdev_pci_device_add__bindgen_ty_1>() - 2usize];
    ["Alignment of physdev_pci_device_add__bindgen_ty_1"]
        [::std::mem::align_of::<physdev_pci_device_add__bindgen_ty_1>() - 1usize];
    ["Offset of field: physdev_pci_device_add__bindgen_ty_1::bus"]
        [::std::mem::offset_of!(physdev_pci_device_add__bindgen_ty_1, bus) - 0usize];
    ["Offset of field: physdev_pci_device_add__bindgen_ty_1::devfn"]
        [::std::mem::offset_of!(physdev_pci_device_add__bindgen_ty_1, devfn) - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_pci_device_add"][::std::mem::size_of::<physdev_pci_device_add>() - 12usize];
    ["Alignment of physdev_pci_device_add"]
        [::std::mem::align_of::<physdev_pci_device_add>() - 4usize];
    ["Offset of field: physdev_pci_device_add::seg"]
        [::std::mem::offset_of!(physdev_pci_device_add, seg) - 0usize];
    ["Offset of field: physdev_pci_device_add::bus"]
        [::std::mem::offset_of!(physdev_pci_device_add, bus) - 2usize];
    ["Offset of field: physdev_pci_device_add::devfn"]
        [::std::mem::offset_of!(physdev_pci_device_add, devfn) - 3usize];
    ["Offset of field: physdev_pci_device_add::flags"]
        [::std::mem::offset_of!(physdev_pci_device_add, flags) - 4usize];
    ["Offset of field: physdev_pci_device_add::physfn"]
        [::std::mem::offset_of!(physdev_pci_device_add, physfn) - 8usize];
    ["Offset of field: physdev_pci_device_add::optarr"]
        [::std::mem::offset_of!(physdev_pci_device_add, optarr) - 12usize];
};
pub type physdev_pci_device_add_t = physdev_pci_device_add;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_pci_device_add_t {
    pub p: *mut physdev_pci_device_add_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_pci_device_add_t"]
        [::std::mem::size_of::<__guest_handle_physdev_pci_device_add_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_pci_device_add_t"]
        [::std::mem::align_of::<__guest_handle_physdev_pci_device_add_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_pci_device_add_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_pci_device_add_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_pci_device_add_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_pci_device_add_t {
    pub p: *const physdev_pci_device_add_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_pci_device_add_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_pci_device_add_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_pci_device_add_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_pci_device_add_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_pci_device_add_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_pci_device_add_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_pci_device_add_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct physdev_pci_device {
    pub seg: u16,
    pub bus: u8,
    pub devfn: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_pci_device"][::std::mem::size_of::<physdev_pci_device>() - 4usize];
    ["Alignment of physdev_pci_device"][::std::mem::align_of::<physdev_pci_device>() - 2usize];
    ["Offset of field: physdev_pci_device::seg"]
        [::std::mem::offset_of!(physdev_pci_device, seg) - 0usize];
    ["Offset of field: physdev_pci_device::bus"]
        [::std::mem::offset_of!(physdev_pci_device, bus) - 2usize];
    ["Offset of field: physdev_pci_device::devfn"]
        [::std::mem::offset_of!(physdev_pci_device, devfn) - 3usize];
};
pub type physdev_pci_device_t = physdev_pci_device;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_pci_device_t {
    pub p: *mut physdev_pci_device_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_pci_device_t"]
        [::std::mem::size_of::<__guest_handle_physdev_pci_device_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_pci_device_t"]
        [::std::mem::align_of::<__guest_handle_physdev_pci_device_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_pci_device_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_pci_device_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_pci_device_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_pci_device_t {
    pub p: *const physdev_pci_device_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_pci_device_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_pci_device_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_pci_device_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_pci_device_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_pci_device_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_pci_device_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_pci_device_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pci_device_reset {
    pub dev: physdev_pci_device_t,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pci_device_reset"][::std::mem::size_of::<pci_device_reset>() - 8usize];
    ["Alignment of pci_device_reset"][::std::mem::align_of::<pci_device_reset>() - 4usize];
    ["Offset of field: pci_device_reset::dev"]
        [::std::mem::offset_of!(pci_device_reset, dev) - 0usize];
    ["Offset of field: pci_device_reset::flags"]
        [::std::mem::offset_of!(pci_device_reset, flags) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_dbgp_op {
    pub op: u8,
    pub bus: u8,
    pub u: physdev_dbgp_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union physdev_dbgp_op__bindgen_ty_1 {
    pub pci: physdev_pci_device_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_dbgp_op__bindgen_ty_1"]
        [::std::mem::size_of::<physdev_dbgp_op__bindgen_ty_1>() - 4usize];
    ["Alignment of physdev_dbgp_op__bindgen_ty_1"]
        [::std::mem::align_of::<physdev_dbgp_op__bindgen_ty_1>() - 2usize];
    ["Offset of field: physdev_dbgp_op__bindgen_ty_1::pci"]
        [::std::mem::offset_of!(physdev_dbgp_op__bindgen_ty_1, pci) - 0usize];
};
impl Default for physdev_dbgp_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of physdev_dbgp_op"][::std::mem::size_of::<physdev_dbgp_op>() - 6usize];
    ["Alignment of physdev_dbgp_op"][::std::mem::align_of::<physdev_dbgp_op>() - 2usize];
    ["Offset of field: physdev_dbgp_op::op"][::std::mem::offset_of!(physdev_dbgp_op, op) - 0usize];
    ["Offset of field: physdev_dbgp_op::bus"]
        [::std::mem::offset_of!(physdev_dbgp_op, bus) - 1usize];
    ["Offset of field: physdev_dbgp_op::u"][::std::mem::offset_of!(physdev_dbgp_op, u) - 2usize];
};
impl Default for physdev_dbgp_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type physdev_dbgp_op_t = physdev_dbgp_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_physdev_dbgp_op_t {
    pub p: *mut physdev_dbgp_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_physdev_dbgp_op_t"]
        [::std::mem::size_of::<__guest_handle_physdev_dbgp_op_t>() - 8usize];
    ["Alignment of __guest_handle_physdev_dbgp_op_t"]
        [::std::mem::align_of::<__guest_handle_physdev_dbgp_op_t>() - 8usize];
    ["Offset of field: __guest_handle_physdev_dbgp_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_physdev_dbgp_op_t, p) - 0usize];
};
impl Default for __guest_handle_physdev_dbgp_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_physdev_dbgp_op_t {
    pub p: *const physdev_dbgp_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_physdev_dbgp_op_t"]
        [::std::mem::size_of::<__guest_handle_const_physdev_dbgp_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_physdev_dbgp_op_t"]
        [::std::mem::align_of::<__guest_handle_const_physdev_dbgp_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_physdev_dbgp_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_physdev_dbgp_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_physdev_dbgp_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_memory_reservation {
    pub extent_start: __guest_handle_xen_pfn_t,
    pub nr_extents: xen_ulong_t,
    pub extent_order: ::std::os::raw::c_uint,
    pub mem_flags: ::std::os::raw::c_uint,
    pub domid: domid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_memory_reservation"][::std::mem::size_of::<xen_memory_reservation>() - 32usize];
    ["Alignment of xen_memory_reservation"]
        [::std::mem::align_of::<xen_memory_reservation>() - 8usize];
    ["Offset of field: xen_memory_reservation::extent_start"]
        [::std::mem::offset_of!(xen_memory_reservation, extent_start) - 0usize];
    ["Offset of field: xen_memory_reservation::nr_extents"]
        [::std::mem::offset_of!(xen_memory_reservation, nr_extents) - 8usize];
    ["Offset of field: xen_memory_reservation::extent_order"]
        [::std::mem::offset_of!(xen_memory_reservation, extent_order) - 16usize];
    ["Offset of field: xen_memory_reservation::mem_flags"]
        [::std::mem::offset_of!(xen_memory_reservation, mem_flags) - 20usize];
    ["Offset of field: xen_memory_reservation::domid"]
        [::std::mem::offset_of!(xen_memory_reservation, domid) - 24usize];
};
impl Default for xen_memory_reservation {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_memory_reservation_t = xen_memory_reservation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_memory_reservation_t {
    pub p: *mut xen_memory_reservation_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_memory_reservation_t"]
        [::std::mem::size_of::<__guest_handle_xen_memory_reservation_t>() - 8usize];
    ["Alignment of __guest_handle_xen_memory_reservation_t"]
        [::std::mem::align_of::<__guest_handle_xen_memory_reservation_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_memory_reservation_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_memory_reservation_t, p) - 0usize];
};
impl Default for __guest_handle_xen_memory_reservation_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_memory_reservation_t {
    pub p: *const xen_memory_reservation_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_memory_reservation_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_memory_reservation_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_memory_reservation_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_memory_reservation_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_memory_reservation_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_memory_reservation_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_memory_reservation_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_memory_exchange {
    pub in_: xen_memory_reservation,
    pub out: xen_memory_reservation,
    pub nr_exchanged: xen_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_memory_exchange"][::std::mem::size_of::<xen_memory_exchange>() - 72usize];
    ["Alignment of xen_memory_exchange"][::std::mem::align_of::<xen_memory_exchange>() - 8usize];
    ["Offset of field: xen_memory_exchange::in_"]
        [::std::mem::offset_of!(xen_memory_exchange, in_) - 0usize];
    ["Offset of field: xen_memory_exchange::out"]
        [::std::mem::offset_of!(xen_memory_exchange, out) - 32usize];
    ["Offset of field: xen_memory_exchange::nr_exchanged"]
        [::std::mem::offset_of!(xen_memory_exchange, nr_exchanged) - 64usize];
};
impl Default for xen_memory_exchange {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_memory_exchange_t = xen_memory_exchange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_memory_exchange_t {
    pub p: *mut xen_memory_exchange_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_memory_exchange_t"]
        [::std::mem::size_of::<__guest_handle_xen_memory_exchange_t>() - 8usize];
    ["Alignment of __guest_handle_xen_memory_exchange_t"]
        [::std::mem::align_of::<__guest_handle_xen_memory_exchange_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_memory_exchange_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_memory_exchange_t, p) - 0usize];
};
impl Default for __guest_handle_xen_memory_exchange_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_memory_exchange_t {
    pub p: *const xen_memory_exchange_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_memory_exchange_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_memory_exchange_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_memory_exchange_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_memory_exchange_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_memory_exchange_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_memory_exchange_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_memory_exchange_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_memory_domain {
    pub domid: domid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_memory_domain"][::std::mem::size_of::<xen_memory_domain>() - 2usize];
    ["Alignment of xen_memory_domain"][::std::mem::align_of::<xen_memory_domain>() - 2usize];
    ["Offset of field: xen_memory_domain::domid"]
        [::std::mem::offset_of!(xen_memory_domain, domid) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_machphys_mfn_list {
    pub max_extents: ::std::os::raw::c_uint,
    pub extent_start: __guest_handle_xen_pfn_t,
    pub nr_extents: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_machphys_mfn_list"][::std::mem::size_of::<xen_machphys_mfn_list>() - 24usize];
    ["Alignment of xen_machphys_mfn_list"]
        [::std::mem::align_of::<xen_machphys_mfn_list>() - 8usize];
    ["Offset of field: xen_machphys_mfn_list::max_extents"]
        [::std::mem::offset_of!(xen_machphys_mfn_list, max_extents) - 0usize];
    ["Offset of field: xen_machphys_mfn_list::extent_start"]
        [::std::mem::offset_of!(xen_machphys_mfn_list, extent_start) - 8usize];
    ["Offset of field: xen_machphys_mfn_list::nr_extents"]
        [::std::mem::offset_of!(xen_machphys_mfn_list, nr_extents) - 16usize];
};
impl Default for xen_machphys_mfn_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_machphys_mfn_list_t = xen_machphys_mfn_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_machphys_mfn_list_t {
    pub p: *mut xen_machphys_mfn_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_machphys_mfn_list_t"]
        [::std::mem::size_of::<__guest_handle_xen_machphys_mfn_list_t>() - 8usize];
    ["Alignment of __guest_handle_xen_machphys_mfn_list_t"]
        [::std::mem::align_of::<__guest_handle_xen_machphys_mfn_list_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_machphys_mfn_list_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_machphys_mfn_list_t, p) - 0usize];
};
impl Default for __guest_handle_xen_machphys_mfn_list_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_machphys_mfn_list_t {
    pub p: *const xen_machphys_mfn_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_machphys_mfn_list_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_machphys_mfn_list_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_machphys_mfn_list_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_machphys_mfn_list_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_machphys_mfn_list_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_machphys_mfn_list_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_machphys_mfn_list_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_machphys_mapping {
    pub v_start: xen_ulong_t,
    pub v_end: xen_ulong_t,
    pub max_mfn: xen_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_machphys_mapping"][::std::mem::size_of::<xen_machphys_mapping>() - 24usize];
    ["Alignment of xen_machphys_mapping"][::std::mem::align_of::<xen_machphys_mapping>() - 8usize];
    ["Offset of field: xen_machphys_mapping::v_start"]
        [::std::mem::offset_of!(xen_machphys_mapping, v_start) - 0usize];
    ["Offset of field: xen_machphys_mapping::v_end"]
        [::std::mem::offset_of!(xen_machphys_mapping, v_end) - 8usize];
    ["Offset of field: xen_machphys_mapping::max_mfn"]
        [::std::mem::offset_of!(xen_machphys_mapping, max_mfn) - 16usize];
};
pub type xen_machphys_mapping_t = xen_machphys_mapping;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_machphys_mapping_t {
    pub p: *mut xen_machphys_mapping_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_machphys_mapping_t"]
        [::std::mem::size_of::<__guest_handle_xen_machphys_mapping_t>() - 8usize];
    ["Alignment of __guest_handle_xen_machphys_mapping_t"]
        [::std::mem::align_of::<__guest_handle_xen_machphys_mapping_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_machphys_mapping_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_machphys_mapping_t, p) - 0usize];
};
impl Default for __guest_handle_xen_machphys_mapping_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_machphys_mapping_t {
    pub p: *const xen_machphys_mapping_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_machphys_mapping_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_machphys_mapping_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_machphys_mapping_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_machphys_mapping_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_machphys_mapping_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_machphys_mapping_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_machphys_mapping_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_add_to_physmap {
    pub domid: domid_t,
    pub size: u16,
    pub space: ::std::os::raw::c_uint,
    pub idx: xen_ulong_t,
    pub gpfn: xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_add_to_physmap"][::std::mem::size_of::<xen_add_to_physmap>() - 24usize];
    ["Alignment of xen_add_to_physmap"][::std::mem::align_of::<xen_add_to_physmap>() - 8usize];
    ["Offset of field: xen_add_to_physmap::domid"]
        [::std::mem::offset_of!(xen_add_to_physmap, domid) - 0usize];
    ["Offset of field: xen_add_to_physmap::size"]
        [::std::mem::offset_of!(xen_add_to_physmap, size) - 2usize];
    ["Offset of field: xen_add_to_physmap::space"]
        [::std::mem::offset_of!(xen_add_to_physmap, space) - 4usize];
    ["Offset of field: xen_add_to_physmap::idx"]
        [::std::mem::offset_of!(xen_add_to_physmap, idx) - 8usize];
    ["Offset of field: xen_add_to_physmap::gpfn"]
        [::std::mem::offset_of!(xen_add_to_physmap, gpfn) - 16usize];
};
pub type xen_add_to_physmap_t = xen_add_to_physmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_add_to_physmap_t {
    pub p: *mut xen_add_to_physmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_add_to_physmap_t"]
        [::std::mem::size_of::<__guest_handle_xen_add_to_physmap_t>() - 8usize];
    ["Alignment of __guest_handle_xen_add_to_physmap_t"]
        [::std::mem::align_of::<__guest_handle_xen_add_to_physmap_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_add_to_physmap_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_add_to_physmap_t, p) - 0usize];
};
impl Default for __guest_handle_xen_add_to_physmap_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_add_to_physmap_t {
    pub p: *const xen_add_to_physmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_add_to_physmap_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_add_to_physmap_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_add_to_physmap_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_add_to_physmap_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_add_to_physmap_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_add_to_physmap_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_add_to_physmap_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_add_to_physmap_batch {
    pub domid: domid_t,
    pub space: u16,
    pub size: u16,
    pub u: xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra,
    pub idxs: __guest_handle_xen_ulong_t,
    pub gpfns: __guest_handle_xen_pfn_t,
    pub errs: __guest_handle_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra {
    pub foreign_domid: domid_t,
    pub res0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra"]
        [::std::mem::size_of::<xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra>() - 2usize];
    ["Alignment of xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra"][::std::mem::align_of::<
        xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra,
    >() - 2usize];
    ["Offset of field: xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra::foreign_domid"][::std::mem::offset_of!(
        xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra,
        foreign_domid
    )
        - 0usize];
    ["Offset of field: xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra::res0"][::std::mem::offset_of!(
        xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra,
        res0
    ) - 0usize];
};
impl Default for xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_add_to_physmap_batch"]
        [::std::mem::size_of::<xen_add_to_physmap_batch>() - 32usize];
    ["Alignment of xen_add_to_physmap_batch"]
        [::std::mem::align_of::<xen_add_to_physmap_batch>() - 8usize];
    ["Offset of field: xen_add_to_physmap_batch::domid"]
        [::std::mem::offset_of!(xen_add_to_physmap_batch, domid) - 0usize];
    ["Offset of field: xen_add_to_physmap_batch::space"]
        [::std::mem::offset_of!(xen_add_to_physmap_batch, space) - 2usize];
    ["Offset of field: xen_add_to_physmap_batch::size"]
        [::std::mem::offset_of!(xen_add_to_physmap_batch, size) - 4usize];
    ["Offset of field: xen_add_to_physmap_batch::u"]
        [::std::mem::offset_of!(xen_add_to_physmap_batch, u) - 6usize];
    ["Offset of field: xen_add_to_physmap_batch::idxs"]
        [::std::mem::offset_of!(xen_add_to_physmap_batch, idxs) - 8usize];
    ["Offset of field: xen_add_to_physmap_batch::gpfns"]
        [::std::mem::offset_of!(xen_add_to_physmap_batch, gpfns) - 16usize];
    ["Offset of field: xen_add_to_physmap_batch::errs"]
        [::std::mem::offset_of!(xen_add_to_physmap_batch, errs) - 24usize];
};
impl Default for xen_add_to_physmap_batch {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_add_to_physmap_batch_t = xen_add_to_physmap_batch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_add_to_physmap_batch_t {
    pub p: *mut xen_add_to_physmap_batch_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_add_to_physmap_batch_t"]
        [::std::mem::size_of::<__guest_handle_xen_add_to_physmap_batch_t>() - 8usize];
    ["Alignment of __guest_handle_xen_add_to_physmap_batch_t"]
        [::std::mem::align_of::<__guest_handle_xen_add_to_physmap_batch_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_add_to_physmap_batch_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_add_to_physmap_batch_t, p) - 0usize];
};
impl Default for __guest_handle_xen_add_to_physmap_batch_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_add_to_physmap_batch_t {
    pub p: *const xen_add_to_physmap_batch_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_add_to_physmap_batch_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_add_to_physmap_batch_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_add_to_physmap_batch_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_add_to_physmap_batch_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_add_to_physmap_batch_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_add_to_physmap_batch_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_add_to_physmap_batch_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_remove_from_physmap {
    pub domid: domid_t,
    pub gpfn: xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_remove_from_physmap"][::std::mem::size_of::<xen_remove_from_physmap>() - 16usize];
    ["Alignment of xen_remove_from_physmap"]
        [::std::mem::align_of::<xen_remove_from_physmap>() - 8usize];
    ["Offset of field: xen_remove_from_physmap::domid"]
        [::std::mem::offset_of!(xen_remove_from_physmap, domid) - 0usize];
    ["Offset of field: xen_remove_from_physmap::gpfn"]
        [::std::mem::offset_of!(xen_remove_from_physmap, gpfn) - 8usize];
};
pub type xen_remove_from_physmap_t = xen_remove_from_physmap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_remove_from_physmap_t {
    pub p: *mut xen_remove_from_physmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_remove_from_physmap_t"]
        [::std::mem::size_of::<__guest_handle_xen_remove_from_physmap_t>() - 8usize];
    ["Alignment of __guest_handle_xen_remove_from_physmap_t"]
        [::std::mem::align_of::<__guest_handle_xen_remove_from_physmap_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_remove_from_physmap_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_remove_from_physmap_t, p) - 0usize];
};
impl Default for __guest_handle_xen_remove_from_physmap_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_remove_from_physmap_t {
    pub p: *const xen_remove_from_physmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_remove_from_physmap_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_remove_from_physmap_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_remove_from_physmap_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_remove_from_physmap_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_remove_from_physmap_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_remove_from_physmap_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_remove_from_physmap_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_memory_map {
    pub nr_entries: ::std::os::raw::c_uint,
    pub buffer: __guest_handle_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_memory_map"][::std::mem::size_of::<xen_memory_map>() - 16usize];
    ["Alignment of xen_memory_map"][::std::mem::align_of::<xen_memory_map>() - 8usize];
    ["Offset of field: xen_memory_map::nr_entries"]
        [::std::mem::offset_of!(xen_memory_map, nr_entries) - 0usize];
    ["Offset of field: xen_memory_map::buffer"]
        [::std::mem::offset_of!(xen_memory_map, buffer) - 8usize];
};
impl Default for xen_memory_map {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_memory_map_t = xen_memory_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_memory_map_t {
    pub p: *mut xen_memory_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_memory_map_t"]
        [::std::mem::size_of::<__guest_handle_xen_memory_map_t>() - 8usize];
    ["Alignment of __guest_handle_xen_memory_map_t"]
        [::std::mem::align_of::<__guest_handle_xen_memory_map_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_memory_map_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_memory_map_t, p) - 0usize];
};
impl Default for __guest_handle_xen_memory_map_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_memory_map_t {
    pub p: *const xen_memory_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_memory_map_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_memory_map_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_memory_map_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_memory_map_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_memory_map_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_memory_map_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_memory_map_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_foreign_memory_map {
    pub domid: domid_t,
    pub map: xen_memory_map,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_foreign_memory_map"][::std::mem::size_of::<xen_foreign_memory_map>() - 24usize];
    ["Alignment of xen_foreign_memory_map"]
        [::std::mem::align_of::<xen_foreign_memory_map>() - 8usize];
    ["Offset of field: xen_foreign_memory_map::domid"]
        [::std::mem::offset_of!(xen_foreign_memory_map, domid) - 0usize];
    ["Offset of field: xen_foreign_memory_map::map"]
        [::std::mem::offset_of!(xen_foreign_memory_map, map) - 8usize];
};
impl Default for xen_foreign_memory_map {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_foreign_memory_map_t = xen_foreign_memory_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_foreign_memory_map_t {
    pub p: *mut xen_foreign_memory_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_foreign_memory_map_t"]
        [::std::mem::size_of::<__guest_handle_xen_foreign_memory_map_t>() - 8usize];
    ["Alignment of __guest_handle_xen_foreign_memory_map_t"]
        [::std::mem::align_of::<__guest_handle_xen_foreign_memory_map_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_foreign_memory_map_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_foreign_memory_map_t, p) - 0usize];
};
impl Default for __guest_handle_xen_foreign_memory_map_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_foreign_memory_map_t {
    pub p: *const xen_foreign_memory_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_foreign_memory_map_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_foreign_memory_map_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_foreign_memory_map_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_foreign_memory_map_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_foreign_memory_map_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_foreign_memory_map_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_foreign_memory_map_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_pod_target {
    pub target_pages: u64,
    pub tot_pages: u64,
    pub pod_cache_pages: u64,
    pub pod_entries: u64,
    pub domid: domid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_pod_target"][::std::mem::size_of::<xen_pod_target>() - 40usize];
    ["Alignment of xen_pod_target"][::std::mem::align_of::<xen_pod_target>() - 8usize];
    ["Offset of field: xen_pod_target::target_pages"]
        [::std::mem::offset_of!(xen_pod_target, target_pages) - 0usize];
    ["Offset of field: xen_pod_target::tot_pages"]
        [::std::mem::offset_of!(xen_pod_target, tot_pages) - 8usize];
    ["Offset of field: xen_pod_target::pod_cache_pages"]
        [::std::mem::offset_of!(xen_pod_target, pod_cache_pages) - 16usize];
    ["Offset of field: xen_pod_target::pod_entries"]
        [::std::mem::offset_of!(xen_pod_target, pod_entries) - 24usize];
    ["Offset of field: xen_pod_target::domid"]
        [::std::mem::offset_of!(xen_pod_target, domid) - 32usize];
};
pub type xen_pod_target_t = xen_pod_target;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_paging_op {
    pub op: u8,
    pub domain: domid_t,
    pub buffer: __guest_handle_const_uint8,
    pub gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_paging_op"][::std::mem::size_of::<xen_mem_paging_op>() - 24usize];
    ["Alignment of xen_mem_paging_op"][::std::mem::align_of::<xen_mem_paging_op>() - 8usize];
    ["Offset of field: xen_mem_paging_op::op"]
        [::std::mem::offset_of!(xen_mem_paging_op, op) - 0usize];
    ["Offset of field: xen_mem_paging_op::domain"]
        [::std::mem::offset_of!(xen_mem_paging_op, domain) - 2usize];
    ["Offset of field: xen_mem_paging_op::buffer"]
        [::std::mem::offset_of!(xen_mem_paging_op, buffer) - 8usize];
    ["Offset of field: xen_mem_paging_op::gfn"]
        [::std::mem::offset_of!(xen_mem_paging_op, gfn) - 16usize];
};
impl Default for xen_mem_paging_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_mem_paging_op_t = xen_mem_paging_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mem_paging_op_t {
    pub p: *mut xen_mem_paging_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_mem_paging_op_t"]
        [::std::mem::size_of::<__guest_handle_xen_mem_paging_op_t>() - 8usize];
    ["Alignment of __guest_handle_xen_mem_paging_op_t"]
        [::std::mem::align_of::<__guest_handle_xen_mem_paging_op_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_mem_paging_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_mem_paging_op_t, p) - 0usize];
};
impl Default for __guest_handle_xen_mem_paging_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mem_paging_op_t {
    pub p: *const xen_mem_paging_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_mem_paging_op_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_mem_paging_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_mem_paging_op_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_mem_paging_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_mem_paging_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_mem_paging_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_mem_paging_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const xenmem_access_t_XENMEM_access_n: xenmem_access_t = 0;
pub const xenmem_access_t_XENMEM_access_r: xenmem_access_t = 1;
pub const xenmem_access_t_XENMEM_access_w: xenmem_access_t = 2;
pub const xenmem_access_t_XENMEM_access_rw: xenmem_access_t = 3;
pub const xenmem_access_t_XENMEM_access_x: xenmem_access_t = 4;
pub const xenmem_access_t_XENMEM_access_rx: xenmem_access_t = 5;
pub const xenmem_access_t_XENMEM_access_wx: xenmem_access_t = 6;
pub const xenmem_access_t_XENMEM_access_rwx: xenmem_access_t = 7;
pub const xenmem_access_t_XENMEM_access_rx2rw: xenmem_access_t = 8;
pub const xenmem_access_t_XENMEM_access_n2rwx: xenmem_access_t = 9;
pub const xenmem_access_t_XENMEM_access_r_pw: xenmem_access_t = 10;
pub const xenmem_access_t_XENMEM_access_default: xenmem_access_t = 11;
pub type xenmem_access_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_access_op {
    pub op: u8,
    pub access: u8,
    pub domid: domid_t,
    pub nr: u32,
    pub pfn: u64,
    pub pfn_list: __guest_handle_const_uint64,
    pub access_list: __guest_handle_const_uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_access_op"][::std::mem::size_of::<xen_mem_access_op>() - 32usize];
    ["Alignment of xen_mem_access_op"][::std::mem::align_of::<xen_mem_access_op>() - 8usize];
    ["Offset of field: xen_mem_access_op::op"]
        [::std::mem::offset_of!(xen_mem_access_op, op) - 0usize];
    ["Offset of field: xen_mem_access_op::access"]
        [::std::mem::offset_of!(xen_mem_access_op, access) - 1usize];
    ["Offset of field: xen_mem_access_op::domid"]
        [::std::mem::offset_of!(xen_mem_access_op, domid) - 2usize];
    ["Offset of field: xen_mem_access_op::nr"]
        [::std::mem::offset_of!(xen_mem_access_op, nr) - 4usize];
    ["Offset of field: xen_mem_access_op::pfn"]
        [::std::mem::offset_of!(xen_mem_access_op, pfn) - 8usize];
    ["Offset of field: xen_mem_access_op::pfn_list"]
        [::std::mem::offset_of!(xen_mem_access_op, pfn_list) - 16usize];
    ["Offset of field: xen_mem_access_op::access_list"]
        [::std::mem::offset_of!(xen_mem_access_op, access_list) - 24usize];
};
impl Default for xen_mem_access_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_mem_access_op_t = xen_mem_access_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mem_access_op_t {
    pub p: *mut xen_mem_access_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_mem_access_op_t"]
        [::std::mem::size_of::<__guest_handle_xen_mem_access_op_t>() - 8usize];
    ["Alignment of __guest_handle_xen_mem_access_op_t"]
        [::std::mem::align_of::<__guest_handle_xen_mem_access_op_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_mem_access_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_mem_access_op_t, p) - 0usize];
};
impl Default for __guest_handle_xen_mem_access_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mem_access_op_t {
    pub p: *const xen_mem_access_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_mem_access_op_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_mem_access_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_mem_access_op_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_mem_access_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_mem_access_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_mem_access_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_mem_access_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op {
    pub op: u8,
    pub domain: domid_t,
    pub u: xen_mem_sharing_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1 {
    pub nominate: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
    pub share: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
    pub range: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
    pub debug: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug,
    pub fork: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate {
    pub u: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
    pub handle: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1 {
    pub gfn: u64,
    pub grant_ref: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1"]
        [::std::mem::size_of::<
            xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
        >() - 8usize];
    ["Alignment of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1"]
        [::std::mem::align_of::<
            xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
        >() - 8usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1::gfn"] [:: std :: mem :: offset_of ! (xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1 , gfn) - 0usize] ;
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1::grant_ref"] [:: std :: mem :: offset_of ! (xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1 , grant_ref) - 0usize] ;
};
impl Default for xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate"][::std::mem::size_of::<
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
    >() - 16usize];
    ["Alignment of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate"][::std::mem::align_of::<
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
    >() - 8usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate::u"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
        u
    ) - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate::handle"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
        handle
    )
        - 8usize];
};
impl Default for xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share {
    pub source_gfn: u64,
    pub source_handle: u64,
    pub client_gfn: u64,
    pub client_handle: u64,
    pub client_domain: domid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share"]
        [::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>() - 40usize];
    ["Alignment of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share"]
        [::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>() - 8usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share::source_gfn"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
        source_gfn
    )
        - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share::source_handle"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
        source_handle
    )
        - 8usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share::client_gfn"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
        client_gfn
    )
        - 16usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share::client_handle"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
        client_handle
    )
        - 24usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share::client_domain"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
        client_domain
    )
        - 32usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range {
    pub first_gfn: u64,
    pub last_gfn: u64,
    pub opaque: u64,
    pub client_domain: domid_t,
    pub _pad: [u16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range"]
        [::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>() - 32usize];
    ["Alignment of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range"]
        [::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>() - 8usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range::first_gfn"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
        first_gfn
    )
        - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range::last_gfn"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
        last_gfn
    )
        - 8usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range::opaque"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
        opaque
    ) - 16usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range::client_domain"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
        client_domain
    )
        - 24usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range::_pad"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
        _pad
    ) - 26usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug {
    pub u: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1 {
    pub gfn: u64,
    pub mfn: u64,
    pub gref: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1"]
        [::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1>(
        ) - 8usize];
    ["Alignment of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1"]
        [::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1::gfn"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
        gfn
    )
        - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1::mfn"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
        mfn
    )
        - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1::gref"] [:: std :: mem :: offset_of ! (xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1 , gref) - 0usize] ;
};
impl Default for xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug"]
        [::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug>() - 8usize];
    ["Alignment of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug"]
        [::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug>() - 8usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug::u"]
        [::std::mem::offset_of!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug, u) - 0usize];
};
impl Default for xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork {
    pub parent_domain: domid_t,
    pub flags: u16,
    pub pad: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork"]
        [::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork>() - 8usize];
    ["Alignment of xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork"]
        [::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork>() - 4usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork::parent_domain"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
        parent_domain
    )
        - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork::flags"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
        flags
    ) - 2usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork::pad"][::std::mem::offset_of!(
        xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
        pad
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_sharing_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1>() - 40usize];
    ["Alignment of xen_mem_sharing_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1::nominate"]
        [::std::mem::offset_of!(xen_mem_sharing_op__bindgen_ty_1, nominate) - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1::share"]
        [::std::mem::offset_of!(xen_mem_sharing_op__bindgen_ty_1, share) - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1::range"]
        [::std::mem::offset_of!(xen_mem_sharing_op__bindgen_ty_1, range) - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1::debug"]
        [::std::mem::offset_of!(xen_mem_sharing_op__bindgen_ty_1, debug) - 0usize];
    ["Offset of field: xen_mem_sharing_op__bindgen_ty_1::fork"]
        [::std::mem::offset_of!(xen_mem_sharing_op__bindgen_ty_1, fork) - 0usize];
};
impl Default for xen_mem_sharing_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_sharing_op"][::std::mem::size_of::<xen_mem_sharing_op>() - 48usize];
    ["Alignment of xen_mem_sharing_op"][::std::mem::align_of::<xen_mem_sharing_op>() - 8usize];
    ["Offset of field: xen_mem_sharing_op::op"]
        [::std::mem::offset_of!(xen_mem_sharing_op, op) - 0usize];
    ["Offset of field: xen_mem_sharing_op::domain"]
        [::std::mem::offset_of!(xen_mem_sharing_op, domain) - 2usize];
    ["Offset of field: xen_mem_sharing_op::u"]
        [::std::mem::offset_of!(xen_mem_sharing_op, u) - 8usize];
};
impl Default for xen_mem_sharing_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_mem_sharing_op_t = xen_mem_sharing_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mem_sharing_op_t {
    pub p: *mut xen_mem_sharing_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_mem_sharing_op_t"]
        [::std::mem::size_of::<__guest_handle_xen_mem_sharing_op_t>() - 8usize];
    ["Alignment of __guest_handle_xen_mem_sharing_op_t"]
        [::std::mem::align_of::<__guest_handle_xen_mem_sharing_op_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_mem_sharing_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_mem_sharing_op_t, p) - 0usize];
};
impl Default for __guest_handle_xen_mem_sharing_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mem_sharing_op_t {
    pub p: *const xen_mem_sharing_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_mem_sharing_op_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_mem_sharing_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_mem_sharing_op_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_mem_sharing_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_mem_sharing_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_mem_sharing_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_mem_sharing_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_reserved_device_memory {
    pub start_pfn: xen_pfn_t,
    pub nr_pages: xen_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_reserved_device_memory"]
        [::std::mem::size_of::<xen_reserved_device_memory>() - 16usize];
    ["Alignment of xen_reserved_device_memory"]
        [::std::mem::align_of::<xen_reserved_device_memory>() - 8usize];
    ["Offset of field: xen_reserved_device_memory::start_pfn"]
        [::std::mem::offset_of!(xen_reserved_device_memory, start_pfn) - 0usize];
    ["Offset of field: xen_reserved_device_memory::nr_pages"]
        [::std::mem::offset_of!(xen_reserved_device_memory, nr_pages) - 8usize];
};
pub type xen_reserved_device_memory_t = xen_reserved_device_memory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_reserved_device_memory_t {
    pub p: *mut xen_reserved_device_memory_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_reserved_device_memory_t"]
        [::std::mem::size_of::<__guest_handle_xen_reserved_device_memory_t>() - 8usize];
    ["Alignment of __guest_handle_xen_reserved_device_memory_t"]
        [::std::mem::align_of::<__guest_handle_xen_reserved_device_memory_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_reserved_device_memory_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_reserved_device_memory_t, p) - 0usize];
};
impl Default for __guest_handle_xen_reserved_device_memory_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_reserved_device_memory_t {
    pub p: *const xen_reserved_device_memory_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_reserved_device_memory_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_reserved_device_memory_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_reserved_device_memory_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_reserved_device_memory_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_reserved_device_memory_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_reserved_device_memory_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_reserved_device_memory_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_reserved_device_memory_map {
    pub flags: u32,
    pub nr_entries: ::std::os::raw::c_uint,
    pub buffer: __guest_handle_xen_reserved_device_memory_t,
    pub dev: xen_reserved_device_memory_map__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_reserved_device_memory_map__bindgen_ty_1 {
    pub pci: physdev_pci_device_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_reserved_device_memory_map__bindgen_ty_1"]
        [::std::mem::size_of::<xen_reserved_device_memory_map__bindgen_ty_1>() - 4usize];
    ["Alignment of xen_reserved_device_memory_map__bindgen_ty_1"]
        [::std::mem::align_of::<xen_reserved_device_memory_map__bindgen_ty_1>() - 2usize];
    ["Offset of field: xen_reserved_device_memory_map__bindgen_ty_1::pci"]
        [::std::mem::offset_of!(xen_reserved_device_memory_map__bindgen_ty_1, pci) - 0usize];
};
impl Default for xen_reserved_device_memory_map__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_reserved_device_memory_map"]
        [::std::mem::size_of::<xen_reserved_device_memory_map>() - 24usize];
    ["Alignment of xen_reserved_device_memory_map"]
        [::std::mem::align_of::<xen_reserved_device_memory_map>() - 8usize];
    ["Offset of field: xen_reserved_device_memory_map::flags"]
        [::std::mem::offset_of!(xen_reserved_device_memory_map, flags) - 0usize];
    ["Offset of field: xen_reserved_device_memory_map::nr_entries"]
        [::std::mem::offset_of!(xen_reserved_device_memory_map, nr_entries) - 4usize];
    ["Offset of field: xen_reserved_device_memory_map::buffer"]
        [::std::mem::offset_of!(xen_reserved_device_memory_map, buffer) - 8usize];
    ["Offset of field: xen_reserved_device_memory_map::dev"]
        [::std::mem::offset_of!(xen_reserved_device_memory_map, dev) - 16usize];
};
impl Default for xen_reserved_device_memory_map {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_reserved_device_memory_map_t = xen_reserved_device_memory_map;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_reserved_device_memory_map_t {
    pub p: *mut xen_reserved_device_memory_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_reserved_device_memory_map_t"]
        [::std::mem::size_of::<__guest_handle_xen_reserved_device_memory_map_t>() - 8usize];
    ["Alignment of __guest_handle_xen_reserved_device_memory_map_t"]
        [::std::mem::align_of::<__guest_handle_xen_reserved_device_memory_map_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_reserved_device_memory_map_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_reserved_device_memory_map_t, p) - 0usize];
};
impl Default for __guest_handle_xen_reserved_device_memory_map_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_reserved_device_memory_map_t {
    pub p: *const xen_reserved_device_memory_map_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_reserved_device_memory_map_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_reserved_device_memory_map_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_reserved_device_memory_map_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_reserved_device_memory_map_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_reserved_device_memory_map_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_reserved_device_memory_map_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_reserved_device_memory_map_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_acquire_resource {
    pub domid: domid_t,
    pub type_: u16,
    pub id: u32,
    pub nr_frames: u32,
    pub pad: u32,
    pub frame: u64,
    pub frame_list: __guest_handle_xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mem_acquire_resource"]
        [::std::mem::size_of::<xen_mem_acquire_resource>() - 32usize];
    ["Alignment of xen_mem_acquire_resource"]
        [::std::mem::align_of::<xen_mem_acquire_resource>() - 8usize];
    ["Offset of field: xen_mem_acquire_resource::domid"]
        [::std::mem::offset_of!(xen_mem_acquire_resource, domid) - 0usize];
    ["Offset of field: xen_mem_acquire_resource::type_"]
        [::std::mem::offset_of!(xen_mem_acquire_resource, type_) - 2usize];
    ["Offset of field: xen_mem_acquire_resource::id"]
        [::std::mem::offset_of!(xen_mem_acquire_resource, id) - 4usize];
    ["Offset of field: xen_mem_acquire_resource::nr_frames"]
        [::std::mem::offset_of!(xen_mem_acquire_resource, nr_frames) - 8usize];
    ["Offset of field: xen_mem_acquire_resource::pad"]
        [::std::mem::offset_of!(xen_mem_acquire_resource, pad) - 12usize];
    ["Offset of field: xen_mem_acquire_resource::frame"]
        [::std::mem::offset_of!(xen_mem_acquire_resource, frame) - 16usize];
    ["Offset of field: xen_mem_acquire_resource::frame_list"]
        [::std::mem::offset_of!(xen_mem_acquire_resource, frame_list) - 24usize];
};
impl Default for xen_mem_acquire_resource {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_mem_acquire_resource_t = xen_mem_acquire_resource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mem_acquire_resource_t {
    pub p: *mut xen_mem_acquire_resource_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_mem_acquire_resource_t"]
        [::std::mem::size_of::<__guest_handle_xen_mem_acquire_resource_t>() - 8usize];
    ["Alignment of __guest_handle_xen_mem_acquire_resource_t"]
        [::std::mem::align_of::<__guest_handle_xen_mem_acquire_resource_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_mem_acquire_resource_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_mem_acquire_resource_t, p) - 0usize];
};
impl Default for __guest_handle_xen_mem_acquire_resource_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mem_acquire_resource_t {
    pub p: *const xen_mem_acquire_resource_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_mem_acquire_resource_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_mem_acquire_resource_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_mem_acquire_resource_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_mem_acquire_resource_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_mem_acquire_resource_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_mem_acquire_resource_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_mem_acquire_resource_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_vmemrange {
    pub start: u64,
    pub end: u64,
    pub flags: ::std::os::raw::c_uint,
    pub nid: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_vmemrange"][::std::mem::size_of::<xen_vmemrange>() - 24usize];
    ["Alignment of xen_vmemrange"][::std::mem::align_of::<xen_vmemrange>() - 8usize];
    ["Offset of field: xen_vmemrange::start"]
        [::std::mem::offset_of!(xen_vmemrange, start) - 0usize];
    ["Offset of field: xen_vmemrange::end"][::std::mem::offset_of!(xen_vmemrange, end) - 8usize];
    ["Offset of field: xen_vmemrange::flags"]
        [::std::mem::offset_of!(xen_vmemrange, flags) - 16usize];
    ["Offset of field: xen_vmemrange::nid"][::std::mem::offset_of!(xen_vmemrange, nid) - 20usize];
};
pub type xen_vmemrange_t = xen_vmemrange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_vmemrange_t {
    pub p: *mut xen_vmemrange_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_vmemrange_t"]
        [::std::mem::size_of::<__guest_handle_xen_vmemrange_t>() - 8usize];
    ["Alignment of __guest_handle_xen_vmemrange_t"]
        [::std::mem::align_of::<__guest_handle_xen_vmemrange_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_vmemrange_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_vmemrange_t, p) - 0usize];
};
impl Default for __guest_handle_xen_vmemrange_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_vmemrange_t {
    pub p: *const xen_vmemrange_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_vmemrange_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_vmemrange_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_vmemrange_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_vmemrange_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_vmemrange_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_vmemrange_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_vmemrange_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_vnuma_topology_info {
    pub domid: domid_t,
    pub pad: u16,
    pub nr_vnodes: ::std::os::raw::c_uint,
    pub nr_vcpus: ::std::os::raw::c_uint,
    pub nr_vmemranges: ::std::os::raw::c_uint,
    pub vdistance: xen_vnuma_topology_info__bindgen_ty_1,
    pub vcpu_to_vnode: xen_vnuma_topology_info__bindgen_ty_2,
    pub vmemrange: xen_vnuma_topology_info__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_1 {
    pub h: __guest_handle_uint,
    pub pad: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_vnuma_topology_info__bindgen_ty_1"]
        [::std::mem::size_of::<xen_vnuma_topology_info__bindgen_ty_1>() - 8usize];
    ["Alignment of xen_vnuma_topology_info__bindgen_ty_1"]
        [::std::mem::align_of::<xen_vnuma_topology_info__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_vnuma_topology_info__bindgen_ty_1::h"]
        [::std::mem::offset_of!(xen_vnuma_topology_info__bindgen_ty_1, h) - 0usize];
    ["Offset of field: xen_vnuma_topology_info__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(xen_vnuma_topology_info__bindgen_ty_1, pad) - 0usize];
};
impl Default for xen_vnuma_topology_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_2 {
    pub h: __guest_handle_uint,
    pub pad: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_vnuma_topology_info__bindgen_ty_2"]
        [::std::mem::size_of::<xen_vnuma_topology_info__bindgen_ty_2>() - 8usize];
    ["Alignment of xen_vnuma_topology_info__bindgen_ty_2"]
        [::std::mem::align_of::<xen_vnuma_topology_info__bindgen_ty_2>() - 8usize];
    ["Offset of field: xen_vnuma_topology_info__bindgen_ty_2::h"]
        [::std::mem::offset_of!(xen_vnuma_topology_info__bindgen_ty_2, h) - 0usize];
    ["Offset of field: xen_vnuma_topology_info__bindgen_ty_2::pad"]
        [::std::mem::offset_of!(xen_vnuma_topology_info__bindgen_ty_2, pad) - 0usize];
};
impl Default for xen_vnuma_topology_info__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_3 {
    pub h: __guest_handle_xen_vmemrange_t,
    pub pad: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_vnuma_topology_info__bindgen_ty_3"]
        [::std::mem::size_of::<xen_vnuma_topology_info__bindgen_ty_3>() - 8usize];
    ["Alignment of xen_vnuma_topology_info__bindgen_ty_3"]
        [::std::mem::align_of::<xen_vnuma_topology_info__bindgen_ty_3>() - 8usize];
    ["Offset of field: xen_vnuma_topology_info__bindgen_ty_3::h"]
        [::std::mem::offset_of!(xen_vnuma_topology_info__bindgen_ty_3, h) - 0usize];
    ["Offset of field: xen_vnuma_topology_info__bindgen_ty_3::pad"]
        [::std::mem::offset_of!(xen_vnuma_topology_info__bindgen_ty_3, pad) - 0usize];
};
impl Default for xen_vnuma_topology_info__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_vnuma_topology_info"][::std::mem::size_of::<xen_vnuma_topology_info>() - 40usize];
    ["Alignment of xen_vnuma_topology_info"]
        [::std::mem::align_of::<xen_vnuma_topology_info>() - 8usize];
    ["Offset of field: xen_vnuma_topology_info::domid"]
        [::std::mem::offset_of!(xen_vnuma_topology_info, domid) - 0usize];
    ["Offset of field: xen_vnuma_topology_info::pad"]
        [::std::mem::offset_of!(xen_vnuma_topology_info, pad) - 2usize];
    ["Offset of field: xen_vnuma_topology_info::nr_vnodes"]
        [::std::mem::offset_of!(xen_vnuma_topology_info, nr_vnodes) - 4usize];
    ["Offset of field: xen_vnuma_topology_info::nr_vcpus"]
        [::std::mem::offset_of!(xen_vnuma_topology_info, nr_vcpus) - 8usize];
    ["Offset of field: xen_vnuma_topology_info::nr_vmemranges"]
        [::std::mem::offset_of!(xen_vnuma_topology_info, nr_vmemranges) - 12usize];
    ["Offset of field: xen_vnuma_topology_info::vdistance"]
        [::std::mem::offset_of!(xen_vnuma_topology_info, vdistance) - 16usize];
    ["Offset of field: xen_vnuma_topology_info::vcpu_to_vnode"]
        [::std::mem::offset_of!(xen_vnuma_topology_info, vcpu_to_vnode) - 24usize];
    ["Offset of field: xen_vnuma_topology_info::vmemrange"]
        [::std::mem::offset_of!(xen_vnuma_topology_info, vmemrange) - 32usize];
};
impl Default for xen_vnuma_topology_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_vnuma_topology_info_t = xen_vnuma_topology_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_vnuma_topology_info_t {
    pub p: *mut xen_vnuma_topology_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_vnuma_topology_info_t"]
        [::std::mem::size_of::<__guest_handle_xen_vnuma_topology_info_t>() - 8usize];
    ["Alignment of __guest_handle_xen_vnuma_topology_info_t"]
        [::std::mem::align_of::<__guest_handle_xen_vnuma_topology_info_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_vnuma_topology_info_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_vnuma_topology_info_t, p) - 0usize];
};
impl Default for __guest_handle_xen_vnuma_topology_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_vnuma_topology_info_t {
    pub p: *const xen_vnuma_topology_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_vnuma_topology_info_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_vnuma_topology_info_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_vnuma_topology_info_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_vnuma_topology_info_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_vnuma_topology_info_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_vnuma_topology_info_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_vnuma_topology_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_createdomain {
    pub ssidref: u32,
    pub handle: xen_domain_handle_t,
    pub flags: u32,
    pub iommu_opts: u32,
    pub max_vcpus: u32,
    pub max_evtchn_port: u32,
    pub max_grant_frames: i32,
    pub max_maptrack_frames: i32,
    pub grant_opts: u32,
    pub altp2m: xen_domctl_createdomain__bindgen_ty_1,
    pub vmtrace_size: u32,
    pub cpupool_id: u32,
    pub arch: xen_arch_domainconfig,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_createdomain__bindgen_ty_1 {
    pub opts: u16,
    pub nr: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_createdomain__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_createdomain__bindgen_ty_1>() - 4usize];
    ["Alignment of xen_domctl_createdomain__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_createdomain__bindgen_ty_1>() - 2usize];
    ["Offset of field: xen_domctl_createdomain__bindgen_ty_1::opts"]
        [::std::mem::offset_of!(xen_domctl_createdomain__bindgen_ty_1, opts) - 0usize];
    ["Offset of field: xen_domctl_createdomain__bindgen_ty_1::nr"]
        [::std::mem::offset_of!(xen_domctl_createdomain__bindgen_ty_1, nr) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_createdomain"][::std::mem::size_of::<xen_domctl_createdomain>() - 68usize];
    ["Alignment of xen_domctl_createdomain"]
        [::std::mem::align_of::<xen_domctl_createdomain>() - 4usize];
    ["Offset of field: xen_domctl_createdomain::ssidref"]
        [::std::mem::offset_of!(xen_domctl_createdomain, ssidref) - 0usize];
    ["Offset of field: xen_domctl_createdomain::handle"]
        [::std::mem::offset_of!(xen_domctl_createdomain, handle) - 4usize];
    ["Offset of field: xen_domctl_createdomain::flags"]
        [::std::mem::offset_of!(xen_domctl_createdomain, flags) - 20usize];
    ["Offset of field: xen_domctl_createdomain::iommu_opts"]
        [::std::mem::offset_of!(xen_domctl_createdomain, iommu_opts) - 24usize];
    ["Offset of field: xen_domctl_createdomain::max_vcpus"]
        [::std::mem::offset_of!(xen_domctl_createdomain, max_vcpus) - 28usize];
    ["Offset of field: xen_domctl_createdomain::max_evtchn_port"]
        [::std::mem::offset_of!(xen_domctl_createdomain, max_evtchn_port) - 32usize];
    ["Offset of field: xen_domctl_createdomain::max_grant_frames"]
        [::std::mem::offset_of!(xen_domctl_createdomain, max_grant_frames) - 36usize];
    ["Offset of field: xen_domctl_createdomain::max_maptrack_frames"]
        [::std::mem::offset_of!(xen_domctl_createdomain, max_maptrack_frames) - 40usize];
    ["Offset of field: xen_domctl_createdomain::grant_opts"]
        [::std::mem::offset_of!(xen_domctl_createdomain, grant_opts) - 44usize];
    ["Offset of field: xen_domctl_createdomain::altp2m"]
        [::std::mem::offset_of!(xen_domctl_createdomain, altp2m) - 48usize];
    ["Offset of field: xen_domctl_createdomain::vmtrace_size"]
        [::std::mem::offset_of!(xen_domctl_createdomain, vmtrace_size) - 52usize];
    ["Offset of field: xen_domctl_createdomain::cpupool_id"]
        [::std::mem::offset_of!(xen_domctl_createdomain, cpupool_id) - 56usize];
    ["Offset of field: xen_domctl_createdomain::arch"]
        [::std::mem::offset_of!(xen_domctl_createdomain, arch) - 60usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_getdomaininfo {
    pub domain: domid_t,
    pub pad1: u16,
    pub flags: u32,
    pub tot_pages: u64,
    pub max_pages: u64,
    pub outstanding_pages: u64,
    pub shr_pages: u64,
    pub paged_pages: u64,
    pub shared_info_frame: u64,
    pub cpu_time: u64,
    pub nr_online_vcpus: u32,
    pub max_vcpu_id: u32,
    pub ssidref: u32,
    pub handle: xen_domain_handle_t,
    pub cpupool: u32,
    pub gpaddr_bits: u8,
    pub pad2: [u8; 7usize],
    pub arch_config: xen_arch_domainconfig,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_getdomaininfo"]
        [::std::mem::size_of::<xen_domctl_getdomaininfo>() - 112usize];
    ["Alignment of xen_domctl_getdomaininfo"]
        [::std::mem::align_of::<xen_domctl_getdomaininfo>() - 8usize];
    ["Offset of field: xen_domctl_getdomaininfo::domain"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, domain) - 0usize];
    ["Offset of field: xen_domctl_getdomaininfo::pad1"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, pad1) - 2usize];
    ["Offset of field: xen_domctl_getdomaininfo::flags"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, flags) - 4usize];
    ["Offset of field: xen_domctl_getdomaininfo::tot_pages"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, tot_pages) - 8usize];
    ["Offset of field: xen_domctl_getdomaininfo::max_pages"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, max_pages) - 16usize];
    ["Offset of field: xen_domctl_getdomaininfo::outstanding_pages"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, outstanding_pages) - 24usize];
    ["Offset of field: xen_domctl_getdomaininfo::shr_pages"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, shr_pages) - 32usize];
    ["Offset of field: xen_domctl_getdomaininfo::paged_pages"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, paged_pages) - 40usize];
    ["Offset of field: xen_domctl_getdomaininfo::shared_info_frame"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, shared_info_frame) - 48usize];
    ["Offset of field: xen_domctl_getdomaininfo::cpu_time"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, cpu_time) - 56usize];
    ["Offset of field: xen_domctl_getdomaininfo::nr_online_vcpus"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, nr_online_vcpus) - 64usize];
    ["Offset of field: xen_domctl_getdomaininfo::max_vcpu_id"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, max_vcpu_id) - 68usize];
    ["Offset of field: xen_domctl_getdomaininfo::ssidref"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, ssidref) - 72usize];
    ["Offset of field: xen_domctl_getdomaininfo::handle"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, handle) - 76usize];
    ["Offset of field: xen_domctl_getdomaininfo::cpupool"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, cpupool) - 92usize];
    ["Offset of field: xen_domctl_getdomaininfo::gpaddr_bits"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, gpaddr_bits) - 96usize];
    ["Offset of field: xen_domctl_getdomaininfo::pad2"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, pad2) - 97usize];
    ["Offset of field: xen_domctl_getdomaininfo::arch_config"]
        [::std::mem::offset_of!(xen_domctl_getdomaininfo, arch_config) - 104usize];
};
pub type xen_domctl_getdomaininfo_t = xen_domctl_getdomaininfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_getdomaininfo_t {
    pub p: *mut xen_domctl_getdomaininfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_domctl_getdomaininfo_t"]
        [::std::mem::size_of::<__guest_handle_xen_domctl_getdomaininfo_t>() - 8usize];
    ["Alignment of __guest_handle_xen_domctl_getdomaininfo_t"]
        [::std::mem::align_of::<__guest_handle_xen_domctl_getdomaininfo_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_domctl_getdomaininfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_domctl_getdomaininfo_t, p) - 0usize];
};
impl Default for __guest_handle_xen_domctl_getdomaininfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_getdomaininfo_t {
    pub p: *const xen_domctl_getdomaininfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_domctl_getdomaininfo_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_domctl_getdomaininfo_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_domctl_getdomaininfo_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_domctl_getdomaininfo_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_domctl_getdomaininfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_domctl_getdomaininfo_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_domctl_getdomaininfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_getpageframeinfo3 {
    pub num: u64,
    pub array: __guest_handle_xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_getpageframeinfo3"]
        [::std::mem::size_of::<xen_domctl_getpageframeinfo3>() - 16usize];
    ["Alignment of xen_domctl_getpageframeinfo3"]
        [::std::mem::align_of::<xen_domctl_getpageframeinfo3>() - 8usize];
    ["Offset of field: xen_domctl_getpageframeinfo3::num"]
        [::std::mem::offset_of!(xen_domctl_getpageframeinfo3, num) - 0usize];
    ["Offset of field: xen_domctl_getpageframeinfo3::array"]
        [::std::mem::offset_of!(xen_domctl_getpageframeinfo3, array) - 8usize];
};
impl Default for xen_domctl_getpageframeinfo3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_shadow_op_stats {
    pub fault_count: u32,
    pub dirty_count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_shadow_op_stats"]
        [::std::mem::size_of::<xen_domctl_shadow_op_stats>() - 8usize];
    ["Alignment of xen_domctl_shadow_op_stats"]
        [::std::mem::align_of::<xen_domctl_shadow_op_stats>() - 4usize];
    ["Offset of field: xen_domctl_shadow_op_stats::fault_count"]
        [::std::mem::offset_of!(xen_domctl_shadow_op_stats, fault_count) - 0usize];
    ["Offset of field: xen_domctl_shadow_op_stats::dirty_count"]
        [::std::mem::offset_of!(xen_domctl_shadow_op_stats, dirty_count) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_shadow_op {
    pub op: u32,
    pub mode: u32,
    pub mb: u32,
    pub dirty_bitmap: __guest_handle_uint8,
    pub pages: u64,
    pub stats: xen_domctl_shadow_op_stats,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_shadow_op"][::std::mem::size_of::<xen_domctl_shadow_op>() - 40usize];
    ["Alignment of xen_domctl_shadow_op"][::std::mem::align_of::<xen_domctl_shadow_op>() - 8usize];
    ["Offset of field: xen_domctl_shadow_op::op"]
        [::std::mem::offset_of!(xen_domctl_shadow_op, op) - 0usize];
    ["Offset of field: xen_domctl_shadow_op::mode"]
        [::std::mem::offset_of!(xen_domctl_shadow_op, mode) - 4usize];
    ["Offset of field: xen_domctl_shadow_op::mb"]
        [::std::mem::offset_of!(xen_domctl_shadow_op, mb) - 8usize];
    ["Offset of field: xen_domctl_shadow_op::dirty_bitmap"]
        [::std::mem::offset_of!(xen_domctl_shadow_op, dirty_bitmap) - 16usize];
    ["Offset of field: xen_domctl_shadow_op::pages"]
        [::std::mem::offset_of!(xen_domctl_shadow_op, pages) - 24usize];
    ["Offset of field: xen_domctl_shadow_op::stats"]
        [::std::mem::offset_of!(xen_domctl_shadow_op, stats) - 32usize];
};
impl Default for xen_domctl_shadow_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_max_mem {
    pub max_memkb: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_max_mem"][::std::mem::size_of::<xen_domctl_max_mem>() - 8usize];
    ["Alignment of xen_domctl_max_mem"][::std::mem::align_of::<xen_domctl_max_mem>() - 8usize];
    ["Offset of field: xen_domctl_max_mem::max_memkb"]
        [::std::mem::offset_of!(xen_domctl_max_mem, max_memkb) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vcpucontext {
    pub vcpu: u32,
    pub ctxt: __guest_handle_vcpu_guest_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vcpucontext"][::std::mem::size_of::<xen_domctl_vcpucontext>() - 16usize];
    ["Alignment of xen_domctl_vcpucontext"]
        [::std::mem::align_of::<xen_domctl_vcpucontext>() - 8usize];
    ["Offset of field: xen_domctl_vcpucontext::vcpu"]
        [::std::mem::offset_of!(xen_domctl_vcpucontext, vcpu) - 0usize];
    ["Offset of field: xen_domctl_vcpucontext::ctxt"]
        [::std::mem::offset_of!(xen_domctl_vcpucontext, ctxt) - 8usize];
};
impl Default for xen_domctl_vcpucontext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_getvcpuinfo {
    pub vcpu: u32,
    pub online: u8,
    pub blocked: u8,
    pub running: u8,
    pub cpu_time: u64,
    pub cpu: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_getvcpuinfo"][::std::mem::size_of::<xen_domctl_getvcpuinfo>() - 24usize];
    ["Alignment of xen_domctl_getvcpuinfo"]
        [::std::mem::align_of::<xen_domctl_getvcpuinfo>() - 8usize];
    ["Offset of field: xen_domctl_getvcpuinfo::vcpu"]
        [::std::mem::offset_of!(xen_domctl_getvcpuinfo, vcpu) - 0usize];
    ["Offset of field: xen_domctl_getvcpuinfo::online"]
        [::std::mem::offset_of!(xen_domctl_getvcpuinfo, online) - 4usize];
    ["Offset of field: xen_domctl_getvcpuinfo::blocked"]
        [::std::mem::offset_of!(xen_domctl_getvcpuinfo, blocked) - 5usize];
    ["Offset of field: xen_domctl_getvcpuinfo::running"]
        [::std::mem::offset_of!(xen_domctl_getvcpuinfo, running) - 6usize];
    ["Offset of field: xen_domctl_getvcpuinfo::cpu_time"]
        [::std::mem::offset_of!(xen_domctl_getvcpuinfo, cpu_time) - 8usize];
    ["Offset of field: xen_domctl_getvcpuinfo::cpu"]
        [::std::mem::offset_of!(xen_domctl_getvcpuinfo, cpu) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_nodeaffinity {
    pub nodemap: xenctl_bitmap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_nodeaffinity"][::std::mem::size_of::<xen_domctl_nodeaffinity>() - 16usize];
    ["Alignment of xen_domctl_nodeaffinity"]
        [::std::mem::align_of::<xen_domctl_nodeaffinity>() - 8usize];
    ["Offset of field: xen_domctl_nodeaffinity::nodemap"]
        [::std::mem::offset_of!(xen_domctl_nodeaffinity, nodemap) - 0usize];
};
impl Default for xen_domctl_nodeaffinity {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vcpuaffinity {
    pub vcpu: u32,
    pub flags: u32,
    pub cpumap_hard: xenctl_bitmap,
    pub cpumap_soft: xenctl_bitmap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vcpuaffinity"][::std::mem::size_of::<xen_domctl_vcpuaffinity>() - 40usize];
    ["Alignment of xen_domctl_vcpuaffinity"]
        [::std::mem::align_of::<xen_domctl_vcpuaffinity>() - 8usize];
    ["Offset of field: xen_domctl_vcpuaffinity::vcpu"]
        [::std::mem::offset_of!(xen_domctl_vcpuaffinity, vcpu) - 0usize];
    ["Offset of field: xen_domctl_vcpuaffinity::flags"]
        [::std::mem::offset_of!(xen_domctl_vcpuaffinity, flags) - 4usize];
    ["Offset of field: xen_domctl_vcpuaffinity::cpumap_hard"]
        [::std::mem::offset_of!(xen_domctl_vcpuaffinity, cpumap_hard) - 8usize];
    ["Offset of field: xen_domctl_vcpuaffinity::cpumap_soft"]
        [::std::mem::offset_of!(xen_domctl_vcpuaffinity, cpumap_soft) - 24usize];
};
impl Default for xen_domctl_vcpuaffinity {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_max_vcpus {
    pub max: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_max_vcpus"][::std::mem::size_of::<xen_domctl_max_vcpus>() - 4usize];
    ["Alignment of xen_domctl_max_vcpus"][::std::mem::align_of::<xen_domctl_max_vcpus>() - 4usize];
    ["Offset of field: xen_domctl_max_vcpus::max"]
        [::std::mem::offset_of!(xen_domctl_max_vcpus, max) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_sched_credit {
    pub weight: u16,
    pub cap: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_sched_credit"][::std::mem::size_of::<xen_domctl_sched_credit>() - 4usize];
    ["Alignment of xen_domctl_sched_credit"]
        [::std::mem::align_of::<xen_domctl_sched_credit>() - 2usize];
    ["Offset of field: xen_domctl_sched_credit::weight"]
        [::std::mem::offset_of!(xen_domctl_sched_credit, weight) - 0usize];
    ["Offset of field: xen_domctl_sched_credit::cap"]
        [::std::mem::offset_of!(xen_domctl_sched_credit, cap) - 2usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_sched_credit2 {
    pub weight: u16,
    pub cap: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_sched_credit2"]
        [::std::mem::size_of::<xen_domctl_sched_credit2>() - 4usize];
    ["Alignment of xen_domctl_sched_credit2"]
        [::std::mem::align_of::<xen_domctl_sched_credit2>() - 2usize];
    ["Offset of field: xen_domctl_sched_credit2::weight"]
        [::std::mem::offset_of!(xen_domctl_sched_credit2, weight) - 0usize];
    ["Offset of field: xen_domctl_sched_credit2::cap"]
        [::std::mem::offset_of!(xen_domctl_sched_credit2, cap) - 2usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_sched_rtds {
    pub period: u32,
    pub budget: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_sched_rtds"][::std::mem::size_of::<xen_domctl_sched_rtds>() - 12usize];
    ["Alignment of xen_domctl_sched_rtds"]
        [::std::mem::align_of::<xen_domctl_sched_rtds>() - 4usize];
    ["Offset of field: xen_domctl_sched_rtds::period"]
        [::std::mem::offset_of!(xen_domctl_sched_rtds, period) - 0usize];
    ["Offset of field: xen_domctl_sched_rtds::budget"]
        [::std::mem::offset_of!(xen_domctl_sched_rtds, budget) - 4usize];
    ["Offset of field: xen_domctl_sched_rtds::flags"]
        [::std::mem::offset_of!(xen_domctl_sched_rtds, flags) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_schedparam_vcpu {
    pub u: xen_domctl_schedparam_vcpu__bindgen_ty_1,
    pub vcpuid: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_schedparam_vcpu__bindgen_ty_1 {
    pub credit: xen_domctl_sched_credit,
    pub credit2: xen_domctl_sched_credit2,
    pub rtds: xen_domctl_sched_rtds,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_schedparam_vcpu__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_schedparam_vcpu__bindgen_ty_1>() - 12usize];
    ["Alignment of xen_domctl_schedparam_vcpu__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_schedparam_vcpu__bindgen_ty_1>() - 4usize];
    ["Offset of field: xen_domctl_schedparam_vcpu__bindgen_ty_1::credit"]
        [::std::mem::offset_of!(xen_domctl_schedparam_vcpu__bindgen_ty_1, credit) - 0usize];
    ["Offset of field: xen_domctl_schedparam_vcpu__bindgen_ty_1::credit2"]
        [::std::mem::offset_of!(xen_domctl_schedparam_vcpu__bindgen_ty_1, credit2) - 0usize];
    ["Offset of field: xen_domctl_schedparam_vcpu__bindgen_ty_1::rtds"]
        [::std::mem::offset_of!(xen_domctl_schedparam_vcpu__bindgen_ty_1, rtds) - 0usize];
};
impl Default for xen_domctl_schedparam_vcpu__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_schedparam_vcpu"]
        [::std::mem::size_of::<xen_domctl_schedparam_vcpu>() - 16usize];
    ["Alignment of xen_domctl_schedparam_vcpu"]
        [::std::mem::align_of::<xen_domctl_schedparam_vcpu>() - 4usize];
    ["Offset of field: xen_domctl_schedparam_vcpu::u"]
        [::std::mem::offset_of!(xen_domctl_schedparam_vcpu, u) - 0usize];
    ["Offset of field: xen_domctl_schedparam_vcpu::vcpuid"]
        [::std::mem::offset_of!(xen_domctl_schedparam_vcpu, vcpuid) - 12usize];
};
impl Default for xen_domctl_schedparam_vcpu {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_domctl_schedparam_vcpu_t = xen_domctl_schedparam_vcpu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_schedparam_vcpu_t {
    pub p: *mut xen_domctl_schedparam_vcpu_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_domctl_schedparam_vcpu_t"]
        [::std::mem::size_of::<__guest_handle_xen_domctl_schedparam_vcpu_t>() - 8usize];
    ["Alignment of __guest_handle_xen_domctl_schedparam_vcpu_t"]
        [::std::mem::align_of::<__guest_handle_xen_domctl_schedparam_vcpu_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_domctl_schedparam_vcpu_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_domctl_schedparam_vcpu_t, p) - 0usize];
};
impl Default for __guest_handle_xen_domctl_schedparam_vcpu_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_schedparam_vcpu_t {
    pub p: *const xen_domctl_schedparam_vcpu_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_domctl_schedparam_vcpu_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_domctl_schedparam_vcpu_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_domctl_schedparam_vcpu_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_domctl_schedparam_vcpu_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_domctl_schedparam_vcpu_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_domctl_schedparam_vcpu_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_domctl_schedparam_vcpu_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_scheduler_op {
    pub sched_id: u32,
    pub cmd: u32,
    pub u: xen_domctl_scheduler_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_scheduler_op__bindgen_ty_1 {
    pub credit: xen_domctl_sched_credit,
    pub credit2: xen_domctl_sched_credit2,
    pub rtds: xen_domctl_sched_rtds,
    pub v: xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1 {
    pub vcpus: __guest_handle_xen_domctl_schedparam_vcpu_t,
    pub nr_vcpus: u32,
    pub padding: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1::vcpus"][::std::mem::offset_of!(
        xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
        vcpus
    ) - 0usize];
    ["Offset of field: xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1::nr_vcpus"][::std::mem::offset_of!(
        xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
        nr_vcpus
    ) - 8usize];
    ["Offset of field: xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1::padding"][::std::mem::offset_of!(
        xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
        padding
    ) - 12usize];
};
impl Default for xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_scheduler_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_scheduler_op__bindgen_ty_1>() - 16usize];
    ["Alignment of xen_domctl_scheduler_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_scheduler_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_domctl_scheduler_op__bindgen_ty_1::credit"]
        [::std::mem::offset_of!(xen_domctl_scheduler_op__bindgen_ty_1, credit) - 0usize];
    ["Offset of field: xen_domctl_scheduler_op__bindgen_ty_1::credit2"]
        [::std::mem::offset_of!(xen_domctl_scheduler_op__bindgen_ty_1, credit2) - 0usize];
    ["Offset of field: xen_domctl_scheduler_op__bindgen_ty_1::rtds"]
        [::std::mem::offset_of!(xen_domctl_scheduler_op__bindgen_ty_1, rtds) - 0usize];
    ["Offset of field: xen_domctl_scheduler_op__bindgen_ty_1::v"]
        [::std::mem::offset_of!(xen_domctl_scheduler_op__bindgen_ty_1, v) - 0usize];
};
impl Default for xen_domctl_scheduler_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_scheduler_op"][::std::mem::size_of::<xen_domctl_scheduler_op>() - 24usize];
    ["Alignment of xen_domctl_scheduler_op"]
        [::std::mem::align_of::<xen_domctl_scheduler_op>() - 8usize];
    ["Offset of field: xen_domctl_scheduler_op::sched_id"]
        [::std::mem::offset_of!(xen_domctl_scheduler_op, sched_id) - 0usize];
    ["Offset of field: xen_domctl_scheduler_op::cmd"]
        [::std::mem::offset_of!(xen_domctl_scheduler_op, cmd) - 4usize];
    ["Offset of field: xen_domctl_scheduler_op::u"]
        [::std::mem::offset_of!(xen_domctl_scheduler_op, u) - 8usize];
};
impl Default for xen_domctl_scheduler_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_setdomainhandle {
    pub handle: xen_domain_handle_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_setdomainhandle"]
        [::std::mem::size_of::<xen_domctl_setdomainhandle>() - 16usize];
    ["Alignment of xen_domctl_setdomainhandle"]
        [::std::mem::align_of::<xen_domctl_setdomainhandle>() - 1usize];
    ["Offset of field: xen_domctl_setdomainhandle::handle"]
        [::std::mem::offset_of!(xen_domctl_setdomainhandle, handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_setdebugging {
    pub enable: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_setdebugging"][::std::mem::size_of::<xen_domctl_setdebugging>() - 1usize];
    ["Alignment of xen_domctl_setdebugging"]
        [::std::mem::align_of::<xen_domctl_setdebugging>() - 1usize];
    ["Offset of field: xen_domctl_setdebugging::enable"]
        [::std::mem::offset_of!(xen_domctl_setdebugging, enable) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_irq_permission {
    pub pirq: u32,
    pub allow_access: u8,
    pub pad: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_irq_permission"]
        [::std::mem::size_of::<xen_domctl_irq_permission>() - 8usize];
    ["Alignment of xen_domctl_irq_permission"]
        [::std::mem::align_of::<xen_domctl_irq_permission>() - 4usize];
    ["Offset of field: xen_domctl_irq_permission::pirq"]
        [::std::mem::offset_of!(xen_domctl_irq_permission, pirq) - 0usize];
    ["Offset of field: xen_domctl_irq_permission::allow_access"]
        [::std::mem::offset_of!(xen_domctl_irq_permission, allow_access) - 4usize];
    ["Offset of field: xen_domctl_irq_permission::pad"]
        [::std::mem::offset_of!(xen_domctl_irq_permission, pad) - 5usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_gsi_permission {
    pub gsi: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_gsi_permission"]
        [::std::mem::size_of::<xen_domctl_gsi_permission>() - 8usize];
    ["Alignment of xen_domctl_gsi_permission"]
        [::std::mem::align_of::<xen_domctl_gsi_permission>() - 4usize];
    ["Offset of field: xen_domctl_gsi_permission::gsi"]
        [::std::mem::offset_of!(xen_domctl_gsi_permission, gsi) - 0usize];
    ["Offset of field: xen_domctl_gsi_permission::flags"]
        [::std::mem::offset_of!(xen_domctl_gsi_permission, flags) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_iomem_permission {
    pub first_mfn: u64,
    pub nr_mfns: u64,
    pub allow_access: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_iomem_permission"]
        [::std::mem::size_of::<xen_domctl_iomem_permission>() - 24usize];
    ["Alignment of xen_domctl_iomem_permission"]
        [::std::mem::align_of::<xen_domctl_iomem_permission>() - 8usize];
    ["Offset of field: xen_domctl_iomem_permission::first_mfn"]
        [::std::mem::offset_of!(xen_domctl_iomem_permission, first_mfn) - 0usize];
    ["Offset of field: xen_domctl_iomem_permission::nr_mfns"]
        [::std::mem::offset_of!(xen_domctl_iomem_permission, nr_mfns) - 8usize];
    ["Offset of field: xen_domctl_iomem_permission::allow_access"]
        [::std::mem::offset_of!(xen_domctl_iomem_permission, allow_access) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_ioport_permission {
    pub first_port: u32,
    pub nr_ports: u32,
    pub allow_access: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_ioport_permission"]
        [::std::mem::size_of::<xen_domctl_ioport_permission>() - 12usize];
    ["Alignment of xen_domctl_ioport_permission"]
        [::std::mem::align_of::<xen_domctl_ioport_permission>() - 4usize];
    ["Offset of field: xen_domctl_ioport_permission::first_port"]
        [::std::mem::offset_of!(xen_domctl_ioport_permission, first_port) - 0usize];
    ["Offset of field: xen_domctl_ioport_permission::nr_ports"]
        [::std::mem::offset_of!(xen_domctl_ioport_permission, nr_ports) - 4usize];
    ["Offset of field: xen_domctl_ioport_permission::allow_access"]
        [::std::mem::offset_of!(xen_domctl_ioport_permission, allow_access) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_hypercall_init {
    pub gmfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_hypercall_init"]
        [::std::mem::size_of::<xen_domctl_hypercall_init>() - 8usize];
    ["Alignment of xen_domctl_hypercall_init"]
        [::std::mem::align_of::<xen_domctl_hypercall_init>() - 8usize];
    ["Offset of field: xen_domctl_hypercall_init::gmfn"]
        [::std::mem::offset_of!(xen_domctl_hypercall_init, gmfn) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_settimeoffset {
    pub time_offset_seconds: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_settimeoffset"]
        [::std::mem::size_of::<xen_domctl_settimeoffset>() - 8usize];
    ["Alignment of xen_domctl_settimeoffset"]
        [::std::mem::align_of::<xen_domctl_settimeoffset>() - 8usize];
    ["Offset of field: xen_domctl_settimeoffset::time_offset_seconds"]
        [::std::mem::offset_of!(xen_domctl_settimeoffset, time_offset_seconds) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_hvmcontext {
    pub size: u32,
    pub buffer: __guest_handle_uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_hvmcontext"][::std::mem::size_of::<xen_domctl_hvmcontext>() - 16usize];
    ["Alignment of xen_domctl_hvmcontext"]
        [::std::mem::align_of::<xen_domctl_hvmcontext>() - 8usize];
    ["Offset of field: xen_domctl_hvmcontext::size"]
        [::std::mem::offset_of!(xen_domctl_hvmcontext, size) - 0usize];
    ["Offset of field: xen_domctl_hvmcontext::buffer"]
        [::std::mem::offset_of!(xen_domctl_hvmcontext, buffer) - 8usize];
};
impl Default for xen_domctl_hvmcontext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_address_size {
    pub size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_address_size"][::std::mem::size_of::<xen_domctl_address_size>() - 4usize];
    ["Alignment of xen_domctl_address_size"]
        [::std::mem::align_of::<xen_domctl_address_size>() - 4usize];
    ["Offset of field: xen_domctl_address_size::size"]
        [::std::mem::offset_of!(xen_domctl_address_size, size) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_sendtrigger {
    pub trigger: u32,
    pub vcpu: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_sendtrigger"][::std::mem::size_of::<xen_domctl_sendtrigger>() - 8usize];
    ["Alignment of xen_domctl_sendtrigger"]
        [::std::mem::align_of::<xen_domctl_sendtrigger>() - 4usize];
    ["Offset of field: xen_domctl_sendtrigger::trigger"]
        [::std::mem::offset_of!(xen_domctl_sendtrigger, trigger) - 0usize];
    ["Offset of field: xen_domctl_sendtrigger::vcpu"]
        [::std::mem::offset_of!(xen_domctl_sendtrigger, vcpu) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_assign_device {
    pub dev: u32,
    pub flags: u32,
    pub u: xen_domctl_assign_device__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_assign_device__bindgen_ty_1 {
    pub pci: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1,
    pub dt: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1 {
    pub machine_sbdf: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1::machine_sbdf"][::std::mem::offset_of!(
        xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1,
        machine_sbdf
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2 {
    pub size: u32,
    pub path: __guest_handle_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2::size"][::std::mem::offset_of!(
        xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2,
        size
    ) - 0usize];
    ["Offset of field: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2::path"][::std::mem::offset_of!(
        xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2,
        path
    ) - 8usize];
};
impl Default for xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_assign_device__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_assign_device__bindgen_ty_1>() - 16usize];
    ["Alignment of xen_domctl_assign_device__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_assign_device__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_domctl_assign_device__bindgen_ty_1::pci"]
        [::std::mem::offset_of!(xen_domctl_assign_device__bindgen_ty_1, pci) - 0usize];
    ["Offset of field: xen_domctl_assign_device__bindgen_ty_1::dt"]
        [::std::mem::offset_of!(xen_domctl_assign_device__bindgen_ty_1, dt) - 0usize];
};
impl Default for xen_domctl_assign_device__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_assign_device"]
        [::std::mem::size_of::<xen_domctl_assign_device>() - 24usize];
    ["Alignment of xen_domctl_assign_device"]
        [::std::mem::align_of::<xen_domctl_assign_device>() - 8usize];
    ["Offset of field: xen_domctl_assign_device::dev"]
        [::std::mem::offset_of!(xen_domctl_assign_device, dev) - 0usize];
    ["Offset of field: xen_domctl_assign_device::flags"]
        [::std::mem::offset_of!(xen_domctl_assign_device, flags) - 4usize];
    ["Offset of field: xen_domctl_assign_device::u"]
        [::std::mem::offset_of!(xen_domctl_assign_device, u) - 8usize];
};
impl Default for xen_domctl_assign_device {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_get_device_group {
    pub machine_sbdf: u32,
    pub max_sdevs: u32,
    pub num_sdevs: u32,
    pub sdev_array: __guest_handle_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_get_device_group"]
        [::std::mem::size_of::<xen_domctl_get_device_group>() - 24usize];
    ["Alignment of xen_domctl_get_device_group"]
        [::std::mem::align_of::<xen_domctl_get_device_group>() - 8usize];
    ["Offset of field: xen_domctl_get_device_group::machine_sbdf"]
        [::std::mem::offset_of!(xen_domctl_get_device_group, machine_sbdf) - 0usize];
    ["Offset of field: xen_domctl_get_device_group::max_sdevs"]
        [::std::mem::offset_of!(xen_domctl_get_device_group, max_sdevs) - 4usize];
    ["Offset of field: xen_domctl_get_device_group::num_sdevs"]
        [::std::mem::offset_of!(xen_domctl_get_device_group, num_sdevs) - 8usize];
    ["Offset of field: xen_domctl_get_device_group::sdev_array"]
        [::std::mem::offset_of!(xen_domctl_get_device_group, sdev_array) - 16usize];
};
impl Default for xen_domctl_get_device_group {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const pt_irq_type_PT_IRQ_TYPE_PCI: pt_irq_type = 0;
pub const pt_irq_type_PT_IRQ_TYPE_ISA: pt_irq_type = 1;
pub const pt_irq_type_PT_IRQ_TYPE_MSI: pt_irq_type = 2;
pub const pt_irq_type_PT_IRQ_TYPE_MSI_TRANSLATE: pt_irq_type = 3;
pub const pt_irq_type_PT_IRQ_TYPE_SPI: pt_irq_type = 4;
pub type pt_irq_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_bind_pt_irq {
    pub machine_irq: u32,
    pub irq_type: u32,
    pub u: xen_domctl_bind_pt_irq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_bind_pt_irq__bindgen_ty_1 {
    pub isa: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1,
    pub pci: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2,
    pub msi: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3,
    pub spi: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1 {
    pub isa_irq: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Alignment of xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1::isa_irq"][::std::mem::offset_of!(
        xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1,
        isa_irq
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2 {
    pub bus: u8,
    pub device: u8,
    pub intx: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2>() - 3usize];
    ["Alignment of xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2::bus"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2, bus) - 0usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2::device"][::std::mem::offset_of!(
        xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2,
        device
    ) - 1usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2::intx"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2, intx) - 2usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3 {
    pub gvec: u8,
    pub gflags: u32,
    pub gtable: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3::gvec"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3, gvec) - 0usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3::gflags"][::std::mem::offset_of!(
        xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3,
        gflags
    ) - 4usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3::gtable"][::std::mem::offset_of!(
        xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3,
        gtable
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4 {
    pub spi: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Alignment of xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4>() - 2usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4::spi"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4, spi) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_bind_pt_irq__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1>() - 16usize];
    ["Alignment of xen_domctl_bind_pt_irq__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1::isa"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq__bindgen_ty_1, isa) - 0usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1::pci"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq__bindgen_ty_1, pci) - 0usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1::msi"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq__bindgen_ty_1, msi) - 0usize];
    ["Offset of field: xen_domctl_bind_pt_irq__bindgen_ty_1::spi"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq__bindgen_ty_1, spi) - 0usize];
};
impl Default for xen_domctl_bind_pt_irq__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_bind_pt_irq"][::std::mem::size_of::<xen_domctl_bind_pt_irq>() - 24usize];
    ["Alignment of xen_domctl_bind_pt_irq"]
        [::std::mem::align_of::<xen_domctl_bind_pt_irq>() - 8usize];
    ["Offset of field: xen_domctl_bind_pt_irq::machine_irq"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq, machine_irq) - 0usize];
    ["Offset of field: xen_domctl_bind_pt_irq::irq_type"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq, irq_type) - 4usize];
    ["Offset of field: xen_domctl_bind_pt_irq::u"]
        [::std::mem::offset_of!(xen_domctl_bind_pt_irq, u) - 8usize];
};
impl Default for xen_domctl_bind_pt_irq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_memory_mapping {
    pub first_gfn: u64,
    pub first_mfn: u64,
    pub nr_mfns: u64,
    pub add_mapping: u32,
    pub padding: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_memory_mapping"]
        [::std::mem::size_of::<xen_domctl_memory_mapping>() - 32usize];
    ["Alignment of xen_domctl_memory_mapping"]
        [::std::mem::align_of::<xen_domctl_memory_mapping>() - 8usize];
    ["Offset of field: xen_domctl_memory_mapping::first_gfn"]
        [::std::mem::offset_of!(xen_domctl_memory_mapping, first_gfn) - 0usize];
    ["Offset of field: xen_domctl_memory_mapping::first_mfn"]
        [::std::mem::offset_of!(xen_domctl_memory_mapping, first_mfn) - 8usize];
    ["Offset of field: xen_domctl_memory_mapping::nr_mfns"]
        [::std::mem::offset_of!(xen_domctl_memory_mapping, nr_mfns) - 16usize];
    ["Offset of field: xen_domctl_memory_mapping::add_mapping"]
        [::std::mem::offset_of!(xen_domctl_memory_mapping, add_mapping) - 24usize];
    ["Offset of field: xen_domctl_memory_mapping::padding"]
        [::std::mem::offset_of!(xen_domctl_memory_mapping, padding) - 28usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_ioport_mapping {
    pub first_gport: u32,
    pub first_mport: u32,
    pub nr_ports: u32,
    pub add_mapping: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_ioport_mapping"]
        [::std::mem::size_of::<xen_domctl_ioport_mapping>() - 16usize];
    ["Alignment of xen_domctl_ioport_mapping"]
        [::std::mem::align_of::<xen_domctl_ioport_mapping>() - 4usize];
    ["Offset of field: xen_domctl_ioport_mapping::first_gport"]
        [::std::mem::offset_of!(xen_domctl_ioport_mapping, first_gport) - 0usize];
    ["Offset of field: xen_domctl_ioport_mapping::first_mport"]
        [::std::mem::offset_of!(xen_domctl_ioport_mapping, first_mport) - 4usize];
    ["Offset of field: xen_domctl_ioport_mapping::nr_ports"]
        [::std::mem::offset_of!(xen_domctl_ioport_mapping, nr_ports) - 8usize];
    ["Offset of field: xen_domctl_ioport_mapping::add_mapping"]
        [::std::mem::offset_of!(xen_domctl_ioport_mapping, add_mapping) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_ext_vcpucontext {
    pub vcpu: u32,
    pub size: u32,
    pub syscall32_callback_eip: u64,
    pub sysenter_callback_eip: u64,
    pub syscall32_callback_cs: u16,
    pub sysenter_callback_cs: u16,
    pub syscall32_disables_events: u8,
    pub sysenter_disables_events: u8,
    pub __bindgen_anon_1: xen_domctl_ext_vcpucontext__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_ext_vcpucontext__bindgen_ty_1 {
    pub mcg_cap: u64,
    pub vmce: hvm_vmce_vcpu,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_ext_vcpucontext__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_ext_vcpucontext__bindgen_ty_1>() - 32usize];
    ["Alignment of xen_domctl_ext_vcpucontext__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_ext_vcpucontext__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_domctl_ext_vcpucontext__bindgen_ty_1::mcg_cap"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext__bindgen_ty_1, mcg_cap) - 0usize];
    ["Offset of field: xen_domctl_ext_vcpucontext__bindgen_ty_1::vmce"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext__bindgen_ty_1, vmce) - 0usize];
};
impl Default for xen_domctl_ext_vcpucontext__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_ext_vcpucontext"]
        [::std::mem::size_of::<xen_domctl_ext_vcpucontext>() - 64usize];
    ["Alignment of xen_domctl_ext_vcpucontext"]
        [::std::mem::align_of::<xen_domctl_ext_vcpucontext>() - 8usize];
    ["Offset of field: xen_domctl_ext_vcpucontext::vcpu"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext, vcpu) - 0usize];
    ["Offset of field: xen_domctl_ext_vcpucontext::size"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext, size) - 4usize];
    ["Offset of field: xen_domctl_ext_vcpucontext::syscall32_callback_eip"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext, syscall32_callback_eip) - 8usize];
    ["Offset of field: xen_domctl_ext_vcpucontext::sysenter_callback_eip"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext, sysenter_callback_eip) - 16usize];
    ["Offset of field: xen_domctl_ext_vcpucontext::syscall32_callback_cs"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext, syscall32_callback_cs) - 24usize];
    ["Offset of field: xen_domctl_ext_vcpucontext::sysenter_callback_cs"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext, sysenter_callback_cs) - 26usize];
    ["Offset of field: xen_domctl_ext_vcpucontext::syscall32_disables_events"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext, syscall32_disables_events) - 28usize];
    ["Offset of field: xen_domctl_ext_vcpucontext::sysenter_disables_events"]
        [::std::mem::offset_of!(xen_domctl_ext_vcpucontext, sysenter_disables_events) - 29usize];
};
impl Default for xen_domctl_ext_vcpucontext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_set_target {
    pub target: domid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_set_target"][::std::mem::size_of::<xen_domctl_set_target>() - 2usize];
    ["Alignment of xen_domctl_set_target"]
        [::std::mem::align_of::<xen_domctl_set_target>() - 2usize];
    ["Offset of field: xen_domctl_set_target::target"]
        [::std::mem::offset_of!(xen_domctl_set_target, target) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_cpu_policy {
    pub nr_leaves: u32,
    pub nr_msrs: u32,
    pub leaves: __guest_handle_xen_cpuid_leaf_t,
    pub msrs: __guest_handle_xen_msr_entry_t,
    pub err_leaf: u32,
    pub err_subleaf: u32,
    pub err_msr: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_cpu_policy"][::std::mem::size_of::<xen_domctl_cpu_policy>() - 40usize];
    ["Alignment of xen_domctl_cpu_policy"]
        [::std::mem::align_of::<xen_domctl_cpu_policy>() - 8usize];
    ["Offset of field: xen_domctl_cpu_policy::nr_leaves"]
        [::std::mem::offset_of!(xen_domctl_cpu_policy, nr_leaves) - 0usize];
    ["Offset of field: xen_domctl_cpu_policy::nr_msrs"]
        [::std::mem::offset_of!(xen_domctl_cpu_policy, nr_msrs) - 4usize];
    ["Offset of field: xen_domctl_cpu_policy::leaves"]
        [::std::mem::offset_of!(xen_domctl_cpu_policy, leaves) - 8usize];
    ["Offset of field: xen_domctl_cpu_policy::msrs"]
        [::std::mem::offset_of!(xen_domctl_cpu_policy, msrs) - 16usize];
    ["Offset of field: xen_domctl_cpu_policy::err_leaf"]
        [::std::mem::offset_of!(xen_domctl_cpu_policy, err_leaf) - 24usize];
    ["Offset of field: xen_domctl_cpu_policy::err_subleaf"]
        [::std::mem::offset_of!(xen_domctl_cpu_policy, err_subleaf) - 28usize];
    ["Offset of field: xen_domctl_cpu_policy::err_msr"]
        [::std::mem::offset_of!(xen_domctl_cpu_policy, err_msr) - 32usize];
};
impl Default for xen_domctl_cpu_policy {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_domctl_cpu_policy_t = xen_domctl_cpu_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_cpu_policy_t {
    pub p: *mut xen_domctl_cpu_policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_domctl_cpu_policy_t"]
        [::std::mem::size_of::<__guest_handle_xen_domctl_cpu_policy_t>() - 8usize];
    ["Alignment of __guest_handle_xen_domctl_cpu_policy_t"]
        [::std::mem::align_of::<__guest_handle_xen_domctl_cpu_policy_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_domctl_cpu_policy_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_domctl_cpu_policy_t, p) - 0usize];
};
impl Default for __guest_handle_xen_domctl_cpu_policy_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_cpu_policy_t {
    pub p: *const xen_domctl_cpu_policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_domctl_cpu_policy_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_domctl_cpu_policy_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_domctl_cpu_policy_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_domctl_cpu_policy_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_domctl_cpu_policy_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_domctl_cpu_policy_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_domctl_cpu_policy_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_subscribe {
    pub port: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_subscribe"][::std::mem::size_of::<xen_domctl_subscribe>() - 4usize];
    ["Alignment of xen_domctl_subscribe"][::std::mem::align_of::<xen_domctl_subscribe>() - 4usize];
    ["Offset of field: xen_domctl_subscribe::port"]
        [::std::mem::offset_of!(xen_domctl_subscribe, port) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_debug_op {
    pub op: u32,
    pub vcpu: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_debug_op"][::std::mem::size_of::<xen_domctl_debug_op>() - 8usize];
    ["Alignment of xen_domctl_debug_op"][::std::mem::align_of::<xen_domctl_debug_op>() - 4usize];
    ["Offset of field: xen_domctl_debug_op::op"]
        [::std::mem::offset_of!(xen_domctl_debug_op, op) - 0usize];
    ["Offset of field: xen_domctl_debug_op::vcpu"]
        [::std::mem::offset_of!(xen_domctl_debug_op, vcpu) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_hvmcontext_partial {
    pub type_: u32,
    pub instance: u32,
    pub bufsz: u64,
    pub buffer: __guest_handle_uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_hvmcontext_partial"]
        [::std::mem::size_of::<xen_domctl_hvmcontext_partial>() - 24usize];
    ["Alignment of xen_domctl_hvmcontext_partial"]
        [::std::mem::align_of::<xen_domctl_hvmcontext_partial>() - 8usize];
    ["Offset of field: xen_domctl_hvmcontext_partial::type_"]
        [::std::mem::offset_of!(xen_domctl_hvmcontext_partial, type_) - 0usize];
    ["Offset of field: xen_domctl_hvmcontext_partial::instance"]
        [::std::mem::offset_of!(xen_domctl_hvmcontext_partial, instance) - 4usize];
    ["Offset of field: xen_domctl_hvmcontext_partial::bufsz"]
        [::std::mem::offset_of!(xen_domctl_hvmcontext_partial, bufsz) - 8usize];
    ["Offset of field: xen_domctl_hvmcontext_partial::buffer"]
        [::std::mem::offset_of!(xen_domctl_hvmcontext_partial, buffer) - 16usize];
};
impl Default for xen_domctl_hvmcontext_partial {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_tsc_info {
    pub tsc_mode: u32,
    pub gtsc_khz: u32,
    pub incarnation: u32,
    pub pad: u32,
    pub elapsed_nsec: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_tsc_info"][::std::mem::size_of::<xen_domctl_tsc_info>() - 24usize];
    ["Alignment of xen_domctl_tsc_info"][::std::mem::align_of::<xen_domctl_tsc_info>() - 8usize];
    ["Offset of field: xen_domctl_tsc_info::tsc_mode"]
        [::std::mem::offset_of!(xen_domctl_tsc_info, tsc_mode) - 0usize];
    ["Offset of field: xen_domctl_tsc_info::gtsc_khz"]
        [::std::mem::offset_of!(xen_domctl_tsc_info, gtsc_khz) - 4usize];
    ["Offset of field: xen_domctl_tsc_info::incarnation"]
        [::std::mem::offset_of!(xen_domctl_tsc_info, incarnation) - 8usize];
    ["Offset of field: xen_domctl_tsc_info::pad"]
        [::std::mem::offset_of!(xen_domctl_tsc_info, pad) - 12usize];
    ["Offset of field: xen_domctl_tsc_info::elapsed_nsec"]
        [::std::mem::offset_of!(xen_domctl_tsc_info, elapsed_nsec) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_gdbsx_memio {
    pub pgd3val: u64,
    pub gva: u64,
    pub uva: u64,
    pub len: u32,
    pub gwr: u8,
    pub remain: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_gdbsx_memio"][::std::mem::size_of::<xen_domctl_gdbsx_memio>() - 40usize];
    ["Alignment of xen_domctl_gdbsx_memio"]
        [::std::mem::align_of::<xen_domctl_gdbsx_memio>() - 8usize];
    ["Offset of field: xen_domctl_gdbsx_memio::pgd3val"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_memio, pgd3val) - 0usize];
    ["Offset of field: xen_domctl_gdbsx_memio::gva"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_memio, gva) - 8usize];
    ["Offset of field: xen_domctl_gdbsx_memio::uva"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_memio, uva) - 16usize];
    ["Offset of field: xen_domctl_gdbsx_memio::len"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_memio, len) - 24usize];
    ["Offset of field: xen_domctl_gdbsx_memio::gwr"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_memio, gwr) - 28usize];
    ["Offset of field: xen_domctl_gdbsx_memio::remain"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_memio, remain) - 32usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_gdbsx_pauseunp_vcpu {
    pub vcpu: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_gdbsx_pauseunp_vcpu"]
        [::std::mem::size_of::<xen_domctl_gdbsx_pauseunp_vcpu>() - 4usize];
    ["Alignment of xen_domctl_gdbsx_pauseunp_vcpu"]
        [::std::mem::align_of::<xen_domctl_gdbsx_pauseunp_vcpu>() - 4usize];
    ["Offset of field: xen_domctl_gdbsx_pauseunp_vcpu::vcpu"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_pauseunp_vcpu, vcpu) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_gdbsx_domstatus {
    pub paused: u8,
    pub vcpu_id: u32,
    pub vcpu_ev: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_gdbsx_domstatus"]
        [::std::mem::size_of::<xen_domctl_gdbsx_domstatus>() - 12usize];
    ["Alignment of xen_domctl_gdbsx_domstatus"]
        [::std::mem::align_of::<xen_domctl_gdbsx_domstatus>() - 4usize];
    ["Offset of field: xen_domctl_gdbsx_domstatus::paused"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_domstatus, paused) - 0usize];
    ["Offset of field: xen_domctl_gdbsx_domstatus::vcpu_id"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_domstatus, vcpu_id) - 4usize];
    ["Offset of field: xen_domctl_gdbsx_domstatus::vcpu_ev"]
        [::std::mem::offset_of!(xen_domctl_gdbsx_domstatus, vcpu_ev) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vm_event_op {
    pub op: u32,
    pub mode: u32,
    pub u: xen_domctl_vm_event_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_vm_event_op__bindgen_ty_1 {
    pub enable: xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1 {
    pub port: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1::port"]
        [::std::mem::offset_of!(xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1, port) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vm_event_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_vm_event_op__bindgen_ty_1>() - 4usize];
    ["Alignment of xen_domctl_vm_event_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_vm_event_op__bindgen_ty_1>() - 4usize];
    ["Offset of field: xen_domctl_vm_event_op__bindgen_ty_1::enable"]
        [::std::mem::offset_of!(xen_domctl_vm_event_op__bindgen_ty_1, enable) - 0usize];
    ["Offset of field: xen_domctl_vm_event_op__bindgen_ty_1::version"]
        [::std::mem::offset_of!(xen_domctl_vm_event_op__bindgen_ty_1, version) - 0usize];
};
impl Default for xen_domctl_vm_event_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vm_event_op"][::std::mem::size_of::<xen_domctl_vm_event_op>() - 12usize];
    ["Alignment of xen_domctl_vm_event_op"]
        [::std::mem::align_of::<xen_domctl_vm_event_op>() - 4usize];
    ["Offset of field: xen_domctl_vm_event_op::op"]
        [::std::mem::offset_of!(xen_domctl_vm_event_op, op) - 0usize];
    ["Offset of field: xen_domctl_vm_event_op::mode"]
        [::std::mem::offset_of!(xen_domctl_vm_event_op, mode) - 4usize];
    ["Offset of field: xen_domctl_vm_event_op::u"]
        [::std::mem::offset_of!(xen_domctl_vm_event_op, u) - 8usize];
};
impl Default for xen_domctl_vm_event_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_mem_sharing_op {
    pub op: u8,
    pub u: xen_domctl_mem_sharing_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_mem_sharing_op__bindgen_ty_1 {
    pub enable: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_mem_sharing_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_mem_sharing_op__bindgen_ty_1>() - 1usize];
    ["Alignment of xen_domctl_mem_sharing_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_mem_sharing_op__bindgen_ty_1>() - 1usize];
    ["Offset of field: xen_domctl_mem_sharing_op__bindgen_ty_1::enable"]
        [::std::mem::offset_of!(xen_domctl_mem_sharing_op__bindgen_ty_1, enable) - 0usize];
};
impl Default for xen_domctl_mem_sharing_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_mem_sharing_op"]
        [::std::mem::size_of::<xen_domctl_mem_sharing_op>() - 2usize];
    ["Alignment of xen_domctl_mem_sharing_op"]
        [::std::mem::align_of::<xen_domctl_mem_sharing_op>() - 1usize];
    ["Offset of field: xen_domctl_mem_sharing_op::op"]
        [::std::mem::offset_of!(xen_domctl_mem_sharing_op, op) - 0usize];
    ["Offset of field: xen_domctl_mem_sharing_op::u"]
        [::std::mem::offset_of!(xen_domctl_mem_sharing_op, u) - 1usize];
};
impl Default for xen_domctl_mem_sharing_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_audit_p2m {
    pub orphans: u64,
    pub m2p_bad: u64,
    pub p2m_bad: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_audit_p2m"][::std::mem::size_of::<xen_domctl_audit_p2m>() - 24usize];
    ["Alignment of xen_domctl_audit_p2m"][::std::mem::align_of::<xen_domctl_audit_p2m>() - 8usize];
    ["Offset of field: xen_domctl_audit_p2m::orphans"]
        [::std::mem::offset_of!(xen_domctl_audit_p2m, orphans) - 0usize];
    ["Offset of field: xen_domctl_audit_p2m::m2p_bad"]
        [::std::mem::offset_of!(xen_domctl_audit_p2m, m2p_bad) - 8usize];
    ["Offset of field: xen_domctl_audit_p2m::p2m_bad"]
        [::std::mem::offset_of!(xen_domctl_audit_p2m, p2m_bad) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_set_virq_handler {
    pub virq: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_set_virq_handler"]
        [::std::mem::size_of::<xen_domctl_set_virq_handler>() - 4usize];
    ["Alignment of xen_domctl_set_virq_handler"]
        [::std::mem::align_of::<xen_domctl_set_virq_handler>() - 4usize];
    ["Offset of field: xen_domctl_set_virq_handler::virq"]
        [::std::mem::offset_of!(xen_domctl_set_virq_handler, virq) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vcpuextstate {
    pub vcpu: u32,
    pub xfeature_mask: u64,
    pub size: u64,
    pub buffer: __guest_handle_uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vcpuextstate"][::std::mem::size_of::<xen_domctl_vcpuextstate>() - 32usize];
    ["Alignment of xen_domctl_vcpuextstate"]
        [::std::mem::align_of::<xen_domctl_vcpuextstate>() - 8usize];
    ["Offset of field: xen_domctl_vcpuextstate::vcpu"]
        [::std::mem::offset_of!(xen_domctl_vcpuextstate, vcpu) - 0usize];
    ["Offset of field: xen_domctl_vcpuextstate::xfeature_mask"]
        [::std::mem::offset_of!(xen_domctl_vcpuextstate, xfeature_mask) - 8usize];
    ["Offset of field: xen_domctl_vcpuextstate::size"]
        [::std::mem::offset_of!(xen_domctl_vcpuextstate, size) - 16usize];
    ["Offset of field: xen_domctl_vcpuextstate::buffer"]
        [::std::mem::offset_of!(xen_domctl_vcpuextstate, buffer) - 24usize];
};
impl Default for xen_domctl_vcpuextstate {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_set_access_required {
    pub access_required: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_set_access_required"]
        [::std::mem::size_of::<xen_domctl_set_access_required>() - 1usize];
    ["Alignment of xen_domctl_set_access_required"]
        [::std::mem::align_of::<xen_domctl_set_access_required>() - 1usize];
    ["Offset of field: xen_domctl_set_access_required::access_required"]
        [::std::mem::offset_of!(xen_domctl_set_access_required, access_required) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_set_broken_page_p2m {
    pub pfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_set_broken_page_p2m"]
        [::std::mem::size_of::<xen_domctl_set_broken_page_p2m>() - 8usize];
    ["Alignment of xen_domctl_set_broken_page_p2m"]
        [::std::mem::align_of::<xen_domctl_set_broken_page_p2m>() - 8usize];
    ["Offset of field: xen_domctl_set_broken_page_p2m::pfn"]
        [::std::mem::offset_of!(xen_domctl_set_broken_page_p2m, pfn) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_cacheflush {
    pub start_pfn: xen_pfn_t,
    pub nr_pfns: xen_pfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_cacheflush"][::std::mem::size_of::<xen_domctl_cacheflush>() - 16usize];
    ["Alignment of xen_domctl_cacheflush"]
        [::std::mem::align_of::<xen_domctl_cacheflush>() - 8usize];
    ["Offset of field: xen_domctl_cacheflush::start_pfn"]
        [::std::mem::offset_of!(xen_domctl_cacheflush, start_pfn) - 0usize];
    ["Offset of field: xen_domctl_cacheflush::nr_pfns"]
        [::std::mem::offset_of!(xen_domctl_cacheflush, nr_pfns) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_paging_mempool {
    pub size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_paging_mempool"]
        [::std::mem::size_of::<xen_domctl_paging_mempool>() - 8usize];
    ["Alignment of xen_domctl_paging_mempool"]
        [::std::mem::align_of::<xen_domctl_paging_mempool>() - 8usize];
    ["Offset of field: xen_domctl_paging_mempool::size"]
        [::std::mem::offset_of!(xen_domctl_paging_mempool, size) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_vcpu_msr {
    pub index: u32,
    pub reserved: u32,
    pub value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vcpu_msr"][::std::mem::size_of::<xen_domctl_vcpu_msr>() - 16usize];
    ["Alignment of xen_domctl_vcpu_msr"][::std::mem::align_of::<xen_domctl_vcpu_msr>() - 8usize];
    ["Offset of field: xen_domctl_vcpu_msr::index"]
        [::std::mem::offset_of!(xen_domctl_vcpu_msr, index) - 0usize];
    ["Offset of field: xen_domctl_vcpu_msr::reserved"]
        [::std::mem::offset_of!(xen_domctl_vcpu_msr, reserved) - 4usize];
    ["Offset of field: xen_domctl_vcpu_msr::value"]
        [::std::mem::offset_of!(xen_domctl_vcpu_msr, value) - 8usize];
};
pub type xen_domctl_vcpu_msr_t = xen_domctl_vcpu_msr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_vcpu_msr_t {
    pub p: *mut xen_domctl_vcpu_msr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_domctl_vcpu_msr_t"]
        [::std::mem::size_of::<__guest_handle_xen_domctl_vcpu_msr_t>() - 8usize];
    ["Alignment of __guest_handle_xen_domctl_vcpu_msr_t"]
        [::std::mem::align_of::<__guest_handle_xen_domctl_vcpu_msr_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_domctl_vcpu_msr_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_domctl_vcpu_msr_t, p) - 0usize];
};
impl Default for __guest_handle_xen_domctl_vcpu_msr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_vcpu_msr_t {
    pub p: *const xen_domctl_vcpu_msr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_domctl_vcpu_msr_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_domctl_vcpu_msr_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_domctl_vcpu_msr_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_domctl_vcpu_msr_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_domctl_vcpu_msr_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_domctl_vcpu_msr_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_domctl_vcpu_msr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vcpu_msrs {
    pub vcpu: u32,
    pub msr_count: u32,
    pub msrs: __guest_handle_xen_domctl_vcpu_msr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vcpu_msrs"][::std::mem::size_of::<xen_domctl_vcpu_msrs>() - 16usize];
    ["Alignment of xen_domctl_vcpu_msrs"][::std::mem::align_of::<xen_domctl_vcpu_msrs>() - 8usize];
    ["Offset of field: xen_domctl_vcpu_msrs::vcpu"]
        [::std::mem::offset_of!(xen_domctl_vcpu_msrs, vcpu) - 0usize];
    ["Offset of field: xen_domctl_vcpu_msrs::msr_count"]
        [::std::mem::offset_of!(xen_domctl_vcpu_msrs, msr_count) - 4usize];
    ["Offset of field: xen_domctl_vcpu_msrs::msrs"]
        [::std::mem::offset_of!(xen_domctl_vcpu_msrs, msrs) - 8usize];
};
impl Default for xen_domctl_vcpu_msrs {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vnuma {
    pub nr_vnodes: u32,
    pub nr_vmemranges: u32,
    pub nr_vcpus: u32,
    pub pad: u32,
    pub vdistance: __guest_handle_uint,
    pub vcpu_to_vnode: __guest_handle_uint,
    pub vnode_to_pnode: __guest_handle_uint,
    pub vmemrange: __guest_handle_xen_vmemrange_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vnuma"][::std::mem::size_of::<xen_domctl_vnuma>() - 48usize];
    ["Alignment of xen_domctl_vnuma"][::std::mem::align_of::<xen_domctl_vnuma>() - 8usize];
    ["Offset of field: xen_domctl_vnuma::nr_vnodes"]
        [::std::mem::offset_of!(xen_domctl_vnuma, nr_vnodes) - 0usize];
    ["Offset of field: xen_domctl_vnuma::nr_vmemranges"]
        [::std::mem::offset_of!(xen_domctl_vnuma, nr_vmemranges) - 4usize];
    ["Offset of field: xen_domctl_vnuma::nr_vcpus"]
        [::std::mem::offset_of!(xen_domctl_vnuma, nr_vcpus) - 8usize];
    ["Offset of field: xen_domctl_vnuma::pad"]
        [::std::mem::offset_of!(xen_domctl_vnuma, pad) - 12usize];
    ["Offset of field: xen_domctl_vnuma::vdistance"]
        [::std::mem::offset_of!(xen_domctl_vnuma, vdistance) - 16usize];
    ["Offset of field: xen_domctl_vnuma::vcpu_to_vnode"]
        [::std::mem::offset_of!(xen_domctl_vnuma, vcpu_to_vnode) - 24usize];
    ["Offset of field: xen_domctl_vnuma::vnode_to_pnode"]
        [::std::mem::offset_of!(xen_domctl_vnuma, vnode_to_pnode) - 32usize];
    ["Offset of field: xen_domctl_vnuma::vmemrange"]
        [::std::mem::offset_of!(xen_domctl_vnuma, vmemrange) - 40usize];
};
impl Default for xen_domctl_vnuma {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_psr_cmt_op {
    pub cmd: u32,
    pub data: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_psr_cmt_op"][::std::mem::size_of::<xen_domctl_psr_cmt_op>() - 8usize];
    ["Alignment of xen_domctl_psr_cmt_op"]
        [::std::mem::align_of::<xen_domctl_psr_cmt_op>() - 4usize];
    ["Offset of field: xen_domctl_psr_cmt_op::cmd"]
        [::std::mem::offset_of!(xen_domctl_psr_cmt_op, cmd) - 0usize];
    ["Offset of field: xen_domctl_psr_cmt_op::data"]
        [::std::mem::offset_of!(xen_domctl_psr_cmt_op, data) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_monitor_op {
    pub op: u32,
    pub event: u32,
    pub u: xen_domctl_monitor_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_monitor_op__bindgen_ty_1 {
    pub mov_to_cr: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
    pub mov_to_msr: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2,
    pub guest_request: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3,
    pub debug_exception: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4,
    pub vmexit: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1 {
    pub index: u8,
    pub sync: u8,
    pub onchangeonly: u8,
    pub pad1: u8,
    pub pad2: u32,
    pub bitmask: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1::index"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1, index) - 0usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1::sync"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1, sync) - 1usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1::onchangeonly"][::std::mem::offset_of!(
        xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
        onchangeonly
    )
        - 2usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1::pad1"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1, pad1) - 3usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1::pad2"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1, pad2) - 4usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1::bitmask"][::std::mem::offset_of!(
        xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
        bitmask
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2 {
    pub msr: u32,
    pub onchangeonly: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2::msr"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2, msr) - 0usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2::onchangeonly"][::std::mem::offset_of!(
        xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2,
        onchangeonly
    )
        - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3 {
    pub sync: u8,
    pub allow_userspace: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3>() - 2usize];
    ["Alignment of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3>() - 1usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3::sync"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3, sync) - 0usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3::allow_userspace"][::std::mem::offset_of!(
        xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3,
        allow_userspace
    )
        - 1usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4 {
    pub sync: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Alignment of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4>() - 1usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4::sync"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4, sync) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5 {
    pub sync: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5>() - 1usize];
    ["Alignment of xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5>() - 1usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5::sync"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_5, sync) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_monitor_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1>() - 16usize];
    ["Alignment of xen_domctl_monitor_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1::mov_to_cr"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1, mov_to_cr) - 0usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1::mov_to_msr"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1, mov_to_msr) - 0usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1::guest_request"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1, guest_request) - 0usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1::debug_exception"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1, debug_exception) - 0usize];
    ["Offset of field: xen_domctl_monitor_op__bindgen_ty_1::vmexit"]
        [::std::mem::offset_of!(xen_domctl_monitor_op__bindgen_ty_1, vmexit) - 0usize];
};
impl Default for xen_domctl_monitor_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_monitor_op"][::std::mem::size_of::<xen_domctl_monitor_op>() - 24usize];
    ["Alignment of xen_domctl_monitor_op"]
        [::std::mem::align_of::<xen_domctl_monitor_op>() - 8usize];
    ["Offset of field: xen_domctl_monitor_op::op"]
        [::std::mem::offset_of!(xen_domctl_monitor_op, op) - 0usize];
    ["Offset of field: xen_domctl_monitor_op::event"]
        [::std::mem::offset_of!(xen_domctl_monitor_op, event) - 4usize];
    ["Offset of field: xen_domctl_monitor_op::u"]
        [::std::mem::offset_of!(xen_domctl_monitor_op, u) - 8usize];
};
impl Default for xen_domctl_monitor_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_psr_alloc {
    pub cmd: u32,
    pub target: u32,
    pub data: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_psr_alloc"][::std::mem::size_of::<xen_domctl_psr_alloc>() - 16usize];
    ["Alignment of xen_domctl_psr_alloc"][::std::mem::align_of::<xen_domctl_psr_alloc>() - 8usize];
    ["Offset of field: xen_domctl_psr_alloc::cmd"]
        [::std::mem::offset_of!(xen_domctl_psr_alloc, cmd) - 0usize];
    ["Offset of field: xen_domctl_psr_alloc::target"]
        [::std::mem::offset_of!(xen_domctl_psr_alloc, target) - 4usize];
    ["Offset of field: xen_domctl_psr_alloc::data"]
        [::std::mem::offset_of!(xen_domctl_psr_alloc, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_vuart_op {
    pub cmd: u32,
    pub type_: u32,
    pub gfn: u64,
    pub console_domid: domid_t,
    pub pad: [u8; 2usize],
    pub evtchn: evtchn_port_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vuart_op"][::std::mem::size_of::<xen_domctl_vuart_op>() - 24usize];
    ["Alignment of xen_domctl_vuart_op"][::std::mem::align_of::<xen_domctl_vuart_op>() - 8usize];
    ["Offset of field: xen_domctl_vuart_op::cmd"]
        [::std::mem::offset_of!(xen_domctl_vuart_op, cmd) - 0usize];
    ["Offset of field: xen_domctl_vuart_op::type_"]
        [::std::mem::offset_of!(xen_domctl_vuart_op, type_) - 4usize];
    ["Offset of field: xen_domctl_vuart_op::gfn"]
        [::std::mem::offset_of!(xen_domctl_vuart_op, gfn) - 8usize];
    ["Offset of field: xen_domctl_vuart_op::console_domid"]
        [::std::mem::offset_of!(xen_domctl_vuart_op, console_domid) - 16usize];
    ["Offset of field: xen_domctl_vuart_op::pad"]
        [::std::mem::offset_of!(xen_domctl_vuart_op, pad) - 18usize];
    ["Offset of field: xen_domctl_vuart_op::evtchn"]
        [::std::mem::offset_of!(xen_domctl_vuart_op, evtchn) - 20usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_domctl_vmtrace_op {
    pub cmd: u32,
    pub vcpu: u32,
    pub key: u64,
    pub value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_vmtrace_op"][::std::mem::size_of::<xen_domctl_vmtrace_op>() - 24usize];
    ["Alignment of xen_domctl_vmtrace_op"]
        [::std::mem::align_of::<xen_domctl_vmtrace_op>() - 8usize];
    ["Offset of field: xen_domctl_vmtrace_op::cmd"]
        [::std::mem::offset_of!(xen_domctl_vmtrace_op, cmd) - 0usize];
    ["Offset of field: xen_domctl_vmtrace_op::vcpu"]
        [::std::mem::offset_of!(xen_domctl_vmtrace_op, vcpu) - 4usize];
    ["Offset of field: xen_domctl_vmtrace_op::key"]
        [::std::mem::offset_of!(xen_domctl_vmtrace_op, key) - 8usize];
    ["Offset of field: xen_domctl_vmtrace_op::value"]
        [::std::mem::offset_of!(xen_domctl_vmtrace_op, value) - 16usize];
};
pub type xen_domctl_vmtrace_op_t = xen_domctl_vmtrace_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_vmtrace_op_t {
    pub p: *mut xen_domctl_vmtrace_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_domctl_vmtrace_op_t"]
        [::std::mem::size_of::<__guest_handle_xen_domctl_vmtrace_op_t>() - 8usize];
    ["Alignment of __guest_handle_xen_domctl_vmtrace_op_t"]
        [::std::mem::align_of::<__guest_handle_xen_domctl_vmtrace_op_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_domctl_vmtrace_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_domctl_vmtrace_op_t, p) - 0usize];
};
impl Default for __guest_handle_xen_domctl_vmtrace_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_vmtrace_op_t {
    pub p: *const xen_domctl_vmtrace_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_domctl_vmtrace_op_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_domctl_vmtrace_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_domctl_vmtrace_op_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_domctl_vmtrace_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_domctl_vmtrace_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_domctl_vmtrace_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_domctl_vmtrace_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_llc_colors {
    pub num_llc_colors: u32,
    pub pad: u32,
    pub llc_colors: __guest_handle_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl_set_llc_colors"]
        [::std::mem::size_of::<xen_domctl_set_llc_colors>() - 16usize];
    ["Alignment of xen_domctl_set_llc_colors"]
        [::std::mem::align_of::<xen_domctl_set_llc_colors>() - 8usize];
    ["Offset of field: xen_domctl_set_llc_colors::num_llc_colors"]
        [::std::mem::offset_of!(xen_domctl_set_llc_colors, num_llc_colors) - 0usize];
    ["Offset of field: xen_domctl_set_llc_colors::pad"]
        [::std::mem::offset_of!(xen_domctl_set_llc_colors, pad) - 4usize];
    ["Offset of field: xen_domctl_set_llc_colors::llc_colors"]
        [::std::mem::offset_of!(xen_domctl_set_llc_colors, llc_colors) - 8usize];
};
impl Default for xen_domctl_set_llc_colors {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl {
    pub cmd: u32,
    pub interface_version: u32,
    pub domain: domid_t,
    pub _pad: [u16; 3usize],
    pub u: xen_domctl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl__bindgen_ty_1 {
    pub createdomain: xen_domctl_createdomain,
    pub getdomaininfo: xen_domctl_getdomaininfo,
    pub getpageframeinfo3: xen_domctl_getpageframeinfo3,
    pub nodeaffinity: xen_domctl_nodeaffinity,
    pub vcpuaffinity: xen_domctl_vcpuaffinity,
    pub shadow_op: xen_domctl_shadow_op,
    pub max_mem: xen_domctl_max_mem,
    pub vcpucontext: xen_domctl_vcpucontext,
    pub getvcpuinfo: xen_domctl_getvcpuinfo,
    pub max_vcpus: xen_domctl_max_vcpus,
    pub scheduler_op: xen_domctl_scheduler_op,
    pub setdomainhandle: xen_domctl_setdomainhandle,
    pub setdebugging: xen_domctl_setdebugging,
    pub irq_permission: xen_domctl_irq_permission,
    pub gsi_permission: xen_domctl_gsi_permission,
    pub iomem_permission: xen_domctl_iomem_permission,
    pub ioport_permission: xen_domctl_ioport_permission,
    pub hypercall_init: xen_domctl_hypercall_init,
    pub settimeoffset: xen_domctl_settimeoffset,
    pub tsc_info: xen_domctl_tsc_info,
    pub hvmcontext: xen_domctl_hvmcontext,
    pub hvmcontext_partial: xen_domctl_hvmcontext_partial,
    pub address_size: xen_domctl_address_size,
    pub sendtrigger: xen_domctl_sendtrigger,
    pub get_device_group: xen_domctl_get_device_group,
    pub assign_device: xen_domctl_assign_device,
    pub bind_pt_irq: xen_domctl_bind_pt_irq,
    pub memory_mapping: xen_domctl_memory_mapping,
    pub ioport_mapping: xen_domctl_ioport_mapping,
    pub ext_vcpucontext: xen_domctl_ext_vcpucontext,
    pub set_target: xen_domctl_set_target,
    pub subscribe: xen_domctl_subscribe,
    pub debug_op: xen_domctl_debug_op,
    pub vm_event_op: xen_domctl_vm_event_op,
    pub mem_sharing_op: xen_domctl_mem_sharing_op,
    pub cpu_policy: xen_domctl_cpu_policy,
    pub vcpuextstate: xen_domctl_vcpuextstate,
    pub vcpu_msrs: xen_domctl_vcpu_msrs,
    pub access_required: xen_domctl_set_access_required,
    pub audit_p2m: xen_domctl_audit_p2m,
    pub set_virq_handler: xen_domctl_set_virq_handler,
    pub gdbsx_guest_memio: xen_domctl_gdbsx_memio,
    pub set_broken_page_p2m: xen_domctl_set_broken_page_p2m,
    pub cacheflush: xen_domctl_cacheflush,
    pub gdbsx_pauseunp_vcpu: xen_domctl_gdbsx_pauseunp_vcpu,
    pub gdbsx_domstatus: xen_domctl_gdbsx_domstatus,
    pub vnuma: xen_domctl_vnuma,
    pub psr_cmt_op: xen_domctl_psr_cmt_op,
    pub monitor_op: xen_domctl_monitor_op,
    pub psr_alloc: xen_domctl_psr_alloc,
    pub vuart_op: xen_domctl_vuart_op,
    pub vmtrace_op: xen_domctl_vmtrace_op,
    pub paging_mempool: xen_domctl_paging_mempool,
    pub set_llc_colors: xen_domctl_set_llc_colors,
    pub pad: [u8; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl__bindgen_ty_1"]
        [::std::mem::size_of::<xen_domctl__bindgen_ty_1>() - 128usize];
    ["Alignment of xen_domctl__bindgen_ty_1"]
        [::std::mem::align_of::<xen_domctl__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::createdomain"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, createdomain) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::getdomaininfo"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, getdomaininfo) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::getpageframeinfo3"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, getpageframeinfo3) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::nodeaffinity"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, nodeaffinity) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::vcpuaffinity"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, vcpuaffinity) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::shadow_op"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, shadow_op) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::max_mem"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, max_mem) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::vcpucontext"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, vcpucontext) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::getvcpuinfo"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, getvcpuinfo) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::max_vcpus"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, max_vcpus) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::scheduler_op"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, scheduler_op) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::setdomainhandle"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, setdomainhandle) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::setdebugging"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, setdebugging) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::irq_permission"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, irq_permission) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::gsi_permission"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, gsi_permission) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::iomem_permission"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, iomem_permission) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::ioport_permission"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, ioport_permission) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::hypercall_init"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, hypercall_init) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::settimeoffset"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, settimeoffset) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::tsc_info"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, tsc_info) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::hvmcontext"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, hvmcontext) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::hvmcontext_partial"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, hvmcontext_partial) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::address_size"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, address_size) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::sendtrigger"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, sendtrigger) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::get_device_group"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, get_device_group) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::assign_device"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, assign_device) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::bind_pt_irq"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, bind_pt_irq) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::memory_mapping"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, memory_mapping) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::ioport_mapping"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, ioport_mapping) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::ext_vcpucontext"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, ext_vcpucontext) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::set_target"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, set_target) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::subscribe"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, subscribe) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::debug_op"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, debug_op) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::vm_event_op"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, vm_event_op) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::mem_sharing_op"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, mem_sharing_op) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::cpu_policy"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, cpu_policy) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::vcpuextstate"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, vcpuextstate) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::vcpu_msrs"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, vcpu_msrs) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::access_required"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, access_required) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::audit_p2m"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, audit_p2m) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::set_virq_handler"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, set_virq_handler) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::gdbsx_guest_memio"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, gdbsx_guest_memio) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::set_broken_page_p2m"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, set_broken_page_p2m) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::cacheflush"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, cacheflush) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::gdbsx_pauseunp_vcpu"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, gdbsx_pauseunp_vcpu) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::gdbsx_domstatus"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, gdbsx_domstatus) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::vnuma"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, vnuma) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::psr_cmt_op"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, psr_cmt_op) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::monitor_op"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, monitor_op) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::psr_alloc"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, psr_alloc) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::vuart_op"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, vuart_op) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::vmtrace_op"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, vmtrace_op) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::paging_mempool"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, paging_mempool) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::set_llc_colors"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, set_llc_colors) - 0usize];
    ["Offset of field: xen_domctl__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(xen_domctl__bindgen_ty_1, pad) - 0usize];
};
impl Default for xen_domctl__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_domctl"][::std::mem::size_of::<xen_domctl>() - 144usize];
    ["Alignment of xen_domctl"][::std::mem::align_of::<xen_domctl>() - 8usize];
    ["Offset of field: xen_domctl::cmd"][::std::mem::offset_of!(xen_domctl, cmd) - 0usize];
    ["Offset of field: xen_domctl::interface_version"]
        [::std::mem::offset_of!(xen_domctl, interface_version) - 4usize];
    ["Offset of field: xen_domctl::domain"][::std::mem::offset_of!(xen_domctl, domain) - 8usize];
    ["Offset of field: xen_domctl::_pad"][::std::mem::offset_of!(xen_domctl, _pad) - 10usize];
    ["Offset of field: xen_domctl::u"][::std::mem::offset_of!(xen_domctl, u) - 16usize];
};
impl Default for xen_domctl {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_domctl_t = xen_domctl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_domctl_t {
    pub p: *mut xen_domctl_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_domctl_t"]
        [::std::mem::size_of::<__guest_handle_xen_domctl_t>() - 8usize];
    ["Alignment of __guest_handle_xen_domctl_t"]
        [::std::mem::align_of::<__guest_handle_xen_domctl_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_domctl_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_domctl_t, p) - 0usize];
};
impl Default for __guest_handle_xen_domctl_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_domctl_t {
    pub p: *const xen_domctl_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_domctl_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_domctl_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_domctl_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_domctl_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_domctl_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_domctl_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_domctl_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_readconsole {
    pub clear: u8,
    pub incremental: u8,
    pub pad0: u8,
    pub pad1: u8,
    pub index: u32,
    pub buffer: __guest_handle_char,
    pub count: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_readconsole"][::std::mem::size_of::<xen_sysctl_readconsole>() - 24usize];
    ["Alignment of xen_sysctl_readconsole"]
        [::std::mem::align_of::<xen_sysctl_readconsole>() - 8usize];
    ["Offset of field: xen_sysctl_readconsole::clear"]
        [::std::mem::offset_of!(xen_sysctl_readconsole, clear) - 0usize];
    ["Offset of field: xen_sysctl_readconsole::incremental"]
        [::std::mem::offset_of!(xen_sysctl_readconsole, incremental) - 1usize];
    ["Offset of field: xen_sysctl_readconsole::pad0"]
        [::std::mem::offset_of!(xen_sysctl_readconsole, pad0) - 2usize];
    ["Offset of field: xen_sysctl_readconsole::pad1"]
        [::std::mem::offset_of!(xen_sysctl_readconsole, pad1) - 3usize];
    ["Offset of field: xen_sysctl_readconsole::index"]
        [::std::mem::offset_of!(xen_sysctl_readconsole, index) - 4usize];
    ["Offset of field: xen_sysctl_readconsole::buffer"]
        [::std::mem::offset_of!(xen_sysctl_readconsole, buffer) - 8usize];
    ["Offset of field: xen_sysctl_readconsole::count"]
        [::std::mem::offset_of!(xen_sysctl_readconsole, count) - 16usize];
};
impl Default for xen_sysctl_readconsole {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_tbuf_op {
    pub cmd: u32,
    pub cpu_mask: xenctl_bitmap,
    pub evt_mask: u32,
    pub buffer_mfn: u64,
    pub size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_tbuf_op"][::std::mem::size_of::<xen_sysctl_tbuf_op>() - 48usize];
    ["Alignment of xen_sysctl_tbuf_op"][::std::mem::align_of::<xen_sysctl_tbuf_op>() - 8usize];
    ["Offset of field: xen_sysctl_tbuf_op::cmd"]
        [::std::mem::offset_of!(xen_sysctl_tbuf_op, cmd) - 0usize];
    ["Offset of field: xen_sysctl_tbuf_op::cpu_mask"]
        [::std::mem::offset_of!(xen_sysctl_tbuf_op, cpu_mask) - 8usize];
    ["Offset of field: xen_sysctl_tbuf_op::evt_mask"]
        [::std::mem::offset_of!(xen_sysctl_tbuf_op, evt_mask) - 24usize];
    ["Offset of field: xen_sysctl_tbuf_op::buffer_mfn"]
        [::std::mem::offset_of!(xen_sysctl_tbuf_op, buffer_mfn) - 32usize];
    ["Offset of field: xen_sysctl_tbuf_op::size"]
        [::std::mem::offset_of!(xen_sysctl_tbuf_op, size) - 40usize];
};
impl Default for xen_sysctl_tbuf_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_physinfo {
    pub threads_per_core: u32,
    pub cores_per_socket: u32,
    pub nr_cpus: u32,
    pub max_cpu_id: u32,
    pub nr_nodes: u32,
    pub max_node_id: u32,
    pub cpu_khz: u32,
    pub capabilities: u32,
    pub arch_capabilities: u32,
    pub pad: u32,
    pub total_pages: u64,
    pub free_pages: u64,
    pub scrub_pages: u64,
    pub outstanding_pages: u64,
    pub max_mfn: u64,
    pub hw_cap: [u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_physinfo"][::std::mem::size_of::<xen_sysctl_physinfo>() - 112usize];
    ["Alignment of xen_sysctl_physinfo"][::std::mem::align_of::<xen_sysctl_physinfo>() - 8usize];
    ["Offset of field: xen_sysctl_physinfo::threads_per_core"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, threads_per_core) - 0usize];
    ["Offset of field: xen_sysctl_physinfo::cores_per_socket"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, cores_per_socket) - 4usize];
    ["Offset of field: xen_sysctl_physinfo::nr_cpus"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, nr_cpus) - 8usize];
    ["Offset of field: xen_sysctl_physinfo::max_cpu_id"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, max_cpu_id) - 12usize];
    ["Offset of field: xen_sysctl_physinfo::nr_nodes"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, nr_nodes) - 16usize];
    ["Offset of field: xen_sysctl_physinfo::max_node_id"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, max_node_id) - 20usize];
    ["Offset of field: xen_sysctl_physinfo::cpu_khz"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, cpu_khz) - 24usize];
    ["Offset of field: xen_sysctl_physinfo::capabilities"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, capabilities) - 28usize];
    ["Offset of field: xen_sysctl_physinfo::arch_capabilities"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, arch_capabilities) - 32usize];
    ["Offset of field: xen_sysctl_physinfo::pad"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, pad) - 36usize];
    ["Offset of field: xen_sysctl_physinfo::total_pages"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, total_pages) - 40usize];
    ["Offset of field: xen_sysctl_physinfo::free_pages"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, free_pages) - 48usize];
    ["Offset of field: xen_sysctl_physinfo::scrub_pages"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, scrub_pages) - 56usize];
    ["Offset of field: xen_sysctl_physinfo::outstanding_pages"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, outstanding_pages) - 64usize];
    ["Offset of field: xen_sysctl_physinfo::max_mfn"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, max_mfn) - 72usize];
    ["Offset of field: xen_sysctl_physinfo::hw_cap"]
        [::std::mem::offset_of!(xen_sysctl_physinfo, hw_cap) - 80usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_sched_id {
    pub sched_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_sched_id"][::std::mem::size_of::<xen_sysctl_sched_id>() - 4usize];
    ["Alignment of xen_sysctl_sched_id"][::std::mem::align_of::<xen_sysctl_sched_id>() - 4usize];
    ["Offset of field: xen_sysctl_sched_id::sched_id"]
        [::std::mem::offset_of!(xen_sysctl_sched_id, sched_id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_perfc_desc {
    pub name: [::std::os::raw::c_char; 80usize],
    pub nr_vals: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_perfc_desc"][::std::mem::size_of::<xen_sysctl_perfc_desc>() - 84usize];
    ["Alignment of xen_sysctl_perfc_desc"]
        [::std::mem::align_of::<xen_sysctl_perfc_desc>() - 4usize];
    ["Offset of field: xen_sysctl_perfc_desc::name"]
        [::std::mem::offset_of!(xen_sysctl_perfc_desc, name) - 0usize];
    ["Offset of field: xen_sysctl_perfc_desc::nr_vals"]
        [::std::mem::offset_of!(xen_sysctl_perfc_desc, nr_vals) - 80usize];
};
impl Default for xen_sysctl_perfc_desc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_sysctl_perfc_desc_t = xen_sysctl_perfc_desc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_perfc_desc_t {
    pub p: *mut xen_sysctl_perfc_desc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_sysctl_perfc_desc_t"]
        [::std::mem::size_of::<__guest_handle_xen_sysctl_perfc_desc_t>() - 8usize];
    ["Alignment of __guest_handle_xen_sysctl_perfc_desc_t"]
        [::std::mem::align_of::<__guest_handle_xen_sysctl_perfc_desc_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_sysctl_perfc_desc_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_sysctl_perfc_desc_t, p) - 0usize];
};
impl Default for __guest_handle_xen_sysctl_perfc_desc_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_perfc_desc_t {
    pub p: *const xen_sysctl_perfc_desc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_sysctl_perfc_desc_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_sysctl_perfc_desc_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_sysctl_perfc_desc_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_sysctl_perfc_desc_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_sysctl_perfc_desc_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_sysctl_perfc_desc_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_sysctl_perfc_desc_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_sysctl_perfc_val_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_perfc_val_t {
    pub p: *mut xen_sysctl_perfc_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_sysctl_perfc_val_t"]
        [::std::mem::size_of::<__guest_handle_xen_sysctl_perfc_val_t>() - 8usize];
    ["Alignment of __guest_handle_xen_sysctl_perfc_val_t"]
        [::std::mem::align_of::<__guest_handle_xen_sysctl_perfc_val_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_sysctl_perfc_val_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_sysctl_perfc_val_t, p) - 0usize];
};
impl Default for __guest_handle_xen_sysctl_perfc_val_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_perfc_val_t {
    pub p: *const xen_sysctl_perfc_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_sysctl_perfc_val_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_sysctl_perfc_val_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_sysctl_perfc_val_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_sysctl_perfc_val_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_sysctl_perfc_val_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_sysctl_perfc_val_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_sysctl_perfc_val_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_perfc_op {
    pub cmd: u32,
    pub nr_counters: u32,
    pub nr_vals: u32,
    pub desc: __guest_handle_xen_sysctl_perfc_desc_t,
    pub val: __guest_handle_xen_sysctl_perfc_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_perfc_op"][::std::mem::size_of::<xen_sysctl_perfc_op>() - 32usize];
    ["Alignment of xen_sysctl_perfc_op"][::std::mem::align_of::<xen_sysctl_perfc_op>() - 8usize];
    ["Offset of field: xen_sysctl_perfc_op::cmd"]
        [::std::mem::offset_of!(xen_sysctl_perfc_op, cmd) - 0usize];
    ["Offset of field: xen_sysctl_perfc_op::nr_counters"]
        [::std::mem::offset_of!(xen_sysctl_perfc_op, nr_counters) - 4usize];
    ["Offset of field: xen_sysctl_perfc_op::nr_vals"]
        [::std::mem::offset_of!(xen_sysctl_perfc_op, nr_vals) - 8usize];
    ["Offset of field: xen_sysctl_perfc_op::desc"]
        [::std::mem::offset_of!(xen_sysctl_perfc_op, desc) - 16usize];
    ["Offset of field: xen_sysctl_perfc_op::val"]
        [::std::mem::offset_of!(xen_sysctl_perfc_op, val) - 24usize];
};
impl Default for xen_sysctl_perfc_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_getdomaininfolist {
    pub first_domain: domid_t,
    pub max_domains: u32,
    pub buffer: __guest_handle_xen_domctl_getdomaininfo_t,
    pub num_domains: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_getdomaininfolist"]
        [::std::mem::size_of::<xen_sysctl_getdomaininfolist>() - 24usize];
    ["Alignment of xen_sysctl_getdomaininfolist"]
        [::std::mem::align_of::<xen_sysctl_getdomaininfolist>() - 8usize];
    ["Offset of field: xen_sysctl_getdomaininfolist::first_domain"]
        [::std::mem::offset_of!(xen_sysctl_getdomaininfolist, first_domain) - 0usize];
    ["Offset of field: xen_sysctl_getdomaininfolist::max_domains"]
        [::std::mem::offset_of!(xen_sysctl_getdomaininfolist, max_domains) - 4usize];
    ["Offset of field: xen_sysctl_getdomaininfolist::buffer"]
        [::std::mem::offset_of!(xen_sysctl_getdomaininfolist, buffer) - 8usize];
    ["Offset of field: xen_sysctl_getdomaininfolist::num_domains"]
        [::std::mem::offset_of!(xen_sysctl_getdomaininfolist, num_domains) - 16usize];
};
impl Default for xen_sysctl_getdomaininfolist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_debug_keys {
    pub keys: __guest_handle_const_char,
    pub nr_keys: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_debug_keys"][::std::mem::size_of::<xen_sysctl_debug_keys>() - 16usize];
    ["Alignment of xen_sysctl_debug_keys"]
        [::std::mem::align_of::<xen_sysctl_debug_keys>() - 8usize];
    ["Offset of field: xen_sysctl_debug_keys::keys"]
        [::std::mem::offset_of!(xen_sysctl_debug_keys, keys) - 0usize];
    ["Offset of field: xen_sysctl_debug_keys::nr_keys"]
        [::std::mem::offset_of!(xen_sysctl_debug_keys, nr_keys) - 8usize];
};
impl Default for xen_sysctl_debug_keys {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_cpuinfo {
    pub idletime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_cpuinfo"][::std::mem::size_of::<xen_sysctl_cpuinfo>() - 8usize];
    ["Alignment of xen_sysctl_cpuinfo"][::std::mem::align_of::<xen_sysctl_cpuinfo>() - 8usize];
    ["Offset of field: xen_sysctl_cpuinfo::idletime"]
        [::std::mem::offset_of!(xen_sysctl_cpuinfo, idletime) - 0usize];
};
pub type xen_sysctl_cpuinfo_t = xen_sysctl_cpuinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_cpuinfo_t {
    pub p: *mut xen_sysctl_cpuinfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_sysctl_cpuinfo_t"]
        [::std::mem::size_of::<__guest_handle_xen_sysctl_cpuinfo_t>() - 8usize];
    ["Alignment of __guest_handle_xen_sysctl_cpuinfo_t"]
        [::std::mem::align_of::<__guest_handle_xen_sysctl_cpuinfo_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_sysctl_cpuinfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_sysctl_cpuinfo_t, p) - 0usize];
};
impl Default for __guest_handle_xen_sysctl_cpuinfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_cpuinfo_t {
    pub p: *const xen_sysctl_cpuinfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_sysctl_cpuinfo_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_sysctl_cpuinfo_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_sysctl_cpuinfo_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_sysctl_cpuinfo_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_sysctl_cpuinfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_sysctl_cpuinfo_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_sysctl_cpuinfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_getcpuinfo {
    pub max_cpus: u32,
    pub info: __guest_handle_xen_sysctl_cpuinfo_t,
    pub nr_cpus: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_getcpuinfo"][::std::mem::size_of::<xen_sysctl_getcpuinfo>() - 24usize];
    ["Alignment of xen_sysctl_getcpuinfo"]
        [::std::mem::align_of::<xen_sysctl_getcpuinfo>() - 8usize];
    ["Offset of field: xen_sysctl_getcpuinfo::max_cpus"]
        [::std::mem::offset_of!(xen_sysctl_getcpuinfo, max_cpus) - 0usize];
    ["Offset of field: xen_sysctl_getcpuinfo::info"]
        [::std::mem::offset_of!(xen_sysctl_getcpuinfo, info) - 8usize];
    ["Offset of field: xen_sysctl_getcpuinfo::nr_cpus"]
        [::std::mem::offset_of!(xen_sysctl_getcpuinfo, nr_cpus) - 16usize];
};
impl Default for xen_sysctl_getcpuinfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_availheap {
    pub min_bitwidth: u32,
    pub max_bitwidth: u32,
    pub node: i32,
    pub avail_bytes: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_availheap"][::std::mem::size_of::<xen_sysctl_availheap>() - 24usize];
    ["Alignment of xen_sysctl_availheap"][::std::mem::align_of::<xen_sysctl_availheap>() - 8usize];
    ["Offset of field: xen_sysctl_availheap::min_bitwidth"]
        [::std::mem::offset_of!(xen_sysctl_availheap, min_bitwidth) - 0usize];
    ["Offset of field: xen_sysctl_availheap::max_bitwidth"]
        [::std::mem::offset_of!(xen_sysctl_availheap, max_bitwidth) - 4usize];
    ["Offset of field: xen_sysctl_availheap::node"]
        [::std::mem::offset_of!(xen_sysctl_availheap, node) - 8usize];
    ["Offset of field: xen_sysctl_availheap::avail_bytes"]
        [::std::mem::offset_of!(xen_sysctl_availheap, avail_bytes) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct pm_px_val {
    pub freq: u64,
    pub residency: u64,
    pub count: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pm_px_val"][::std::mem::size_of::<pm_px_val>() - 24usize];
    ["Alignment of pm_px_val"][::std::mem::align_of::<pm_px_val>() - 8usize];
    ["Offset of field: pm_px_val::freq"][::std::mem::offset_of!(pm_px_val, freq) - 0usize];
    ["Offset of field: pm_px_val::residency"]
        [::std::mem::offset_of!(pm_px_val, residency) - 8usize];
    ["Offset of field: pm_px_val::count"][::std::mem::offset_of!(pm_px_val, count) - 16usize];
};
pub type pm_px_val_t = pm_px_val;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_pm_px_val_t {
    pub p: *mut pm_px_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_pm_px_val_t"]
        [::std::mem::size_of::<__guest_handle_pm_px_val_t>() - 8usize];
    ["Alignment of __guest_handle_pm_px_val_t"]
        [::std::mem::align_of::<__guest_handle_pm_px_val_t>() - 8usize];
    ["Offset of field: __guest_handle_pm_px_val_t::p"]
        [::std::mem::offset_of!(__guest_handle_pm_px_val_t, p) - 0usize];
};
impl Default for __guest_handle_pm_px_val_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_pm_px_val_t {
    pub p: *const pm_px_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_pm_px_val_t"]
        [::std::mem::size_of::<__guest_handle_const_pm_px_val_t>() - 8usize];
    ["Alignment of __guest_handle_const_pm_px_val_t"]
        [::std::mem::align_of::<__guest_handle_const_pm_px_val_t>() - 8usize];
    ["Offset of field: __guest_handle_const_pm_px_val_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_pm_px_val_t, p) - 0usize];
};
impl Default for __guest_handle_const_pm_px_val_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_px_stat {
    pub total: u8,
    pub usable: u8,
    pub last: u8,
    pub cur: u8,
    pub trans_pt: __guest_handle_uint64,
    pub pt: __guest_handle_pm_px_val_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pm_px_stat"][::std::mem::size_of::<pm_px_stat>() - 24usize];
    ["Alignment of pm_px_stat"][::std::mem::align_of::<pm_px_stat>() - 8usize];
    ["Offset of field: pm_px_stat::total"][::std::mem::offset_of!(pm_px_stat, total) - 0usize];
    ["Offset of field: pm_px_stat::usable"][::std::mem::offset_of!(pm_px_stat, usable) - 1usize];
    ["Offset of field: pm_px_stat::last"][::std::mem::offset_of!(pm_px_stat, last) - 2usize];
    ["Offset of field: pm_px_stat::cur"][::std::mem::offset_of!(pm_px_stat, cur) - 3usize];
    ["Offset of field: pm_px_stat::trans_pt"]
        [::std::mem::offset_of!(pm_px_stat, trans_pt) - 8usize];
    ["Offset of field: pm_px_stat::pt"][::std::mem::offset_of!(pm_px_stat, pt) - 16usize];
};
impl Default for pm_px_stat {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_cx_stat {
    pub nr: u32,
    pub last: u32,
    pub idle_time: u64,
    pub triggers: __guest_handle_uint64,
    pub residencies: __guest_handle_uint64,
    pub nr_pc: u32,
    pub nr_cc: u32,
    pub pc: __guest_handle_uint64,
    pub cc: __guest_handle_uint64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pm_cx_stat"][::std::mem::size_of::<pm_cx_stat>() - 56usize];
    ["Alignment of pm_cx_stat"][::std::mem::align_of::<pm_cx_stat>() - 8usize];
    ["Offset of field: pm_cx_stat::nr"][::std::mem::offset_of!(pm_cx_stat, nr) - 0usize];
    ["Offset of field: pm_cx_stat::last"][::std::mem::offset_of!(pm_cx_stat, last) - 4usize];
    ["Offset of field: pm_cx_stat::idle_time"]
        [::std::mem::offset_of!(pm_cx_stat, idle_time) - 8usize];
    ["Offset of field: pm_cx_stat::triggers"]
        [::std::mem::offset_of!(pm_cx_stat, triggers) - 16usize];
    ["Offset of field: pm_cx_stat::residencies"]
        [::std::mem::offset_of!(pm_cx_stat, residencies) - 24usize];
    ["Offset of field: pm_cx_stat::nr_pc"][::std::mem::offset_of!(pm_cx_stat, nr_pc) - 32usize];
    ["Offset of field: pm_cx_stat::nr_cc"][::std::mem::offset_of!(pm_cx_stat, nr_cc) - 36usize];
    ["Offset of field: pm_cx_stat::pc"][::std::mem::offset_of!(pm_cx_stat, pc) - 40usize];
    ["Offset of field: pm_cx_stat::cc"][::std::mem::offset_of!(pm_cx_stat, cc) - 48usize];
};
impl Default for pm_cx_stat {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_get_pmstat {
    pub type_: u32,
    pub cpuid: u32,
    pub u: xen_sysctl_get_pmstat__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_get_pmstat__bindgen_ty_1 {
    pub getpx: pm_px_stat,
    pub getcx: pm_cx_stat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_get_pmstat__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl_get_pmstat__bindgen_ty_1>() - 56usize];
    ["Alignment of xen_sysctl_get_pmstat__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl_get_pmstat__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_sysctl_get_pmstat__bindgen_ty_1::getpx"]
        [::std::mem::offset_of!(xen_sysctl_get_pmstat__bindgen_ty_1, getpx) - 0usize];
    ["Offset of field: xen_sysctl_get_pmstat__bindgen_ty_1::getcx"]
        [::std::mem::offset_of!(xen_sysctl_get_pmstat__bindgen_ty_1, getcx) - 0usize];
};
impl Default for xen_sysctl_get_pmstat__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_get_pmstat"][::std::mem::size_of::<xen_sysctl_get_pmstat>() - 64usize];
    ["Alignment of xen_sysctl_get_pmstat"]
        [::std::mem::align_of::<xen_sysctl_get_pmstat>() - 8usize];
    ["Offset of field: xen_sysctl_get_pmstat::type_"]
        [::std::mem::offset_of!(xen_sysctl_get_pmstat, type_) - 0usize];
    ["Offset of field: xen_sysctl_get_pmstat::cpuid"]
        [::std::mem::offset_of!(xen_sysctl_get_pmstat, cpuid) - 4usize];
    ["Offset of field: xen_sysctl_get_pmstat::u"]
        [::std::mem::offset_of!(xen_sysctl_get_pmstat, u) - 8usize];
};
impl Default for xen_sysctl_get_pmstat {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_cpu_hotplug {
    pub cpu: u32,
    pub op: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_cpu_hotplug"][::std::mem::size_of::<xen_sysctl_cpu_hotplug>() - 8usize];
    ["Alignment of xen_sysctl_cpu_hotplug"]
        [::std::mem::align_of::<xen_sysctl_cpu_hotplug>() - 4usize];
    ["Offset of field: xen_sysctl_cpu_hotplug::cpu"]
        [::std::mem::offset_of!(xen_sysctl_cpu_hotplug, cpu) - 0usize];
    ["Offset of field: xen_sysctl_cpu_hotplug::op"]
        [::std::mem::offset_of!(xen_sysctl_cpu_hotplug, op) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_userspace {
    pub scaling_setspeed: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_userspace"][::std::mem::size_of::<xen_userspace>() - 4usize];
    ["Alignment of xen_userspace"][::std::mem::align_of::<xen_userspace>() - 4usize];
    ["Offset of field: xen_userspace::scaling_setspeed"]
        [::std::mem::offset_of!(xen_userspace, scaling_setspeed) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_ondemand {
    pub sampling_rate_max: u32,
    pub sampling_rate_min: u32,
    pub sampling_rate: u32,
    pub up_threshold: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_ondemand"][::std::mem::size_of::<xen_ondemand>() - 16usize];
    ["Alignment of xen_ondemand"][::std::mem::align_of::<xen_ondemand>() - 4usize];
    ["Offset of field: xen_ondemand::sampling_rate_max"]
        [::std::mem::offset_of!(xen_ondemand, sampling_rate_max) - 0usize];
    ["Offset of field: xen_ondemand::sampling_rate_min"]
        [::std::mem::offset_of!(xen_ondemand, sampling_rate_min) - 4usize];
    ["Offset of field: xen_ondemand::sampling_rate"]
        [::std::mem::offset_of!(xen_ondemand, sampling_rate) - 8usize];
    ["Offset of field: xen_ondemand::up_threshold"]
        [::std::mem::offset_of!(xen_ondemand, up_threshold) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_cppc_para {
    pub features: u32,
    pub lowest: u32,
    pub lowest_nonlinear: u32,
    pub nominal: u32,
    pub highest: u32,
    pub minimum: u32,
    pub maximum: u32,
    pub desired: u32,
    pub energy_perf: u32,
    pub activity_window: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_cppc_para"][::std::mem::size_of::<xen_cppc_para>() - 40usize];
    ["Alignment of xen_cppc_para"][::std::mem::align_of::<xen_cppc_para>() - 4usize];
    ["Offset of field: xen_cppc_para::features"]
        [::std::mem::offset_of!(xen_cppc_para, features) - 0usize];
    ["Offset of field: xen_cppc_para::lowest"]
        [::std::mem::offset_of!(xen_cppc_para, lowest) - 4usize];
    ["Offset of field: xen_cppc_para::lowest_nonlinear"]
        [::std::mem::offset_of!(xen_cppc_para, lowest_nonlinear) - 8usize];
    ["Offset of field: xen_cppc_para::nominal"]
        [::std::mem::offset_of!(xen_cppc_para, nominal) - 12usize];
    ["Offset of field: xen_cppc_para::highest"]
        [::std::mem::offset_of!(xen_cppc_para, highest) - 16usize];
    ["Offset of field: xen_cppc_para::minimum"]
        [::std::mem::offset_of!(xen_cppc_para, minimum) - 20usize];
    ["Offset of field: xen_cppc_para::maximum"]
        [::std::mem::offset_of!(xen_cppc_para, maximum) - 24usize];
    ["Offset of field: xen_cppc_para::desired"]
        [::std::mem::offset_of!(xen_cppc_para, desired) - 28usize];
    ["Offset of field: xen_cppc_para::energy_perf"]
        [::std::mem::offset_of!(xen_cppc_para, energy_perf) - 32usize];
    ["Offset of field: xen_cppc_para::activity_window"]
        [::std::mem::offset_of!(xen_cppc_para, activity_window) - 36usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_set_cppc_para {
    pub set_params: u32,
    pub minimum: u32,
    pub maximum: u32,
    pub desired: u32,
    pub energy_perf: u32,
    pub activity_window: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_set_cppc_para"][::std::mem::size_of::<xen_set_cppc_para>() - 24usize];
    ["Alignment of xen_set_cppc_para"][::std::mem::align_of::<xen_set_cppc_para>() - 4usize];
    ["Offset of field: xen_set_cppc_para::set_params"]
        [::std::mem::offset_of!(xen_set_cppc_para, set_params) - 0usize];
    ["Offset of field: xen_set_cppc_para::minimum"]
        [::std::mem::offset_of!(xen_set_cppc_para, minimum) - 4usize];
    ["Offset of field: xen_set_cppc_para::maximum"]
        [::std::mem::offset_of!(xen_set_cppc_para, maximum) - 8usize];
    ["Offset of field: xen_set_cppc_para::desired"]
        [::std::mem::offset_of!(xen_set_cppc_para, desired) - 12usize];
    ["Offset of field: xen_set_cppc_para::energy_perf"]
        [::std::mem::offset_of!(xen_set_cppc_para, energy_perf) - 16usize];
    ["Offset of field: xen_set_cppc_para::activity_window"]
        [::std::mem::offset_of!(xen_set_cppc_para, activity_window) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_get_cpufreq_para {
    pub cpu_num: u32,
    pub freq_num: u32,
    pub gov_num: u32,
    pub affected_cpus: __guest_handle_uint32,
    pub scaling_available_frequencies: __guest_handle_uint32,
    pub scaling_available_governors: __guest_handle_char,
    pub scaling_driver: [::std::os::raw::c_char; 16usize],
    pub cpuinfo_cur_freq: u32,
    pub cpuinfo_max_freq: u32,
    pub cpuinfo_min_freq: u32,
    pub u: xen_get_cpufreq_para__bindgen_ty_1,
    pub turbo_enabled: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_get_cpufreq_para__bindgen_ty_1 {
    pub s: xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
    pub cppc_para: xen_cppc_para,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1 {
    pub scaling_cur_freq: u32,
    pub scaling_governor: [::std::os::raw::c_char; 16usize],
    pub scaling_max_freq: u32,
    pub scaling_min_freq: u32,
    pub u: xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub userspace: xen_userspace,
    pub ondemand: xen_ondemand,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::userspace"] [:: std :: mem :: offset_of ! (xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 , userspace) - 0usize] ;
    ["Offset of field: xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::ondemand"][::std::mem::offset_of!(
        xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        ondemand
    )
        - 0usize];
};
impl Default for xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1>() - 44usize];
    ["Alignment of xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::scaling_cur_freq"][::std::mem::offset_of!(
        xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
        scaling_cur_freq
    )
        - 0usize];
    ["Offset of field: xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::scaling_governor"][::std::mem::offset_of!(
        xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
        scaling_governor
    )
        - 4usize];
    ["Offset of field: xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::scaling_max_freq"][::std::mem::offset_of!(
        xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
        scaling_max_freq
    )
        - 20usize];
    ["Offset of field: xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::scaling_min_freq"][::std::mem::offset_of!(
        xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
        scaling_min_freq
    )
        - 24usize];
    ["Offset of field: xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::u"]
        [::std::mem::offset_of!(xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1, u) - 28usize];
};
impl Default for xen_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_get_cpufreq_para__bindgen_ty_1"]
        [::std::mem::size_of::<xen_get_cpufreq_para__bindgen_ty_1>() - 44usize];
    ["Alignment of xen_get_cpufreq_para__bindgen_ty_1"]
        [::std::mem::align_of::<xen_get_cpufreq_para__bindgen_ty_1>() - 4usize];
    ["Offset of field: xen_get_cpufreq_para__bindgen_ty_1::s"]
        [::std::mem::offset_of!(xen_get_cpufreq_para__bindgen_ty_1, s) - 0usize];
    ["Offset of field: xen_get_cpufreq_para__bindgen_ty_1::cppc_para"]
        [::std::mem::offset_of!(xen_get_cpufreq_para__bindgen_ty_1, cppc_para) - 0usize];
};
impl Default for xen_get_cpufreq_para__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_get_cpufreq_para"][::std::mem::size_of::<xen_get_cpufreq_para>() - 120usize];
    ["Alignment of xen_get_cpufreq_para"][::std::mem::align_of::<xen_get_cpufreq_para>() - 8usize];
    ["Offset of field: xen_get_cpufreq_para::cpu_num"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, cpu_num) - 0usize];
    ["Offset of field: xen_get_cpufreq_para::freq_num"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, freq_num) - 4usize];
    ["Offset of field: xen_get_cpufreq_para::gov_num"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, gov_num) - 8usize];
    ["Offset of field: xen_get_cpufreq_para::affected_cpus"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, affected_cpus) - 16usize];
    ["Offset of field: xen_get_cpufreq_para::scaling_available_frequencies"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, scaling_available_frequencies) - 24usize];
    ["Offset of field: xen_get_cpufreq_para::scaling_available_governors"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, scaling_available_governors) - 32usize];
    ["Offset of field: xen_get_cpufreq_para::scaling_driver"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, scaling_driver) - 40usize];
    ["Offset of field: xen_get_cpufreq_para::cpuinfo_cur_freq"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, cpuinfo_cur_freq) - 56usize];
    ["Offset of field: xen_get_cpufreq_para::cpuinfo_max_freq"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, cpuinfo_max_freq) - 60usize];
    ["Offset of field: xen_get_cpufreq_para::cpuinfo_min_freq"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, cpuinfo_min_freq) - 64usize];
    ["Offset of field: xen_get_cpufreq_para::u"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, u) - 68usize];
    ["Offset of field: xen_get_cpufreq_para::turbo_enabled"]
        [::std::mem::offset_of!(xen_get_cpufreq_para, turbo_enabled) - 112usize];
};
impl Default for xen_get_cpufreq_para {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_set_cpufreq_gov {
    pub scaling_governor: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_set_cpufreq_gov"][::std::mem::size_of::<xen_set_cpufreq_gov>() - 16usize];
    ["Alignment of xen_set_cpufreq_gov"][::std::mem::align_of::<xen_set_cpufreq_gov>() - 1usize];
    ["Offset of field: xen_set_cpufreq_gov::scaling_governor"]
        [::std::mem::offset_of!(xen_set_cpufreq_gov, scaling_governor) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_set_cpufreq_para {
    pub ctrl_type: u32,
    pub ctrl_value: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_set_cpufreq_para"][::std::mem::size_of::<xen_set_cpufreq_para>() - 8usize];
    ["Alignment of xen_set_cpufreq_para"][::std::mem::align_of::<xen_set_cpufreq_para>() - 4usize];
    ["Offset of field: xen_set_cpufreq_para::ctrl_type"]
        [::std::mem::offset_of!(xen_set_cpufreq_para, ctrl_type) - 0usize];
    ["Offset of field: xen_set_cpufreq_para::ctrl_value"]
        [::std::mem::offset_of!(xen_set_cpufreq_para, ctrl_value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_pm_op {
    pub cmd: u32,
    pub cpuid: u32,
    pub u: xen_sysctl_pm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_pm_op__bindgen_ty_1 {
    pub get_para: xen_get_cpufreq_para,
    pub set_gov: xen_set_cpufreq_gov,
    pub set_para: xen_set_cpufreq_para,
    pub set_cppc: xen_set_cppc_para,
    pub get_avgfreq: u64,
    pub set_sched_opt_smt: u32,
    pub get_max_cstate: u32,
    pub set_max_cstate: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_pm_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl_pm_op__bindgen_ty_1>() - 120usize];
    ["Alignment of xen_sysctl_pm_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl_pm_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_sysctl_pm_op__bindgen_ty_1::get_para"]
        [::std::mem::offset_of!(xen_sysctl_pm_op__bindgen_ty_1, get_para) - 0usize];
    ["Offset of field: xen_sysctl_pm_op__bindgen_ty_1::set_gov"]
        [::std::mem::offset_of!(xen_sysctl_pm_op__bindgen_ty_1, set_gov) - 0usize];
    ["Offset of field: xen_sysctl_pm_op__bindgen_ty_1::set_para"]
        [::std::mem::offset_of!(xen_sysctl_pm_op__bindgen_ty_1, set_para) - 0usize];
    ["Offset of field: xen_sysctl_pm_op__bindgen_ty_1::set_cppc"]
        [::std::mem::offset_of!(xen_sysctl_pm_op__bindgen_ty_1, set_cppc) - 0usize];
    ["Offset of field: xen_sysctl_pm_op__bindgen_ty_1::get_avgfreq"]
        [::std::mem::offset_of!(xen_sysctl_pm_op__bindgen_ty_1, get_avgfreq) - 0usize];
    ["Offset of field: xen_sysctl_pm_op__bindgen_ty_1::set_sched_opt_smt"]
        [::std::mem::offset_of!(xen_sysctl_pm_op__bindgen_ty_1, set_sched_opt_smt) - 0usize];
    ["Offset of field: xen_sysctl_pm_op__bindgen_ty_1::get_max_cstate"]
        [::std::mem::offset_of!(xen_sysctl_pm_op__bindgen_ty_1, get_max_cstate) - 0usize];
    ["Offset of field: xen_sysctl_pm_op__bindgen_ty_1::set_max_cstate"]
        [::std::mem::offset_of!(xen_sysctl_pm_op__bindgen_ty_1, set_max_cstate) - 0usize];
};
impl Default for xen_sysctl_pm_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_pm_op"][::std::mem::size_of::<xen_sysctl_pm_op>() - 128usize];
    ["Alignment of xen_sysctl_pm_op"][::std::mem::align_of::<xen_sysctl_pm_op>() - 8usize];
    ["Offset of field: xen_sysctl_pm_op::cmd"]
        [::std::mem::offset_of!(xen_sysctl_pm_op, cmd) - 0usize];
    ["Offset of field: xen_sysctl_pm_op::cpuid"]
        [::std::mem::offset_of!(xen_sysctl_pm_op, cpuid) - 4usize];
    ["Offset of field: xen_sysctl_pm_op::u"][::std::mem::offset_of!(xen_sysctl_pm_op, u) - 8usize];
};
impl Default for xen_sysctl_pm_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_page_offline_op {
    pub cmd: u32,
    pub start: u32,
    pub end: u32,
    pub status: __guest_handle_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_page_offline_op"]
        [::std::mem::size_of::<xen_sysctl_page_offline_op>() - 24usize];
    ["Alignment of xen_sysctl_page_offline_op"]
        [::std::mem::align_of::<xen_sysctl_page_offline_op>() - 8usize];
    ["Offset of field: xen_sysctl_page_offline_op::cmd"]
        [::std::mem::offset_of!(xen_sysctl_page_offline_op, cmd) - 0usize];
    ["Offset of field: xen_sysctl_page_offline_op::start"]
        [::std::mem::offset_of!(xen_sysctl_page_offline_op, start) - 4usize];
    ["Offset of field: xen_sysctl_page_offline_op::end"]
        [::std::mem::offset_of!(xen_sysctl_page_offline_op, end) - 8usize];
    ["Offset of field: xen_sysctl_page_offline_op::status"]
        [::std::mem::offset_of!(xen_sysctl_page_offline_op, status) - 16usize];
};
impl Default for xen_sysctl_page_offline_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_lockprof_data {
    pub name: [::std::os::raw::c_char; 40usize],
    pub type_: i32,
    pub idx: i32,
    pub lock_cnt: u64,
    pub block_cnt: u64,
    pub lock_time: u64,
    pub block_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_lockprof_data"]
        [::std::mem::size_of::<xen_sysctl_lockprof_data>() - 80usize];
    ["Alignment of xen_sysctl_lockprof_data"]
        [::std::mem::align_of::<xen_sysctl_lockprof_data>() - 8usize];
    ["Offset of field: xen_sysctl_lockprof_data::name"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_data, name) - 0usize];
    ["Offset of field: xen_sysctl_lockprof_data::type_"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_data, type_) - 40usize];
    ["Offset of field: xen_sysctl_lockprof_data::idx"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_data, idx) - 44usize];
    ["Offset of field: xen_sysctl_lockprof_data::lock_cnt"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_data, lock_cnt) - 48usize];
    ["Offset of field: xen_sysctl_lockprof_data::block_cnt"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_data, block_cnt) - 56usize];
    ["Offset of field: xen_sysctl_lockprof_data::lock_time"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_data, lock_time) - 64usize];
    ["Offset of field: xen_sysctl_lockprof_data::block_time"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_data, block_time) - 72usize];
};
impl Default for xen_sysctl_lockprof_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_sysctl_lockprof_data_t = xen_sysctl_lockprof_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_lockprof_data_t {
    pub p: *mut xen_sysctl_lockprof_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_sysctl_lockprof_data_t"]
        [::std::mem::size_of::<__guest_handle_xen_sysctl_lockprof_data_t>() - 8usize];
    ["Alignment of __guest_handle_xen_sysctl_lockprof_data_t"]
        [::std::mem::align_of::<__guest_handle_xen_sysctl_lockprof_data_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_sysctl_lockprof_data_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_sysctl_lockprof_data_t, p) - 0usize];
};
impl Default for __guest_handle_xen_sysctl_lockprof_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_lockprof_data_t {
    pub p: *const xen_sysctl_lockprof_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_sysctl_lockprof_data_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_sysctl_lockprof_data_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_sysctl_lockprof_data_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_sysctl_lockprof_data_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_sysctl_lockprof_data_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_sysctl_lockprof_data_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_sysctl_lockprof_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_lockprof_op {
    pub cmd: u32,
    pub max_elem: u32,
    pub nr_elem: u32,
    pub time: u64,
    pub data: __guest_handle_xen_sysctl_lockprof_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_lockprof_op"][::std::mem::size_of::<xen_sysctl_lockprof_op>() - 32usize];
    ["Alignment of xen_sysctl_lockprof_op"]
        [::std::mem::align_of::<xen_sysctl_lockprof_op>() - 8usize];
    ["Offset of field: xen_sysctl_lockprof_op::cmd"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_op, cmd) - 0usize];
    ["Offset of field: xen_sysctl_lockprof_op::max_elem"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_op, max_elem) - 4usize];
    ["Offset of field: xen_sysctl_lockprof_op::nr_elem"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_op, nr_elem) - 8usize];
    ["Offset of field: xen_sysctl_lockprof_op::time"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_op, time) - 16usize];
    ["Offset of field: xen_sysctl_lockprof_op::data"]
        [::std::mem::offset_of!(xen_sysctl_lockprof_op, data) - 24usize];
};
impl Default for xen_sysctl_lockprof_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_cputopo {
    pub core: u32,
    pub socket: u32,
    pub node: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_cputopo"][::std::mem::size_of::<xen_sysctl_cputopo>() - 12usize];
    ["Alignment of xen_sysctl_cputopo"][::std::mem::align_of::<xen_sysctl_cputopo>() - 4usize];
    ["Offset of field: xen_sysctl_cputopo::core"]
        [::std::mem::offset_of!(xen_sysctl_cputopo, core) - 0usize];
    ["Offset of field: xen_sysctl_cputopo::socket"]
        [::std::mem::offset_of!(xen_sysctl_cputopo, socket) - 4usize];
    ["Offset of field: xen_sysctl_cputopo::node"]
        [::std::mem::offset_of!(xen_sysctl_cputopo, node) - 8usize];
};
pub type xen_sysctl_cputopo_t = xen_sysctl_cputopo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_cputopo_t {
    pub p: *mut xen_sysctl_cputopo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_sysctl_cputopo_t"]
        [::std::mem::size_of::<__guest_handle_xen_sysctl_cputopo_t>() - 8usize];
    ["Alignment of __guest_handle_xen_sysctl_cputopo_t"]
        [::std::mem::align_of::<__guest_handle_xen_sysctl_cputopo_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_sysctl_cputopo_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_sysctl_cputopo_t, p) - 0usize];
};
impl Default for __guest_handle_xen_sysctl_cputopo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_cputopo_t {
    pub p: *const xen_sysctl_cputopo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_sysctl_cputopo_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_sysctl_cputopo_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_sysctl_cputopo_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_sysctl_cputopo_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_sysctl_cputopo_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_sysctl_cputopo_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_sysctl_cputopo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cputopoinfo {
    pub num_cpus: u32,
    pub cputopo: __guest_handle_xen_sysctl_cputopo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_cputopoinfo"][::std::mem::size_of::<xen_sysctl_cputopoinfo>() - 16usize];
    ["Alignment of xen_sysctl_cputopoinfo"]
        [::std::mem::align_of::<xen_sysctl_cputopoinfo>() - 8usize];
    ["Offset of field: xen_sysctl_cputopoinfo::num_cpus"]
        [::std::mem::offset_of!(xen_sysctl_cputopoinfo, num_cpus) - 0usize];
    ["Offset of field: xen_sysctl_cputopoinfo::cputopo"]
        [::std::mem::offset_of!(xen_sysctl_cputopoinfo, cputopo) - 8usize];
};
impl Default for xen_sysctl_cputopoinfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_meminfo {
    pub memsize: u64,
    pub memfree: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_meminfo"][::std::mem::size_of::<xen_sysctl_meminfo>() - 16usize];
    ["Alignment of xen_sysctl_meminfo"][::std::mem::align_of::<xen_sysctl_meminfo>() - 8usize];
    ["Offset of field: xen_sysctl_meminfo::memsize"]
        [::std::mem::offset_of!(xen_sysctl_meminfo, memsize) - 0usize];
    ["Offset of field: xen_sysctl_meminfo::memfree"]
        [::std::mem::offset_of!(xen_sysctl_meminfo, memfree) - 8usize];
};
pub type xen_sysctl_meminfo_t = xen_sysctl_meminfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_meminfo_t {
    pub p: *mut xen_sysctl_meminfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_sysctl_meminfo_t"]
        [::std::mem::size_of::<__guest_handle_xen_sysctl_meminfo_t>() - 8usize];
    ["Alignment of __guest_handle_xen_sysctl_meminfo_t"]
        [::std::mem::align_of::<__guest_handle_xen_sysctl_meminfo_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_sysctl_meminfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_sysctl_meminfo_t, p) - 0usize];
};
impl Default for __guest_handle_xen_sysctl_meminfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_meminfo_t {
    pub p: *const xen_sysctl_meminfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_sysctl_meminfo_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_sysctl_meminfo_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_sysctl_meminfo_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_sysctl_meminfo_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_sysctl_meminfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_sysctl_meminfo_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_sysctl_meminfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_numainfo {
    pub num_nodes: u32,
    pub meminfo: __guest_handle_xen_sysctl_meminfo_t,
    pub distance: __guest_handle_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_numainfo"][::std::mem::size_of::<xen_sysctl_numainfo>() - 24usize];
    ["Alignment of xen_sysctl_numainfo"][::std::mem::align_of::<xen_sysctl_numainfo>() - 8usize];
    ["Offset of field: xen_sysctl_numainfo::num_nodes"]
        [::std::mem::offset_of!(xen_sysctl_numainfo, num_nodes) - 0usize];
    ["Offset of field: xen_sysctl_numainfo::meminfo"]
        [::std::mem::offset_of!(xen_sysctl_numainfo, meminfo) - 8usize];
    ["Offset of field: xen_sysctl_numainfo::distance"]
        [::std::mem::offset_of!(xen_sysctl_numainfo, distance) - 16usize];
};
impl Default for xen_sysctl_numainfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpupool_op {
    pub op: u32,
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub domid: u32,
    pub cpu: u32,
    pub n_dom: u32,
    pub cpumap: xenctl_bitmap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_cpupool_op"][::std::mem::size_of::<xen_sysctl_cpupool_op>() - 40usize];
    ["Alignment of xen_sysctl_cpupool_op"]
        [::std::mem::align_of::<xen_sysctl_cpupool_op>() - 8usize];
    ["Offset of field: xen_sysctl_cpupool_op::op"]
        [::std::mem::offset_of!(xen_sysctl_cpupool_op, op) - 0usize];
    ["Offset of field: xen_sysctl_cpupool_op::cpupool_id"]
        [::std::mem::offset_of!(xen_sysctl_cpupool_op, cpupool_id) - 4usize];
    ["Offset of field: xen_sysctl_cpupool_op::sched_id"]
        [::std::mem::offset_of!(xen_sysctl_cpupool_op, sched_id) - 8usize];
    ["Offset of field: xen_sysctl_cpupool_op::domid"]
        [::std::mem::offset_of!(xen_sysctl_cpupool_op, domid) - 12usize];
    ["Offset of field: xen_sysctl_cpupool_op::cpu"]
        [::std::mem::offset_of!(xen_sysctl_cpupool_op, cpu) - 16usize];
    ["Offset of field: xen_sysctl_cpupool_op::n_dom"]
        [::std::mem::offset_of!(xen_sysctl_cpupool_op, n_dom) - 20usize];
    ["Offset of field: xen_sysctl_cpupool_op::cpumap"]
        [::std::mem::offset_of!(xen_sysctl_cpupool_op, cpumap) - 24usize];
};
impl Default for xen_sysctl_cpupool_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_arinc653_schedule {
    pub major_frame: u64,
    pub num_sched_entries: u8,
    pub sched_entries: [xen_sysctl_arinc653_schedule__bindgen_ty_1; 64usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_arinc653_schedule__bindgen_ty_1 {
    pub dom_handle: xen_domain_handle_t,
    pub vcpu_id: u32,
    pub runtime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_arinc653_schedule__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl_arinc653_schedule__bindgen_ty_1>() - 32usize];
    ["Alignment of xen_sysctl_arinc653_schedule__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl_arinc653_schedule__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_sysctl_arinc653_schedule__bindgen_ty_1::dom_handle"]
        [::std::mem::offset_of!(xen_sysctl_arinc653_schedule__bindgen_ty_1, dom_handle) - 0usize];
    ["Offset of field: xen_sysctl_arinc653_schedule__bindgen_ty_1::vcpu_id"]
        [::std::mem::offset_of!(xen_sysctl_arinc653_schedule__bindgen_ty_1, vcpu_id) - 16usize];
    ["Offset of field: xen_sysctl_arinc653_schedule__bindgen_ty_1::runtime"]
        [::std::mem::offset_of!(xen_sysctl_arinc653_schedule__bindgen_ty_1, runtime) - 24usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_arinc653_schedule"]
        [::std::mem::size_of::<xen_sysctl_arinc653_schedule>() - 2064usize];
    ["Alignment of xen_sysctl_arinc653_schedule"]
        [::std::mem::align_of::<xen_sysctl_arinc653_schedule>() - 8usize];
    ["Offset of field: xen_sysctl_arinc653_schedule::major_frame"]
        [::std::mem::offset_of!(xen_sysctl_arinc653_schedule, major_frame) - 0usize];
    ["Offset of field: xen_sysctl_arinc653_schedule::num_sched_entries"]
        [::std::mem::offset_of!(xen_sysctl_arinc653_schedule, num_sched_entries) - 8usize];
    ["Offset of field: xen_sysctl_arinc653_schedule::sched_entries"]
        [::std::mem::offset_of!(xen_sysctl_arinc653_schedule, sched_entries) - 16usize];
};
impl Default for xen_sysctl_arinc653_schedule {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_sysctl_arinc653_schedule_t = xen_sysctl_arinc653_schedule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_arinc653_schedule_t {
    pub p: *mut xen_sysctl_arinc653_schedule_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_sysctl_arinc653_schedule_t"]
        [::std::mem::size_of::<__guest_handle_xen_sysctl_arinc653_schedule_t>() - 8usize];
    ["Alignment of __guest_handle_xen_sysctl_arinc653_schedule_t"]
        [::std::mem::align_of::<__guest_handle_xen_sysctl_arinc653_schedule_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_sysctl_arinc653_schedule_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_sysctl_arinc653_schedule_t, p) - 0usize];
};
impl Default for __guest_handle_xen_sysctl_arinc653_schedule_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_arinc653_schedule_t {
    pub p: *const xen_sysctl_arinc653_schedule_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_sysctl_arinc653_schedule_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_sysctl_arinc653_schedule_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_sysctl_arinc653_schedule_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_sysctl_arinc653_schedule_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_sysctl_arinc653_schedule_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_sysctl_arinc653_schedule_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_sysctl_arinc653_schedule_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_credit_schedule {
    pub tslice_ms: u32,
    pub ratelimit_us: u32,
    pub vcpu_migr_delay_us: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_credit_schedule"]
        [::std::mem::size_of::<xen_sysctl_credit_schedule>() - 12usize];
    ["Alignment of xen_sysctl_credit_schedule"]
        [::std::mem::align_of::<xen_sysctl_credit_schedule>() - 4usize];
    ["Offset of field: xen_sysctl_credit_schedule::tslice_ms"]
        [::std::mem::offset_of!(xen_sysctl_credit_schedule, tslice_ms) - 0usize];
    ["Offset of field: xen_sysctl_credit_schedule::ratelimit_us"]
        [::std::mem::offset_of!(xen_sysctl_credit_schedule, ratelimit_us) - 4usize];
    ["Offset of field: xen_sysctl_credit_schedule::vcpu_migr_delay_us"]
        [::std::mem::offset_of!(xen_sysctl_credit_schedule, vcpu_migr_delay_us) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_credit2_schedule {
    pub ratelimit_us: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_credit2_schedule"]
        [::std::mem::size_of::<xen_sysctl_credit2_schedule>() - 4usize];
    ["Alignment of xen_sysctl_credit2_schedule"]
        [::std::mem::align_of::<xen_sysctl_credit2_schedule>() - 4usize];
    ["Offset of field: xen_sysctl_credit2_schedule::ratelimit_us"]
        [::std::mem::offset_of!(xen_sysctl_credit2_schedule, ratelimit_us) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_scheduler_op {
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub cmd: u32,
    pub u: xen_sysctl_scheduler_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_scheduler_op__bindgen_ty_1 {
    pub sched_arinc653: xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653,
    pub sched_credit: xen_sysctl_credit_schedule,
    pub sched_credit2: xen_sysctl_credit2_schedule,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653 {
    pub schedule: __guest_handle_xen_sysctl_arinc653_schedule_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653"][::std::mem::size_of::<
        xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653,
    >() - 8usize];
    ["Alignment of xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653"]
        [::std::mem::align_of::<xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653>()
            - 8usize];
    ["Offset of field: xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653::schedule"] [:: std :: mem :: offset_of ! (xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653 , schedule) - 0usize] ;
};
impl Default for xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_scheduler_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl_scheduler_op__bindgen_ty_1>() - 16usize];
    ["Alignment of xen_sysctl_scheduler_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl_scheduler_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_sysctl_scheduler_op__bindgen_ty_1::sched_arinc653"]
        [::std::mem::offset_of!(xen_sysctl_scheduler_op__bindgen_ty_1, sched_arinc653) - 0usize];
    ["Offset of field: xen_sysctl_scheduler_op__bindgen_ty_1::sched_credit"]
        [::std::mem::offset_of!(xen_sysctl_scheduler_op__bindgen_ty_1, sched_credit) - 0usize];
    ["Offset of field: xen_sysctl_scheduler_op__bindgen_ty_1::sched_credit2"]
        [::std::mem::offset_of!(xen_sysctl_scheduler_op__bindgen_ty_1, sched_credit2) - 0usize];
};
impl Default for xen_sysctl_scheduler_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_scheduler_op"][::std::mem::size_of::<xen_sysctl_scheduler_op>() - 32usize];
    ["Alignment of xen_sysctl_scheduler_op"]
        [::std::mem::align_of::<xen_sysctl_scheduler_op>() - 8usize];
    ["Offset of field: xen_sysctl_scheduler_op::cpupool_id"]
        [::std::mem::offset_of!(xen_sysctl_scheduler_op, cpupool_id) - 0usize];
    ["Offset of field: xen_sysctl_scheduler_op::sched_id"]
        [::std::mem::offset_of!(xen_sysctl_scheduler_op, sched_id) - 4usize];
    ["Offset of field: xen_sysctl_scheduler_op::cmd"]
        [::std::mem::offset_of!(xen_sysctl_scheduler_op, cmd) - 8usize];
    ["Offset of field: xen_sysctl_scheduler_op::u"]
        [::std::mem::offset_of!(xen_sysctl_scheduler_op, u) - 16usize];
};
impl Default for xen_sysctl_scheduler_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_coverage_op {
    pub cmd: u32,
    pub size: u32,
    pub buffer: __guest_handle_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_coverage_op"][::std::mem::size_of::<xen_sysctl_coverage_op>() - 16usize];
    ["Alignment of xen_sysctl_coverage_op"]
        [::std::mem::align_of::<xen_sysctl_coverage_op>() - 8usize];
    ["Offset of field: xen_sysctl_coverage_op::cmd"]
        [::std::mem::offset_of!(xen_sysctl_coverage_op, cmd) - 0usize];
    ["Offset of field: xen_sysctl_coverage_op::size"]
        [::std::mem::offset_of!(xen_sysctl_coverage_op, size) - 4usize];
    ["Offset of field: xen_sysctl_coverage_op::buffer"]
        [::std::mem::offset_of!(xen_sysctl_coverage_op, buffer) - 8usize];
};
impl Default for xen_sysctl_coverage_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_psr_cmt_op {
    pub cmd: u32,
    pub flags: u32,
    pub u: xen_sysctl_psr_cmt_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_psr_cmt_op__bindgen_ty_1 {
    pub data: u64,
    pub l3_cache: xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1 {
    pub cpu: u32,
    pub rsvd: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1::cpu"]
        [::std::mem::offset_of!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1, cpu) - 0usize];
    ["Offset of field: xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1::rsvd"]
        [::std::mem::offset_of!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1, rsvd) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_psr_cmt_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1>() - 8usize];
    ["Alignment of xen_sysctl_psr_cmt_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_sysctl_psr_cmt_op__bindgen_ty_1::data"]
        [::std::mem::offset_of!(xen_sysctl_psr_cmt_op__bindgen_ty_1, data) - 0usize];
    ["Offset of field: xen_sysctl_psr_cmt_op__bindgen_ty_1::l3_cache"]
        [::std::mem::offset_of!(xen_sysctl_psr_cmt_op__bindgen_ty_1, l3_cache) - 0usize];
};
impl Default for xen_sysctl_psr_cmt_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_psr_cmt_op"][::std::mem::size_of::<xen_sysctl_psr_cmt_op>() - 16usize];
    ["Alignment of xen_sysctl_psr_cmt_op"]
        [::std::mem::align_of::<xen_sysctl_psr_cmt_op>() - 8usize];
    ["Offset of field: xen_sysctl_psr_cmt_op::cmd"]
        [::std::mem::offset_of!(xen_sysctl_psr_cmt_op, cmd) - 0usize];
    ["Offset of field: xen_sysctl_psr_cmt_op::flags"]
        [::std::mem::offset_of!(xen_sysctl_psr_cmt_op, flags) - 4usize];
    ["Offset of field: xen_sysctl_psr_cmt_op::u"]
        [::std::mem::offset_of!(xen_sysctl_psr_cmt_op, u) - 8usize];
};
impl Default for xen_sysctl_psr_cmt_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_pcitopoinfo {
    pub num_devs: u32,
    pub devs: __guest_handle_physdev_pci_device_t,
    pub nodes: __guest_handle_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_pcitopoinfo"][::std::mem::size_of::<xen_sysctl_pcitopoinfo>() - 24usize];
    ["Alignment of xen_sysctl_pcitopoinfo"]
        [::std::mem::align_of::<xen_sysctl_pcitopoinfo>() - 8usize];
    ["Offset of field: xen_sysctl_pcitopoinfo::num_devs"]
        [::std::mem::offset_of!(xen_sysctl_pcitopoinfo, num_devs) - 0usize];
    ["Offset of field: xen_sysctl_pcitopoinfo::devs"]
        [::std::mem::offset_of!(xen_sysctl_pcitopoinfo, devs) - 8usize];
    ["Offset of field: xen_sysctl_pcitopoinfo::nodes"]
        [::std::mem::offset_of!(xen_sysctl_pcitopoinfo, nodes) - 16usize];
};
impl Default for xen_sysctl_pcitopoinfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_psr_alloc {
    pub cmd: u32,
    pub target: u32,
    pub u: xen_sysctl_psr_alloc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_psr_alloc__bindgen_ty_1 {
    pub cat_info: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1,
    pub mba_info: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1 {
    pub cbm_len: u32,
    pub cos_max: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1>() - 12usize];
    ["Alignment of xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1::cbm_len"][::std::mem::offset_of!(
        xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1,
        cbm_len
    ) - 0usize];
    ["Offset of field: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1::cos_max"][::std::mem::offset_of!(
        xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1,
        cos_max
    ) - 4usize];
    ["Offset of field: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1, flags) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2 {
    pub thrtl_max: u32,
    pub cos_max: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2>() - 12usize];
    ["Alignment of xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2::thrtl_max"][::std::mem::offset_of!(
        xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2,
        thrtl_max
    ) - 0usize];
    ["Offset of field: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2::cos_max"][::std::mem::offset_of!(
        xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2,
        cos_max
    ) - 4usize];
    ["Offset of field: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2::flags"]
        [::std::mem::offset_of!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2, flags) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_psr_alloc__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl_psr_alloc__bindgen_ty_1>() - 12usize];
    ["Alignment of xen_sysctl_psr_alloc__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl_psr_alloc__bindgen_ty_1>() - 4usize];
    ["Offset of field: xen_sysctl_psr_alloc__bindgen_ty_1::cat_info"]
        [::std::mem::offset_of!(xen_sysctl_psr_alloc__bindgen_ty_1, cat_info) - 0usize];
    ["Offset of field: xen_sysctl_psr_alloc__bindgen_ty_1::mba_info"]
        [::std::mem::offset_of!(xen_sysctl_psr_alloc__bindgen_ty_1, mba_info) - 0usize];
};
impl Default for xen_sysctl_psr_alloc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_psr_alloc"][::std::mem::size_of::<xen_sysctl_psr_alloc>() - 20usize];
    ["Alignment of xen_sysctl_psr_alloc"][::std::mem::align_of::<xen_sysctl_psr_alloc>() - 4usize];
    ["Offset of field: xen_sysctl_psr_alloc::cmd"]
        [::std::mem::offset_of!(xen_sysctl_psr_alloc, cmd) - 0usize];
    ["Offset of field: xen_sysctl_psr_alloc::target"]
        [::std::mem::offset_of!(xen_sysctl_psr_alloc, target) - 4usize];
    ["Offset of field: xen_sysctl_psr_alloc::u"]
        [::std::mem::offset_of!(xen_sysctl_psr_alloc, u) - 8usize];
};
impl Default for xen_sysctl_psr_alloc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_sysctl_cpu_levelling_caps {
    pub caps: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_cpu_levelling_caps"]
        [::std::mem::size_of::<xen_sysctl_cpu_levelling_caps>() - 4usize];
    ["Alignment of xen_sysctl_cpu_levelling_caps"]
        [::std::mem::align_of::<xen_sysctl_cpu_levelling_caps>() - 4usize];
    ["Offset of field: xen_sysctl_cpu_levelling_caps::caps"]
        [::std::mem::offset_of!(xen_sysctl_cpu_levelling_caps, caps) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_featureset {
    pub index: u32,
    pub nr_features: u32,
    pub features: __guest_handle_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_cpu_featureset"]
        [::std::mem::size_of::<xen_sysctl_cpu_featureset>() - 16usize];
    ["Alignment of xen_sysctl_cpu_featureset"]
        [::std::mem::align_of::<xen_sysctl_cpu_featureset>() - 8usize];
    ["Offset of field: xen_sysctl_cpu_featureset::index"]
        [::std::mem::offset_of!(xen_sysctl_cpu_featureset, index) - 0usize];
    ["Offset of field: xen_sysctl_cpu_featureset::nr_features"]
        [::std::mem::offset_of!(xen_sysctl_cpu_featureset, nr_features) - 4usize];
    ["Offset of field: xen_sysctl_cpu_featureset::features"]
        [::std::mem::offset_of!(xen_sysctl_cpu_featureset, features) - 8usize];
};
impl Default for xen_sysctl_cpu_featureset {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_livepatch_name {
    pub name: __guest_handle_char,
    pub size: u16,
    pub pad: [u16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_livepatch_name"][::std::mem::size_of::<xen_livepatch_name>() - 16usize];
    ["Alignment of xen_livepatch_name"][::std::mem::align_of::<xen_livepatch_name>() - 8usize];
    ["Offset of field: xen_livepatch_name::name"]
        [::std::mem::offset_of!(xen_livepatch_name, name) - 0usize];
    ["Offset of field: xen_livepatch_name::size"]
        [::std::mem::offset_of!(xen_livepatch_name, size) - 8usize];
    ["Offset of field: xen_livepatch_name::pad"]
        [::std::mem::offset_of!(xen_livepatch_name, pad) - 10usize];
};
impl Default for xen_livepatch_name {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_livepatch_upload {
    pub name: xen_livepatch_name,
    pub size: u64,
    pub payload: __guest_handle_uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_livepatch_upload"]
        [::std::mem::size_of::<xen_sysctl_livepatch_upload>() - 32usize];
    ["Alignment of xen_sysctl_livepatch_upload"]
        [::std::mem::align_of::<xen_sysctl_livepatch_upload>() - 8usize];
    ["Offset of field: xen_sysctl_livepatch_upload::name"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_upload, name) - 0usize];
    ["Offset of field: xen_sysctl_livepatch_upload::size"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_upload, size) - 16usize];
    ["Offset of field: xen_sysctl_livepatch_upload::payload"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_upload, payload) - 24usize];
};
impl Default for xen_sysctl_livepatch_upload {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_livepatch_status {
    pub state: u32,
    pub rc: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_livepatch_status"][::std::mem::size_of::<xen_livepatch_status>() - 8usize];
    ["Alignment of xen_livepatch_status"][::std::mem::align_of::<xen_livepatch_status>() - 4usize];
    ["Offset of field: xen_livepatch_status::state"]
        [::std::mem::offset_of!(xen_livepatch_status, state) - 0usize];
    ["Offset of field: xen_livepatch_status::rc"]
        [::std::mem::offset_of!(xen_livepatch_status, rc) - 4usize];
};
pub type xen_livepatch_status_t = xen_livepatch_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_livepatch_status_t {
    pub p: *mut xen_livepatch_status_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_livepatch_status_t"]
        [::std::mem::size_of::<__guest_handle_xen_livepatch_status_t>() - 8usize];
    ["Alignment of __guest_handle_xen_livepatch_status_t"]
        [::std::mem::align_of::<__guest_handle_xen_livepatch_status_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_livepatch_status_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_livepatch_status_t, p) - 0usize];
};
impl Default for __guest_handle_xen_livepatch_status_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_livepatch_status_t {
    pub p: *const xen_livepatch_status_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_livepatch_status_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_livepatch_status_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_livepatch_status_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_livepatch_status_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_livepatch_status_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_livepatch_status_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_livepatch_status_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_livepatch_get {
    pub name: xen_livepatch_name,
    pub status: xen_livepatch_status,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_livepatch_get"]
        [::std::mem::size_of::<xen_sysctl_livepatch_get>() - 24usize];
    ["Alignment of xen_sysctl_livepatch_get"]
        [::std::mem::align_of::<xen_sysctl_livepatch_get>() - 8usize];
    ["Offset of field: xen_sysctl_livepatch_get::name"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_get, name) - 0usize];
    ["Offset of field: xen_sysctl_livepatch_get::status"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_get, status) - 16usize];
};
impl Default for xen_sysctl_livepatch_get {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_livepatch_list {
    pub version: u32,
    pub idx: u32,
    pub nr: u32,
    pub pad: u32,
    pub name_total_size: u32,
    pub metadata_total_size: u32,
    pub status: __guest_handle_xen_livepatch_status_t,
    pub name: __guest_handle_char,
    pub len: __guest_handle_uint32,
    pub metadata: __guest_handle_char,
    pub metadata_len: __guest_handle_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_livepatch_list"]
        [::std::mem::size_of::<xen_sysctl_livepatch_list>() - 64usize];
    ["Alignment of xen_sysctl_livepatch_list"]
        [::std::mem::align_of::<xen_sysctl_livepatch_list>() - 8usize];
    ["Offset of field: xen_sysctl_livepatch_list::version"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, version) - 0usize];
    ["Offset of field: xen_sysctl_livepatch_list::idx"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, idx) - 4usize];
    ["Offset of field: xen_sysctl_livepatch_list::nr"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, nr) - 8usize];
    ["Offset of field: xen_sysctl_livepatch_list::pad"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, pad) - 12usize];
    ["Offset of field: xen_sysctl_livepatch_list::name_total_size"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, name_total_size) - 16usize];
    ["Offset of field: xen_sysctl_livepatch_list::metadata_total_size"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, metadata_total_size) - 20usize];
    ["Offset of field: xen_sysctl_livepatch_list::status"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, status) - 24usize];
    ["Offset of field: xen_sysctl_livepatch_list::name"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, name) - 32usize];
    ["Offset of field: xen_sysctl_livepatch_list::len"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, len) - 40usize];
    ["Offset of field: xen_sysctl_livepatch_list::metadata"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, metadata) - 48usize];
    ["Offset of field: xen_sysctl_livepatch_list::metadata_len"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_list, metadata_len) - 56usize];
};
impl Default for xen_sysctl_livepatch_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_livepatch_action {
    pub name: xen_livepatch_name,
    pub cmd: u32,
    pub timeout: u32,
    pub flags: u32,
    pub pad: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_livepatch_action"]
        [::std::mem::size_of::<xen_sysctl_livepatch_action>() - 32usize];
    ["Alignment of xen_sysctl_livepatch_action"]
        [::std::mem::align_of::<xen_sysctl_livepatch_action>() - 8usize];
    ["Offset of field: xen_sysctl_livepatch_action::name"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_action, name) - 0usize];
    ["Offset of field: xen_sysctl_livepatch_action::cmd"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_action, cmd) - 16usize];
    ["Offset of field: xen_sysctl_livepatch_action::timeout"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_action, timeout) - 20usize];
    ["Offset of field: xen_sysctl_livepatch_action::flags"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_action, flags) - 24usize];
    ["Offset of field: xen_sysctl_livepatch_action::pad"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_action, pad) - 28usize];
};
impl Default for xen_sysctl_livepatch_action {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_op {
    pub cmd: u32,
    pub flags: u32,
    pub u: xen_sysctl_livepatch_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_livepatch_op__bindgen_ty_1 {
    pub upload: xen_sysctl_livepatch_upload,
    pub list: xen_sysctl_livepatch_list,
    pub get: xen_sysctl_livepatch_get,
    pub action: xen_sysctl_livepatch_action,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_livepatch_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl_livepatch_op__bindgen_ty_1>() - 64usize];
    ["Alignment of xen_sysctl_livepatch_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl_livepatch_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_sysctl_livepatch_op__bindgen_ty_1::upload"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_op__bindgen_ty_1, upload) - 0usize];
    ["Offset of field: xen_sysctl_livepatch_op__bindgen_ty_1::list"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_op__bindgen_ty_1, list) - 0usize];
    ["Offset of field: xen_sysctl_livepatch_op__bindgen_ty_1::get"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_op__bindgen_ty_1, get) - 0usize];
    ["Offset of field: xen_sysctl_livepatch_op__bindgen_ty_1::action"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_op__bindgen_ty_1, action) - 0usize];
};
impl Default for xen_sysctl_livepatch_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_livepatch_op"][::std::mem::size_of::<xen_sysctl_livepatch_op>() - 72usize];
    ["Alignment of xen_sysctl_livepatch_op"]
        [::std::mem::align_of::<xen_sysctl_livepatch_op>() - 8usize];
    ["Offset of field: xen_sysctl_livepatch_op::cmd"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_op, cmd) - 0usize];
    ["Offset of field: xen_sysctl_livepatch_op::flags"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_op, flags) - 4usize];
    ["Offset of field: xen_sysctl_livepatch_op::u"]
        [::std::mem::offset_of!(xen_sysctl_livepatch_op, u) - 8usize];
};
impl Default for xen_sysctl_livepatch_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_policy {
    pub index: u32,
    pub nr_leaves: u32,
    pub nr_msrs: u32,
    pub _rsvd: u32,
    pub leaves: __guest_handle_xen_cpuid_leaf_t,
    pub msrs: __guest_handle_xen_msr_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl_cpu_policy"][::std::mem::size_of::<xen_sysctl_cpu_policy>() - 32usize];
    ["Alignment of xen_sysctl_cpu_policy"]
        [::std::mem::align_of::<xen_sysctl_cpu_policy>() - 8usize];
    ["Offset of field: xen_sysctl_cpu_policy::index"]
        [::std::mem::offset_of!(xen_sysctl_cpu_policy, index) - 0usize];
    ["Offset of field: xen_sysctl_cpu_policy::nr_leaves"]
        [::std::mem::offset_of!(xen_sysctl_cpu_policy, nr_leaves) - 4usize];
    ["Offset of field: xen_sysctl_cpu_policy::nr_msrs"]
        [::std::mem::offset_of!(xen_sysctl_cpu_policy, nr_msrs) - 8usize];
    ["Offset of field: xen_sysctl_cpu_policy::_rsvd"]
        [::std::mem::offset_of!(xen_sysctl_cpu_policy, _rsvd) - 12usize];
    ["Offset of field: xen_sysctl_cpu_policy::leaves"]
        [::std::mem::offset_of!(xen_sysctl_cpu_policy, leaves) - 16usize];
    ["Offset of field: xen_sysctl_cpu_policy::msrs"]
        [::std::mem::offset_of!(xen_sysctl_cpu_policy, msrs) - 24usize];
};
impl Default for xen_sysctl_cpu_policy {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_sysctl_cpu_policy_t = xen_sysctl_cpu_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_cpu_policy_t {
    pub p: *mut xen_sysctl_cpu_policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_sysctl_cpu_policy_t"]
        [::std::mem::size_of::<__guest_handle_xen_sysctl_cpu_policy_t>() - 8usize];
    ["Alignment of __guest_handle_xen_sysctl_cpu_policy_t"]
        [::std::mem::align_of::<__guest_handle_xen_sysctl_cpu_policy_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_sysctl_cpu_policy_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_sysctl_cpu_policy_t, p) - 0usize];
};
impl Default for __guest_handle_xen_sysctl_cpu_policy_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_cpu_policy_t {
    pub p: *const xen_sysctl_cpu_policy_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_sysctl_cpu_policy_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_sysctl_cpu_policy_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_sysctl_cpu_policy_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_sysctl_cpu_policy_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_sysctl_cpu_policy_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_sysctl_cpu_policy_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_sysctl_cpu_policy_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_sysctl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl__bindgen_ty_1 {
    pub readconsole: xen_sysctl_readconsole,
    pub tbuf_op: xen_sysctl_tbuf_op,
    pub physinfo: xen_sysctl_physinfo,
    pub cputopoinfo: xen_sysctl_cputopoinfo,
    pub pcitopoinfo: xen_sysctl_pcitopoinfo,
    pub numainfo: xen_sysctl_numainfo,
    pub sched_id: xen_sysctl_sched_id,
    pub perfc_op: xen_sysctl_perfc_op,
    pub getdomaininfolist: xen_sysctl_getdomaininfolist,
    pub debug_keys: xen_sysctl_debug_keys,
    pub getcpuinfo: xen_sysctl_getcpuinfo,
    pub availheap: xen_sysctl_availheap,
    pub get_pmstat: xen_sysctl_get_pmstat,
    pub cpu_hotplug: xen_sysctl_cpu_hotplug,
    pub pm_op: xen_sysctl_pm_op,
    pub page_offline: xen_sysctl_page_offline_op,
    pub lockprof_op: xen_sysctl_lockprof_op,
    pub cpupool_op: xen_sysctl_cpupool_op,
    pub scheduler_op: xen_sysctl_scheduler_op,
    pub coverage_op: xen_sysctl_coverage_op,
    pub psr_cmt_op: xen_sysctl_psr_cmt_op,
    pub psr_alloc: xen_sysctl_psr_alloc,
    pub cpu_levelling_caps: xen_sysctl_cpu_levelling_caps,
    pub cpu_featureset: xen_sysctl_cpu_featureset,
    pub livepatch: xen_sysctl_livepatch_op,
    pub cpu_policy: xen_sysctl_cpu_policy,
    pub pad: [u8; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl__bindgen_ty_1"]
        [::std::mem::size_of::<xen_sysctl__bindgen_ty_1>() - 128usize];
    ["Alignment of xen_sysctl__bindgen_ty_1"]
        [::std::mem::align_of::<xen_sysctl__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::readconsole"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, readconsole) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::tbuf_op"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, tbuf_op) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::physinfo"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, physinfo) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::cputopoinfo"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, cputopoinfo) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::pcitopoinfo"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, pcitopoinfo) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::numainfo"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, numainfo) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::sched_id"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, sched_id) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::perfc_op"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, perfc_op) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::getdomaininfolist"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, getdomaininfolist) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::debug_keys"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, debug_keys) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::getcpuinfo"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, getcpuinfo) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::availheap"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, availheap) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::get_pmstat"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, get_pmstat) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::cpu_hotplug"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, cpu_hotplug) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::pm_op"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, pm_op) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::page_offline"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, page_offline) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::lockprof_op"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, lockprof_op) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::cpupool_op"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, cpupool_op) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::scheduler_op"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, scheduler_op) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::coverage_op"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, coverage_op) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::psr_cmt_op"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, psr_cmt_op) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::psr_alloc"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, psr_alloc) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::cpu_levelling_caps"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, cpu_levelling_caps) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::cpu_featureset"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, cpu_featureset) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::livepatch"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, livepatch) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::cpu_policy"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, cpu_policy) - 0usize];
    ["Offset of field: xen_sysctl__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(xen_sysctl__bindgen_ty_1, pad) - 0usize];
};
impl Default for xen_sysctl__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_sysctl"][::std::mem::size_of::<xen_sysctl>() - 136usize];
    ["Alignment of xen_sysctl"][::std::mem::align_of::<xen_sysctl>() - 8usize];
    ["Offset of field: xen_sysctl::cmd"][::std::mem::offset_of!(xen_sysctl, cmd) - 0usize];
    ["Offset of field: xen_sysctl::interface_version"]
        [::std::mem::offset_of!(xen_sysctl, interface_version) - 4usize];
    ["Offset of field: xen_sysctl::u"][::std::mem::offset_of!(xen_sysctl, u) - 8usize];
};
impl Default for xen_sysctl {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_sysctl_t = xen_sysctl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_sysctl_t {
    pub p: *mut xen_sysctl_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_sysctl_t"]
        [::std::mem::size_of::<__guest_handle_xen_sysctl_t>() - 8usize];
    ["Alignment of __guest_handle_xen_sysctl_t"]
        [::std::mem::align_of::<__guest_handle_xen_sysctl_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_sysctl_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_sysctl_t, p) - 0usize];
};
impl Default for __guest_handle_xen_sysctl_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_sysctl_t {
    pub p: *const xen_sysctl_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_sysctl_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_sysctl_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_sysctl_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_sysctl_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_sysctl_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_sysctl_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_sysctl_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_extraversion_t = [::std::os::raw::c_char; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_compile_info {
    pub compiler: [::std::os::raw::c_char; 64usize],
    pub compile_by: [::std::os::raw::c_char; 16usize],
    pub compile_domain: [::std::os::raw::c_char; 32usize],
    pub compile_date: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_compile_info"][::std::mem::size_of::<xen_compile_info>() - 144usize];
    ["Alignment of xen_compile_info"][::std::mem::align_of::<xen_compile_info>() - 1usize];
    ["Offset of field: xen_compile_info::compiler"]
        [::std::mem::offset_of!(xen_compile_info, compiler) - 0usize];
    ["Offset of field: xen_compile_info::compile_by"]
        [::std::mem::offset_of!(xen_compile_info, compile_by) - 64usize];
    ["Offset of field: xen_compile_info::compile_domain"]
        [::std::mem::offset_of!(xen_compile_info, compile_domain) - 80usize];
    ["Offset of field: xen_compile_info::compile_date"]
        [::std::mem::offset_of!(xen_compile_info, compile_date) - 112usize];
};
impl Default for xen_compile_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_compile_info_t = xen_compile_info;
pub type xen_capabilities_info_t = [::std::os::raw::c_char; 1024usize];
pub type xen_changeset_info_t = [::std::os::raw::c_char; 64usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_platform_parameters {
    pub virt_start: xen_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_platform_parameters"][::std::mem::size_of::<xen_platform_parameters>() - 8usize];
    ["Alignment of xen_platform_parameters"]
        [::std::mem::align_of::<xen_platform_parameters>() - 8usize];
    ["Offset of field: xen_platform_parameters::virt_start"]
        [::std::mem::offset_of!(xen_platform_parameters, virt_start) - 0usize];
};
pub type xen_platform_parameters_t = xen_platform_parameters;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_feature_info {
    pub submap_idx: u32,
    pub submap: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_feature_info"][::std::mem::size_of::<xen_feature_info>() - 8usize];
    ["Alignment of xen_feature_info"][::std::mem::align_of::<xen_feature_info>() - 4usize];
    ["Offset of field: xen_feature_info::submap_idx"]
        [::std::mem::offset_of!(xen_feature_info, submap_idx) - 0usize];
    ["Offset of field: xen_feature_info::submap"]
        [::std::mem::offset_of!(xen_feature_info, submap) - 4usize];
};
pub type xen_feature_info_t = xen_feature_info;
pub type xen_commandline_t = [::std::os::raw::c_char; 1024usize];
#[repr(C)]
#[derive(Debug, Default)]
pub struct xen_build_id {
    pub len: u32,
    pub buf: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_build_id"][::std::mem::size_of::<xen_build_id>() - 4usize];
    ["Alignment of xen_build_id"][::std::mem::align_of::<xen_build_id>() - 4usize];
    ["Offset of field: xen_build_id::len"][::std::mem::offset_of!(xen_build_id, len) - 0usize];
    ["Offset of field: xen_build_id::buf"][::std::mem::offset_of!(xen_build_id, buf) - 4usize];
};
pub type xen_build_id_t = xen_build_id;
#[repr(C)]
#[derive(Debug, Default)]
pub struct xen_varbuf {
    pub len: u32,
    pub buf: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_varbuf"][::std::mem::size_of::<xen_varbuf>() - 4usize];
    ["Alignment of xen_varbuf"][::std::mem::align_of::<xen_varbuf>() - 4usize];
    ["Offset of field: xen_varbuf::len"][::std::mem::offset_of!(xen_varbuf, len) - 0usize];
    ["Offset of field: xen_varbuf::buf"][::std::mem::offset_of!(xen_varbuf, buf) - 4usize];
};
pub type xen_varbuf_t = xen_varbuf;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_shutdown {
    pub reason: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_shutdown"][::std::mem::size_of::<sched_shutdown>() - 4usize];
    ["Alignment of sched_shutdown"][::std::mem::align_of::<sched_shutdown>() - 4usize];
    ["Offset of field: sched_shutdown::reason"]
        [::std::mem::offset_of!(sched_shutdown, reason) - 0usize];
};
pub type sched_shutdown_t = sched_shutdown;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_shutdown_t {
    pub p: *mut sched_shutdown_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_sched_shutdown_t"]
        [::std::mem::size_of::<__guest_handle_sched_shutdown_t>() - 8usize];
    ["Alignment of __guest_handle_sched_shutdown_t"]
        [::std::mem::align_of::<__guest_handle_sched_shutdown_t>() - 8usize];
    ["Offset of field: __guest_handle_sched_shutdown_t::p"]
        [::std::mem::offset_of!(__guest_handle_sched_shutdown_t, p) - 0usize];
};
impl Default for __guest_handle_sched_shutdown_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_shutdown_t {
    pub p: *const sched_shutdown_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_sched_shutdown_t"]
        [::std::mem::size_of::<__guest_handle_const_sched_shutdown_t>() - 8usize];
    ["Alignment of __guest_handle_const_sched_shutdown_t"]
        [::std::mem::align_of::<__guest_handle_const_sched_shutdown_t>() - 8usize];
    ["Offset of field: __guest_handle_const_sched_shutdown_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_sched_shutdown_t, p) - 0usize];
};
impl Default for __guest_handle_const_sched_shutdown_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_poll {
    pub ports: __guest_handle_evtchn_port_t,
    pub nr_ports: ::std::os::raw::c_uint,
    pub timeout: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_poll"][::std::mem::size_of::<sched_poll>() - 24usize];
    ["Alignment of sched_poll"][::std::mem::align_of::<sched_poll>() - 8usize];
    ["Offset of field: sched_poll::ports"][::std::mem::offset_of!(sched_poll, ports) - 0usize];
    ["Offset of field: sched_poll::nr_ports"]
        [::std::mem::offset_of!(sched_poll, nr_ports) - 8usize];
    ["Offset of field: sched_poll::timeout"][::std::mem::offset_of!(sched_poll, timeout) - 16usize];
};
impl Default for sched_poll {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type sched_poll_t = sched_poll;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_poll_t {
    pub p: *mut sched_poll_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_sched_poll_t"]
        [::std::mem::size_of::<__guest_handle_sched_poll_t>() - 8usize];
    ["Alignment of __guest_handle_sched_poll_t"]
        [::std::mem::align_of::<__guest_handle_sched_poll_t>() - 8usize];
    ["Offset of field: __guest_handle_sched_poll_t::p"]
        [::std::mem::offset_of!(__guest_handle_sched_poll_t, p) - 0usize];
};
impl Default for __guest_handle_sched_poll_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_poll_t {
    pub p: *const sched_poll_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_sched_poll_t"]
        [::std::mem::size_of::<__guest_handle_const_sched_poll_t>() - 8usize];
    ["Alignment of __guest_handle_const_sched_poll_t"]
        [::std::mem::align_of::<__guest_handle_const_sched_poll_t>() - 8usize];
    ["Offset of field: __guest_handle_const_sched_poll_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_sched_poll_t, p) - 0usize];
};
impl Default for __guest_handle_const_sched_poll_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_remote_shutdown {
    pub domain_id: domid_t,
    pub reason: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_remote_shutdown"][::std::mem::size_of::<sched_remote_shutdown>() - 8usize];
    ["Alignment of sched_remote_shutdown"]
        [::std::mem::align_of::<sched_remote_shutdown>() - 4usize];
    ["Offset of field: sched_remote_shutdown::domain_id"]
        [::std::mem::offset_of!(sched_remote_shutdown, domain_id) - 0usize];
    ["Offset of field: sched_remote_shutdown::reason"]
        [::std::mem::offset_of!(sched_remote_shutdown, reason) - 4usize];
};
pub type sched_remote_shutdown_t = sched_remote_shutdown;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_remote_shutdown_t {
    pub p: *mut sched_remote_shutdown_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_sched_remote_shutdown_t"]
        [::std::mem::size_of::<__guest_handle_sched_remote_shutdown_t>() - 8usize];
    ["Alignment of __guest_handle_sched_remote_shutdown_t"]
        [::std::mem::align_of::<__guest_handle_sched_remote_shutdown_t>() - 8usize];
    ["Offset of field: __guest_handle_sched_remote_shutdown_t::p"]
        [::std::mem::offset_of!(__guest_handle_sched_remote_shutdown_t, p) - 0usize];
};
impl Default for __guest_handle_sched_remote_shutdown_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_remote_shutdown_t {
    pub p: *const sched_remote_shutdown_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_sched_remote_shutdown_t"]
        [::std::mem::size_of::<__guest_handle_const_sched_remote_shutdown_t>() - 8usize];
    ["Alignment of __guest_handle_const_sched_remote_shutdown_t"]
        [::std::mem::align_of::<__guest_handle_const_sched_remote_shutdown_t>() - 8usize];
    ["Offset of field: __guest_handle_const_sched_remote_shutdown_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_sched_remote_shutdown_t, p) - 0usize];
};
impl Default for __guest_handle_const_sched_remote_shutdown_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_watchdog {
    pub id: u32,
    pub timeout: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_watchdog"][::std::mem::size_of::<sched_watchdog>() - 8usize];
    ["Alignment of sched_watchdog"][::std::mem::align_of::<sched_watchdog>() - 4usize];
    ["Offset of field: sched_watchdog::id"][::std::mem::offset_of!(sched_watchdog, id) - 0usize];
    ["Offset of field: sched_watchdog::timeout"]
        [::std::mem::offset_of!(sched_watchdog, timeout) - 4usize];
};
pub type sched_watchdog_t = sched_watchdog;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_watchdog_t {
    pub p: *mut sched_watchdog_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_sched_watchdog_t"]
        [::std::mem::size_of::<__guest_handle_sched_watchdog_t>() - 8usize];
    ["Alignment of __guest_handle_sched_watchdog_t"]
        [::std::mem::align_of::<__guest_handle_sched_watchdog_t>() - 8usize];
    ["Offset of field: __guest_handle_sched_watchdog_t::p"]
        [::std::mem::offset_of!(__guest_handle_sched_watchdog_t, p) - 0usize];
};
impl Default for __guest_handle_sched_watchdog_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_watchdog_t {
    pub p: *const sched_watchdog_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_sched_watchdog_t"]
        [::std::mem::size_of::<__guest_handle_const_sched_watchdog_t>() - 8usize];
    ["Alignment of __guest_handle_const_sched_watchdog_t"]
        [::std::mem::align_of::<__guest_handle_const_sched_watchdog_t>() - 8usize];
    ["Offset of field: __guest_handle_const_sched_watchdog_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_sched_watchdog_t, p) - 0usize];
};
impl Default for __guest_handle_const_sched_watchdog_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_pin_override {
    pub pcpu: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_pin_override"][::std::mem::size_of::<sched_pin_override>() - 4usize];
    ["Alignment of sched_pin_override"][::std::mem::align_of::<sched_pin_override>() - 4usize];
    ["Offset of field: sched_pin_override::pcpu"]
        [::std::mem::offset_of!(sched_pin_override, pcpu) - 0usize];
};
pub type sched_pin_override_t = sched_pin_override;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_sched_pin_override_t {
    pub p: *mut sched_pin_override_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_sched_pin_override_t"]
        [::std::mem::size_of::<__guest_handle_sched_pin_override_t>() - 8usize];
    ["Alignment of __guest_handle_sched_pin_override_t"]
        [::std::mem::align_of::<__guest_handle_sched_pin_override_t>() - 8usize];
    ["Offset of field: __guest_handle_sched_pin_override_t::p"]
        [::std::mem::offset_of!(__guest_handle_sched_pin_override_t, p) - 0usize];
};
impl Default for __guest_handle_sched_pin_override_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_sched_pin_override_t {
    pub p: *const sched_pin_override_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_sched_pin_override_t"]
        [::std::mem::size_of::<__guest_handle_const_sched_pin_override_t>() - 8usize];
    ["Alignment of __guest_handle_const_sched_pin_override_t"]
        [::std::mem::align_of::<__guest_handle_const_sched_pin_override_t>() - 8usize];
    ["Offset of field: __guest_handle_const_sched_pin_override_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_sched_pin_override_t, p) - 0usize];
};
impl Default for __guest_handle_const_sched_pin_override_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ioservid_t = u16;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_create_ioreq_server {
    pub handle_bufioreq: u8,
    pub pad: [u8; 3usize],
    pub id: ioservid_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_create_ioreq_server"]
        [::std::mem::size_of::<xen_dm_op_create_ioreq_server>() - 6usize];
    ["Alignment of xen_dm_op_create_ioreq_server"]
        [::std::mem::align_of::<xen_dm_op_create_ioreq_server>() - 2usize];
    ["Offset of field: xen_dm_op_create_ioreq_server::handle_bufioreq"]
        [::std::mem::offset_of!(xen_dm_op_create_ioreq_server, handle_bufioreq) - 0usize];
    ["Offset of field: xen_dm_op_create_ioreq_server::pad"]
        [::std::mem::offset_of!(xen_dm_op_create_ioreq_server, pad) - 1usize];
    ["Offset of field: xen_dm_op_create_ioreq_server::id"]
        [::std::mem::offset_of!(xen_dm_op_create_ioreq_server, id) - 4usize];
};
pub type xen_dm_op_create_ioreq_server_t = xen_dm_op_create_ioreq_server;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_get_ioreq_server_info {
    pub id: ioservid_t,
    pub flags: u16,
    pub bufioreq_port: evtchn_port_t,
    pub ioreq_gfn: u64,
    pub bufioreq_gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_get_ioreq_server_info"]
        [::std::mem::size_of::<xen_dm_op_get_ioreq_server_info>() - 24usize];
    ["Alignment of xen_dm_op_get_ioreq_server_info"]
        [::std::mem::align_of::<xen_dm_op_get_ioreq_server_info>() - 8usize];
    ["Offset of field: xen_dm_op_get_ioreq_server_info::id"]
        [::std::mem::offset_of!(xen_dm_op_get_ioreq_server_info, id) - 0usize];
    ["Offset of field: xen_dm_op_get_ioreq_server_info::flags"]
        [::std::mem::offset_of!(xen_dm_op_get_ioreq_server_info, flags) - 2usize];
    ["Offset of field: xen_dm_op_get_ioreq_server_info::bufioreq_port"]
        [::std::mem::offset_of!(xen_dm_op_get_ioreq_server_info, bufioreq_port) - 4usize];
    ["Offset of field: xen_dm_op_get_ioreq_server_info::ioreq_gfn"]
        [::std::mem::offset_of!(xen_dm_op_get_ioreq_server_info, ioreq_gfn) - 8usize];
    ["Offset of field: xen_dm_op_get_ioreq_server_info::bufioreq_gfn"]
        [::std::mem::offset_of!(xen_dm_op_get_ioreq_server_info, bufioreq_gfn) - 16usize];
};
pub type xen_dm_op_get_ioreq_server_info_t = xen_dm_op_get_ioreq_server_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_ioreq_server_range {
    pub id: ioservid_t,
    pub pad: u16,
    pub type_: u32,
    pub start: u64,
    pub end: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_ioreq_server_range"]
        [::std::mem::size_of::<xen_dm_op_ioreq_server_range>() - 24usize];
    ["Alignment of xen_dm_op_ioreq_server_range"]
        [::std::mem::align_of::<xen_dm_op_ioreq_server_range>() - 8usize];
    ["Offset of field: xen_dm_op_ioreq_server_range::id"]
        [::std::mem::offset_of!(xen_dm_op_ioreq_server_range, id) - 0usize];
    ["Offset of field: xen_dm_op_ioreq_server_range::pad"]
        [::std::mem::offset_of!(xen_dm_op_ioreq_server_range, pad) - 2usize];
    ["Offset of field: xen_dm_op_ioreq_server_range::type_"]
        [::std::mem::offset_of!(xen_dm_op_ioreq_server_range, type_) - 4usize];
    ["Offset of field: xen_dm_op_ioreq_server_range::start"]
        [::std::mem::offset_of!(xen_dm_op_ioreq_server_range, start) - 8usize];
    ["Offset of field: xen_dm_op_ioreq_server_range::end"]
        [::std::mem::offset_of!(xen_dm_op_ioreq_server_range, end) - 16usize];
};
pub type xen_dm_op_ioreq_server_range_t = xen_dm_op_ioreq_server_range;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_set_ioreq_server_state {
    pub id: ioservid_t,
    pub enabled: u8,
    pub pad: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_set_ioreq_server_state"]
        [::std::mem::size_of::<xen_dm_op_set_ioreq_server_state>() - 4usize];
    ["Alignment of xen_dm_op_set_ioreq_server_state"]
        [::std::mem::align_of::<xen_dm_op_set_ioreq_server_state>() - 2usize];
    ["Offset of field: xen_dm_op_set_ioreq_server_state::id"]
        [::std::mem::offset_of!(xen_dm_op_set_ioreq_server_state, id) - 0usize];
    ["Offset of field: xen_dm_op_set_ioreq_server_state::enabled"]
        [::std::mem::offset_of!(xen_dm_op_set_ioreq_server_state, enabled) - 2usize];
    ["Offset of field: xen_dm_op_set_ioreq_server_state::pad"]
        [::std::mem::offset_of!(xen_dm_op_set_ioreq_server_state, pad) - 3usize];
};
pub type xen_dm_op_set_ioreq_server_state_t = xen_dm_op_set_ioreq_server_state;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_destroy_ioreq_server {
    pub id: ioservid_t,
    pub pad: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_destroy_ioreq_server"]
        [::std::mem::size_of::<xen_dm_op_destroy_ioreq_server>() - 4usize];
    ["Alignment of xen_dm_op_destroy_ioreq_server"]
        [::std::mem::align_of::<xen_dm_op_destroy_ioreq_server>() - 2usize];
    ["Offset of field: xen_dm_op_destroy_ioreq_server::id"]
        [::std::mem::offset_of!(xen_dm_op_destroy_ioreq_server, id) - 0usize];
    ["Offset of field: xen_dm_op_destroy_ioreq_server::pad"]
        [::std::mem::offset_of!(xen_dm_op_destroy_ioreq_server, pad) - 2usize];
};
pub type xen_dm_op_destroy_ioreq_server_t = xen_dm_op_destroy_ioreq_server;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_track_dirty_vram {
    pub nr: u32,
    pub pad: u32,
    pub first_pfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_track_dirty_vram"]
        [::std::mem::size_of::<xen_dm_op_track_dirty_vram>() - 16usize];
    ["Alignment of xen_dm_op_track_dirty_vram"]
        [::std::mem::align_of::<xen_dm_op_track_dirty_vram>() - 8usize];
    ["Offset of field: xen_dm_op_track_dirty_vram::nr"]
        [::std::mem::offset_of!(xen_dm_op_track_dirty_vram, nr) - 0usize];
    ["Offset of field: xen_dm_op_track_dirty_vram::pad"]
        [::std::mem::offset_of!(xen_dm_op_track_dirty_vram, pad) - 4usize];
    ["Offset of field: xen_dm_op_track_dirty_vram::first_pfn"]
        [::std::mem::offset_of!(xen_dm_op_track_dirty_vram, first_pfn) - 8usize];
};
pub type xen_dm_op_track_dirty_vram_t = xen_dm_op_track_dirty_vram;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_set_pci_intx_level {
    pub domain: u16,
    pub bus: u8,
    pub device: u8,
    pub intx: u8,
    pub level: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_set_pci_intx_level"]
        [::std::mem::size_of::<xen_dm_op_set_pci_intx_level>() - 6usize];
    ["Alignment of xen_dm_op_set_pci_intx_level"]
        [::std::mem::align_of::<xen_dm_op_set_pci_intx_level>() - 2usize];
    ["Offset of field: xen_dm_op_set_pci_intx_level::domain"]
        [::std::mem::offset_of!(xen_dm_op_set_pci_intx_level, domain) - 0usize];
    ["Offset of field: xen_dm_op_set_pci_intx_level::bus"]
        [::std::mem::offset_of!(xen_dm_op_set_pci_intx_level, bus) - 2usize];
    ["Offset of field: xen_dm_op_set_pci_intx_level::device"]
        [::std::mem::offset_of!(xen_dm_op_set_pci_intx_level, device) - 3usize];
    ["Offset of field: xen_dm_op_set_pci_intx_level::intx"]
        [::std::mem::offset_of!(xen_dm_op_set_pci_intx_level, intx) - 4usize];
    ["Offset of field: xen_dm_op_set_pci_intx_level::level"]
        [::std::mem::offset_of!(xen_dm_op_set_pci_intx_level, level) - 5usize];
};
pub type xen_dm_op_set_pci_intx_level_t = xen_dm_op_set_pci_intx_level;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_set_isa_irq_level {
    pub isa_irq: u8,
    pub level: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_set_isa_irq_level"]
        [::std::mem::size_of::<xen_dm_op_set_isa_irq_level>() - 2usize];
    ["Alignment of xen_dm_op_set_isa_irq_level"]
        [::std::mem::align_of::<xen_dm_op_set_isa_irq_level>() - 1usize];
    ["Offset of field: xen_dm_op_set_isa_irq_level::isa_irq"]
        [::std::mem::offset_of!(xen_dm_op_set_isa_irq_level, isa_irq) - 0usize];
    ["Offset of field: xen_dm_op_set_isa_irq_level::level"]
        [::std::mem::offset_of!(xen_dm_op_set_isa_irq_level, level) - 1usize];
};
pub type xen_dm_op_set_isa_irq_level_t = xen_dm_op_set_isa_irq_level;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_set_pci_link_route {
    pub link: u8,
    pub isa_irq: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_set_pci_link_route"]
        [::std::mem::size_of::<xen_dm_op_set_pci_link_route>() - 2usize];
    ["Alignment of xen_dm_op_set_pci_link_route"]
        [::std::mem::align_of::<xen_dm_op_set_pci_link_route>() - 1usize];
    ["Offset of field: xen_dm_op_set_pci_link_route::link"]
        [::std::mem::offset_of!(xen_dm_op_set_pci_link_route, link) - 0usize];
    ["Offset of field: xen_dm_op_set_pci_link_route::isa_irq"]
        [::std::mem::offset_of!(xen_dm_op_set_pci_link_route, isa_irq) - 1usize];
};
pub type xen_dm_op_set_pci_link_route_t = xen_dm_op_set_pci_link_route;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_modified_memory {
    pub nr_extents: u32,
    pub opaque: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_modified_memory"]
        [::std::mem::size_of::<xen_dm_op_modified_memory>() - 8usize];
    ["Alignment of xen_dm_op_modified_memory"]
        [::std::mem::align_of::<xen_dm_op_modified_memory>() - 4usize];
    ["Offset of field: xen_dm_op_modified_memory::nr_extents"]
        [::std::mem::offset_of!(xen_dm_op_modified_memory, nr_extents) - 0usize];
    ["Offset of field: xen_dm_op_modified_memory::opaque"]
        [::std::mem::offset_of!(xen_dm_op_modified_memory, opaque) - 4usize];
};
pub type xen_dm_op_modified_memory_t = xen_dm_op_modified_memory;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_modified_memory_extent {
    pub nr: u32,
    pub pad: u32,
    pub first_pfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_modified_memory_extent"]
        [::std::mem::size_of::<xen_dm_op_modified_memory_extent>() - 16usize];
    ["Alignment of xen_dm_op_modified_memory_extent"]
        [::std::mem::align_of::<xen_dm_op_modified_memory_extent>() - 8usize];
    ["Offset of field: xen_dm_op_modified_memory_extent::nr"]
        [::std::mem::offset_of!(xen_dm_op_modified_memory_extent, nr) - 0usize];
    ["Offset of field: xen_dm_op_modified_memory_extent::pad"]
        [::std::mem::offset_of!(xen_dm_op_modified_memory_extent, pad) - 4usize];
    ["Offset of field: xen_dm_op_modified_memory_extent::first_pfn"]
        [::std::mem::offset_of!(xen_dm_op_modified_memory_extent, first_pfn) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_set_mem_type {
    pub nr: u32,
    pub mem_type: u16,
    pub pad: u16,
    pub first_pfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_set_mem_type"][::std::mem::size_of::<xen_dm_op_set_mem_type>() - 16usize];
    ["Alignment of xen_dm_op_set_mem_type"]
        [::std::mem::align_of::<xen_dm_op_set_mem_type>() - 8usize];
    ["Offset of field: xen_dm_op_set_mem_type::nr"]
        [::std::mem::offset_of!(xen_dm_op_set_mem_type, nr) - 0usize];
    ["Offset of field: xen_dm_op_set_mem_type::mem_type"]
        [::std::mem::offset_of!(xen_dm_op_set_mem_type, mem_type) - 4usize];
    ["Offset of field: xen_dm_op_set_mem_type::pad"]
        [::std::mem::offset_of!(xen_dm_op_set_mem_type, pad) - 6usize];
    ["Offset of field: xen_dm_op_set_mem_type::first_pfn"]
        [::std::mem::offset_of!(xen_dm_op_set_mem_type, first_pfn) - 8usize];
};
pub type xen_dm_op_set_mem_type_t = xen_dm_op_set_mem_type;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_inject_event {
    pub vcpuid: u32,
    pub vector: u8,
    pub type_: u8,
    pub insn_len: u8,
    pub pad0: u8,
    pub error_code: u32,
    pub pad1: u32,
    pub cr2: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_inject_event"][::std::mem::size_of::<xen_dm_op_inject_event>() - 24usize];
    ["Alignment of xen_dm_op_inject_event"]
        [::std::mem::align_of::<xen_dm_op_inject_event>() - 8usize];
    ["Offset of field: xen_dm_op_inject_event::vcpuid"]
        [::std::mem::offset_of!(xen_dm_op_inject_event, vcpuid) - 0usize];
    ["Offset of field: xen_dm_op_inject_event::vector"]
        [::std::mem::offset_of!(xen_dm_op_inject_event, vector) - 4usize];
    ["Offset of field: xen_dm_op_inject_event::type_"]
        [::std::mem::offset_of!(xen_dm_op_inject_event, type_) - 5usize];
    ["Offset of field: xen_dm_op_inject_event::insn_len"]
        [::std::mem::offset_of!(xen_dm_op_inject_event, insn_len) - 6usize];
    ["Offset of field: xen_dm_op_inject_event::pad0"]
        [::std::mem::offset_of!(xen_dm_op_inject_event, pad0) - 7usize];
    ["Offset of field: xen_dm_op_inject_event::error_code"]
        [::std::mem::offset_of!(xen_dm_op_inject_event, error_code) - 8usize];
    ["Offset of field: xen_dm_op_inject_event::pad1"]
        [::std::mem::offset_of!(xen_dm_op_inject_event, pad1) - 12usize];
    ["Offset of field: xen_dm_op_inject_event::cr2"]
        [::std::mem::offset_of!(xen_dm_op_inject_event, cr2) - 16usize];
};
pub type xen_dm_op_inject_event_t = xen_dm_op_inject_event;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_inject_msi {
    pub data: u32,
    pub pad: u32,
    pub addr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_inject_msi"][::std::mem::size_of::<xen_dm_op_inject_msi>() - 16usize];
    ["Alignment of xen_dm_op_inject_msi"][::std::mem::align_of::<xen_dm_op_inject_msi>() - 8usize];
    ["Offset of field: xen_dm_op_inject_msi::data"]
        [::std::mem::offset_of!(xen_dm_op_inject_msi, data) - 0usize];
    ["Offset of field: xen_dm_op_inject_msi::pad"]
        [::std::mem::offset_of!(xen_dm_op_inject_msi, pad) - 4usize];
    ["Offset of field: xen_dm_op_inject_msi::addr"]
        [::std::mem::offset_of!(xen_dm_op_inject_msi, addr) - 8usize];
};
pub type xen_dm_op_inject_msi_t = xen_dm_op_inject_msi;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_map_mem_type_to_ioreq_server {
    pub id: ioservid_t,
    pub type_: u16,
    pub flags: u32,
    pub opaque: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_map_mem_type_to_ioreq_server"]
        [::std::mem::size_of::<xen_dm_op_map_mem_type_to_ioreq_server>() - 16usize];
    ["Alignment of xen_dm_op_map_mem_type_to_ioreq_server"]
        [::std::mem::align_of::<xen_dm_op_map_mem_type_to_ioreq_server>() - 8usize];
    ["Offset of field: xen_dm_op_map_mem_type_to_ioreq_server::id"]
        [::std::mem::offset_of!(xen_dm_op_map_mem_type_to_ioreq_server, id) - 0usize];
    ["Offset of field: xen_dm_op_map_mem_type_to_ioreq_server::type_"]
        [::std::mem::offset_of!(xen_dm_op_map_mem_type_to_ioreq_server, type_) - 2usize];
    ["Offset of field: xen_dm_op_map_mem_type_to_ioreq_server::flags"]
        [::std::mem::offset_of!(xen_dm_op_map_mem_type_to_ioreq_server, flags) - 4usize];
    ["Offset of field: xen_dm_op_map_mem_type_to_ioreq_server::opaque"]
        [::std::mem::offset_of!(xen_dm_op_map_mem_type_to_ioreq_server, opaque) - 8usize];
};
pub type xen_dm_op_map_mem_type_to_ioreq_server_t = xen_dm_op_map_mem_type_to_ioreq_server;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_remote_shutdown {
    pub reason: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_remote_shutdown"]
        [::std::mem::size_of::<xen_dm_op_remote_shutdown>() - 4usize];
    ["Alignment of xen_dm_op_remote_shutdown"]
        [::std::mem::align_of::<xen_dm_op_remote_shutdown>() - 4usize];
    ["Offset of field: xen_dm_op_remote_shutdown::reason"]
        [::std::mem::offset_of!(xen_dm_op_remote_shutdown, reason) - 0usize];
};
pub type xen_dm_op_remote_shutdown_t = xen_dm_op_remote_shutdown;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_relocate_memory {
    pub size: u32,
    pub pad: u32,
    pub src_gfn: u64,
    pub dst_gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_relocate_memory"]
        [::std::mem::size_of::<xen_dm_op_relocate_memory>() - 24usize];
    ["Alignment of xen_dm_op_relocate_memory"]
        [::std::mem::align_of::<xen_dm_op_relocate_memory>() - 8usize];
    ["Offset of field: xen_dm_op_relocate_memory::size"]
        [::std::mem::offset_of!(xen_dm_op_relocate_memory, size) - 0usize];
    ["Offset of field: xen_dm_op_relocate_memory::pad"]
        [::std::mem::offset_of!(xen_dm_op_relocate_memory, pad) - 4usize];
    ["Offset of field: xen_dm_op_relocate_memory::src_gfn"]
        [::std::mem::offset_of!(xen_dm_op_relocate_memory, src_gfn) - 8usize];
    ["Offset of field: xen_dm_op_relocate_memory::dst_gfn"]
        [::std::mem::offset_of!(xen_dm_op_relocate_memory, dst_gfn) - 16usize];
};
pub type xen_dm_op_relocate_memory_t = xen_dm_op_relocate_memory;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_pin_memory_cacheattr {
    pub start: u64,
    pub end: u64,
    pub type_: u32,
    pub pad: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_pin_memory_cacheattr"]
        [::std::mem::size_of::<xen_dm_op_pin_memory_cacheattr>() - 24usize];
    ["Alignment of xen_dm_op_pin_memory_cacheattr"]
        [::std::mem::align_of::<xen_dm_op_pin_memory_cacheattr>() - 8usize];
    ["Offset of field: xen_dm_op_pin_memory_cacheattr::start"]
        [::std::mem::offset_of!(xen_dm_op_pin_memory_cacheattr, start) - 0usize];
    ["Offset of field: xen_dm_op_pin_memory_cacheattr::end"]
        [::std::mem::offset_of!(xen_dm_op_pin_memory_cacheattr, end) - 8usize];
    ["Offset of field: xen_dm_op_pin_memory_cacheattr::type_"]
        [::std::mem::offset_of!(xen_dm_op_pin_memory_cacheattr, type_) - 16usize];
    ["Offset of field: xen_dm_op_pin_memory_cacheattr::pad"]
        [::std::mem::offset_of!(xen_dm_op_pin_memory_cacheattr, pad) - 20usize];
};
pub type xen_dm_op_pin_memory_cacheattr_t = xen_dm_op_pin_memory_cacheattr;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_set_irq_level {
    pub irq: u32,
    pub level: u8,
    pub pad: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_set_irq_level"][::std::mem::size_of::<xen_dm_op_set_irq_level>() - 8usize];
    ["Alignment of xen_dm_op_set_irq_level"]
        [::std::mem::align_of::<xen_dm_op_set_irq_level>() - 4usize];
    ["Offset of field: xen_dm_op_set_irq_level::irq"]
        [::std::mem::offset_of!(xen_dm_op_set_irq_level, irq) - 0usize];
    ["Offset of field: xen_dm_op_set_irq_level::level"]
        [::std::mem::offset_of!(xen_dm_op_set_irq_level, level) - 4usize];
    ["Offset of field: xen_dm_op_set_irq_level::pad"]
        [::std::mem::offset_of!(xen_dm_op_set_irq_level, pad) - 5usize];
};
pub type xen_dm_op_set_irq_level_t = xen_dm_op_set_irq_level;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_dm_op_nr_vcpus {
    pub vcpus: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_nr_vcpus"][::std::mem::size_of::<xen_dm_op_nr_vcpus>() - 4usize];
    ["Alignment of xen_dm_op_nr_vcpus"][::std::mem::align_of::<xen_dm_op_nr_vcpus>() - 4usize];
    ["Offset of field: xen_dm_op_nr_vcpus::vcpus"]
        [::std::mem::offset_of!(xen_dm_op_nr_vcpus, vcpus) - 0usize];
};
pub type xen_dm_op_nr_vcpus_t = xen_dm_op_nr_vcpus;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_dm_op {
    pub op: u32,
    pub pad: u32,
    pub u: xen_dm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_dm_op__bindgen_ty_1 {
    pub create_ioreq_server: xen_dm_op_create_ioreq_server_t,
    pub get_ioreq_server_info: xen_dm_op_get_ioreq_server_info_t,
    pub map_io_range_to_ioreq_server: xen_dm_op_ioreq_server_range_t,
    pub unmap_io_range_from_ioreq_server: xen_dm_op_ioreq_server_range_t,
    pub set_ioreq_server_state: xen_dm_op_set_ioreq_server_state_t,
    pub destroy_ioreq_server: xen_dm_op_destroy_ioreq_server_t,
    pub track_dirty_vram: xen_dm_op_track_dirty_vram_t,
    pub set_pci_intx_level: xen_dm_op_set_pci_intx_level_t,
    pub set_isa_irq_level: xen_dm_op_set_isa_irq_level_t,
    pub set_irq_level: xen_dm_op_set_irq_level_t,
    pub set_pci_link_route: xen_dm_op_set_pci_link_route_t,
    pub modified_memory: xen_dm_op_modified_memory_t,
    pub set_mem_type: xen_dm_op_set_mem_type_t,
    pub inject_event: xen_dm_op_inject_event_t,
    pub inject_msi: xen_dm_op_inject_msi_t,
    pub map_mem_type_to_ioreq_server: xen_dm_op_map_mem_type_to_ioreq_server_t,
    pub remote_shutdown: xen_dm_op_remote_shutdown_t,
    pub relocate_memory: xen_dm_op_relocate_memory_t,
    pub pin_memory_cacheattr: xen_dm_op_pin_memory_cacheattr_t,
    pub nr_vcpus: xen_dm_op_nr_vcpus_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op__bindgen_ty_1"][::std::mem::size_of::<xen_dm_op__bindgen_ty_1>() - 24usize];
    ["Alignment of xen_dm_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_dm_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::create_ioreq_server"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, create_ioreq_server) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::get_ioreq_server_info"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, get_ioreq_server_info) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::map_io_range_to_ioreq_server"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, map_io_range_to_ioreq_server) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::unmap_io_range_from_ioreq_server"][::std::mem::offset_of!(
        xen_dm_op__bindgen_ty_1,
        unmap_io_range_from_ioreq_server
    ) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::set_ioreq_server_state"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, set_ioreq_server_state) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::destroy_ioreq_server"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, destroy_ioreq_server) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::track_dirty_vram"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, track_dirty_vram) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::set_pci_intx_level"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, set_pci_intx_level) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::set_isa_irq_level"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, set_isa_irq_level) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::set_irq_level"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, set_irq_level) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::set_pci_link_route"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, set_pci_link_route) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::modified_memory"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, modified_memory) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::set_mem_type"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, set_mem_type) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::inject_event"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, inject_event) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::inject_msi"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, inject_msi) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::map_mem_type_to_ioreq_server"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, map_mem_type_to_ioreq_server) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::remote_shutdown"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, remote_shutdown) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::relocate_memory"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, relocate_memory) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::pin_memory_cacheattr"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, pin_memory_cacheattr) - 0usize];
    ["Offset of field: xen_dm_op__bindgen_ty_1::nr_vcpus"]
        [::std::mem::offset_of!(xen_dm_op__bindgen_ty_1, nr_vcpus) - 0usize];
};
impl Default for xen_dm_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op"][::std::mem::size_of::<xen_dm_op>() - 32usize];
    ["Alignment of xen_dm_op"][::std::mem::align_of::<xen_dm_op>() - 8usize];
    ["Offset of field: xen_dm_op::op"][::std::mem::offset_of!(xen_dm_op, op) - 0usize];
    ["Offset of field: xen_dm_op::pad"][::std::mem::offset_of!(xen_dm_op, pad) - 4usize];
    ["Offset of field: xen_dm_op::u"][::std::mem::offset_of!(xen_dm_op, u) - 8usize];
};
impl Default for xen_dm_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_buf {
    pub h: __guest_handle_void,
    pub size: xen_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_dm_op_buf"][::std::mem::size_of::<xen_dm_op_buf>() - 16usize];
    ["Alignment of xen_dm_op_buf"][::std::mem::align_of::<xen_dm_op_buf>() - 8usize];
    ["Offset of field: xen_dm_op_buf::h"][::std::mem::offset_of!(xen_dm_op_buf, h) - 0usize];
    ["Offset of field: xen_dm_op_buf::size"][::std::mem::offset_of!(xen_dm_op_buf, size) - 8usize];
};
impl Default for xen_dm_op_buf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_dm_op_buf_t = xen_dm_op_buf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_dm_op_buf_t {
    pub p: *mut xen_dm_op_buf_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_dm_op_buf_t"]
        [::std::mem::size_of::<__guest_handle_xen_dm_op_buf_t>() - 8usize];
    ["Alignment of __guest_handle_xen_dm_op_buf_t"]
        [::std::mem::align_of::<__guest_handle_xen_dm_op_buf_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_dm_op_buf_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_dm_op_buf_t, p) - 0usize];
};
impl Default for __guest_handle_xen_dm_op_buf_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_dm_op_buf_t {
    pub p: *const xen_dm_op_buf_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_dm_op_buf_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_dm_op_buf_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_dm_op_buf_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_dm_op_buf_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_dm_op_buf_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_dm_op_buf_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_dm_op_buf_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_rec {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub u: t_rec__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union t_rec__bindgen_ty_1 {
    pub cycles: t_rec__bindgen_ty_1__bindgen_ty_1,
    pub nocycles: t_rec__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct t_rec__bindgen_ty_1__bindgen_ty_1 {
    pub cycles_lo: u32,
    pub cycles_hi: u32,
    pub extra_u32: [u32; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_rec__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<t_rec__bindgen_ty_1__bindgen_ty_1>() - 36usize];
    ["Alignment of t_rec__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<t_rec__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: t_rec__bindgen_ty_1__bindgen_ty_1::cycles_lo"]
        [::std::mem::offset_of!(t_rec__bindgen_ty_1__bindgen_ty_1, cycles_lo) - 0usize];
    ["Offset of field: t_rec__bindgen_ty_1__bindgen_ty_1::cycles_hi"]
        [::std::mem::offset_of!(t_rec__bindgen_ty_1__bindgen_ty_1, cycles_hi) - 4usize];
    ["Offset of field: t_rec__bindgen_ty_1__bindgen_ty_1::extra_u32"]
        [::std::mem::offset_of!(t_rec__bindgen_ty_1__bindgen_ty_1, extra_u32) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct t_rec__bindgen_ty_1__bindgen_ty_2 {
    pub extra_u32: [u32; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_rec__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<t_rec__bindgen_ty_1__bindgen_ty_2>() - 28usize];
    ["Alignment of t_rec__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<t_rec__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: t_rec__bindgen_ty_1__bindgen_ty_2::extra_u32"]
        [::std::mem::offset_of!(t_rec__bindgen_ty_1__bindgen_ty_2, extra_u32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_rec__bindgen_ty_1"][::std::mem::size_of::<t_rec__bindgen_ty_1>() - 36usize];
    ["Alignment of t_rec__bindgen_ty_1"][::std::mem::align_of::<t_rec__bindgen_ty_1>() - 4usize];
    ["Offset of field: t_rec__bindgen_ty_1::cycles"]
        [::std::mem::offset_of!(t_rec__bindgen_ty_1, cycles) - 0usize];
    ["Offset of field: t_rec__bindgen_ty_1::nocycles"]
        [::std::mem::offset_of!(t_rec__bindgen_ty_1, nocycles) - 0usize];
};
impl Default for t_rec__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_rec"][::std::mem::size_of::<t_rec>() - 40usize];
    ["Alignment of t_rec"][::std::mem::align_of::<t_rec>() - 4usize];
    ["Offset of field: t_rec::u"][::std::mem::offset_of!(t_rec, u) - 4usize];
};
impl Default for t_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl t_rec {
    #[inline]
    pub fn event(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn extra_u32(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_extra_u32(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn cycles_included(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cycles_included(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        event: u32,
        extra_u32: u32,
        cycles_included: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let event: u32 = unsafe { ::std::mem::transmute(event) };
            event as u64
        });
        __bindgen_bitfield_unit.set(28usize, 3u8, {
            let extra_u32: u32 = unsafe { ::std::mem::transmute(extra_u32) };
            extra_u32 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let cycles_included: u32 = unsafe { ::std::mem::transmute(cycles_included) };
            cycles_included as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct t_buf {
    pub cons: u32,
    pub prod: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_buf"][::std::mem::size_of::<t_buf>() - 8usize];
    ["Alignment of t_buf"][::std::mem::align_of::<t_buf>() - 4usize];
    ["Offset of field: t_buf::cons"][::std::mem::offset_of!(t_buf, cons) - 0usize];
    ["Offset of field: t_buf::prod"][::std::mem::offset_of!(t_buf, prod) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct t_info {
    pub tbuf_size: u16,
    pub mfn_offset: __IncompleteArrayField<u16>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of t_info"][::std::mem::size_of::<t_info>() - 2usize];
    ["Alignment of t_info"][::std::mem::align_of::<t_info>() - 2usize];
    ["Offset of field: t_info::tbuf_size"][::std::mem::offset_of!(t_info, tbuf_size) - 0usize];
    ["Offset of field: t_info::mfn_offset"][::std::mem::offset_of!(t_info, mfn_offset) - 2usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_param {
    pub domid: domid_t,
    pub pad: u16,
    pub index: u32,
    pub value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_param"][::std::mem::size_of::<xen_hvm_param>() - 16usize];
    ["Alignment of xen_hvm_param"][::std::mem::align_of::<xen_hvm_param>() - 8usize];
    ["Offset of field: xen_hvm_param::domid"]
        [::std::mem::offset_of!(xen_hvm_param, domid) - 0usize];
    ["Offset of field: xen_hvm_param::pad"][::std::mem::offset_of!(xen_hvm_param, pad) - 2usize];
    ["Offset of field: xen_hvm_param::index"]
        [::std::mem::offset_of!(xen_hvm_param, index) - 4usize];
    ["Offset of field: xen_hvm_param::value"]
        [::std::mem::offset_of!(xen_hvm_param, value) - 8usize];
};
pub type xen_hvm_param_t = xen_hvm_param;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_param_t {
    pub p: *mut xen_hvm_param_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_param_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_param_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_param_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_param_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_param_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_param_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_param_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_param_t {
    pub p: *const xen_hvm_param_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_param_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_param_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_param_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_param_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_param_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_param_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_param_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_suppress_ve {
    pub view: u16,
    pub suppress_ve: u8,
    pub pad1: u8,
    pub pad2: u32,
    pub gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_suppress_ve"]
        [::std::mem::size_of::<xen_hvm_altp2m_suppress_ve>() - 16usize];
    ["Alignment of xen_hvm_altp2m_suppress_ve"]
        [::std::mem::align_of::<xen_hvm_altp2m_suppress_ve>() - 8usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve::view"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve, view) - 0usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve::suppress_ve"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve, suppress_ve) - 2usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve::pad1"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve, pad1) - 3usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve::pad2"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve, pad2) - 4usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve::gfn"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve, gfn) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_suppress_ve_multi {
    pub view: u16,
    pub suppress_ve: u8,
    pub pad1: u8,
    pub first_error: i32,
    pub first_gfn: u64,
    pub last_gfn: u64,
    pub first_error_gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_suppress_ve_multi"]
        [::std::mem::size_of::<xen_hvm_altp2m_suppress_ve_multi>() - 32usize];
    ["Alignment of xen_hvm_altp2m_suppress_ve_multi"]
        [::std::mem::align_of::<xen_hvm_altp2m_suppress_ve_multi>() - 8usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve_multi::view"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve_multi, view) - 0usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve_multi::suppress_ve"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve_multi, suppress_ve) - 2usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve_multi::pad1"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve_multi, pad1) - 3usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve_multi::first_error"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve_multi, first_error) - 4usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve_multi::first_gfn"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve_multi, first_gfn) - 8usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve_multi::last_gfn"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve_multi, last_gfn) - 16usize];
    ["Offset of field: xen_hvm_altp2m_suppress_ve_multi::first_error_gfn"]
        [::std::mem::offset_of!(xen_hvm_altp2m_suppress_ve_multi, first_error_gfn) - 24usize];
};
pub const hvmmem_type_t_HVMMEM_ram_rw: hvmmem_type_t = 0;
pub const hvmmem_type_t_HVMMEM_ram_ro: hvmmem_type_t = 1;
pub const hvmmem_type_t_HVMMEM_mmio_dm: hvmmem_type_t = 2;
pub const hvmmem_type_t_HVMMEM_unused: hvmmem_type_t = 3;
pub const hvmmem_type_t_HVMMEM_ioreq_server: hvmmem_type_t = 4;
pub type hvmmem_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_pagetable_dying {
    pub domid: domid_t,
    pub pad: [u16; 3usize],
    pub gpa: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_pagetable_dying"][::std::mem::size_of::<xen_hvm_pagetable_dying>() - 16usize];
    ["Alignment of xen_hvm_pagetable_dying"]
        [::std::mem::align_of::<xen_hvm_pagetable_dying>() - 8usize];
    ["Offset of field: xen_hvm_pagetable_dying::domid"]
        [::std::mem::offset_of!(xen_hvm_pagetable_dying, domid) - 0usize];
    ["Offset of field: xen_hvm_pagetable_dying::pad"]
        [::std::mem::offset_of!(xen_hvm_pagetable_dying, pad) - 2usize];
    ["Offset of field: xen_hvm_pagetable_dying::gpa"]
        [::std::mem::offset_of!(xen_hvm_pagetable_dying, gpa) - 8usize];
};
pub type xen_hvm_pagetable_dying_t = xen_hvm_pagetable_dying;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_pagetable_dying_t {
    pub p: *mut xen_hvm_pagetable_dying_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_pagetable_dying_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_pagetable_dying_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_pagetable_dying_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_pagetable_dying_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_pagetable_dying_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_pagetable_dying_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_pagetable_dying_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_pagetable_dying_t {
    pub p: *const xen_hvm_pagetable_dying_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_pagetable_dying_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_pagetable_dying_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_pagetable_dying_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_pagetable_dying_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_pagetable_dying_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_pagetable_dying_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_pagetable_dying_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_get_time {
    pub now: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_get_time"][::std::mem::size_of::<xen_hvm_get_time>() - 8usize];
    ["Alignment of xen_hvm_get_time"][::std::mem::align_of::<xen_hvm_get_time>() - 8usize];
    ["Offset of field: xen_hvm_get_time::now"]
        [::std::mem::offset_of!(xen_hvm_get_time, now) - 0usize];
};
pub type xen_hvm_get_time_t = xen_hvm_get_time;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_get_time_t {
    pub p: *mut xen_hvm_get_time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_get_time_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_get_time_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_get_time_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_get_time_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_get_time_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_get_time_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_get_time_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_get_time_t {
    pub p: *const xen_hvm_get_time_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_get_time_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_get_time_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_get_time_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_get_time_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_get_time_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_get_time_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_get_time_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_xentrace {
    pub event: u16,
    pub extra_bytes: u16,
    pub extra: [u8; 28usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_xentrace"][::std::mem::size_of::<xen_hvm_xentrace>() - 32usize];
    ["Alignment of xen_hvm_xentrace"][::std::mem::align_of::<xen_hvm_xentrace>() - 2usize];
    ["Offset of field: xen_hvm_xentrace::event"]
        [::std::mem::offset_of!(xen_hvm_xentrace, event) - 0usize];
    ["Offset of field: xen_hvm_xentrace::extra_bytes"]
        [::std::mem::offset_of!(xen_hvm_xentrace, extra_bytes) - 2usize];
    ["Offset of field: xen_hvm_xentrace::extra"]
        [::std::mem::offset_of!(xen_hvm_xentrace, extra) - 4usize];
};
pub type xen_hvm_xentrace_t = xen_hvm_xentrace;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_xentrace_t {
    pub p: *mut xen_hvm_xentrace_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_xentrace_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_xentrace_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_xentrace_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_xentrace_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_xentrace_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_xentrace_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_xentrace_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_xentrace_t {
    pub p: *const xen_hvm_xentrace_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_xentrace_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_xentrace_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_xentrace_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_xentrace_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_xentrace_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_xentrace_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_xentrace_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_get_mem_type {
    pub domid: domid_t,
    pub mem_type: u16,
    pub pad: [u16; 2usize],
    pub pfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_get_mem_type"][::std::mem::size_of::<xen_hvm_get_mem_type>() - 16usize];
    ["Alignment of xen_hvm_get_mem_type"][::std::mem::align_of::<xen_hvm_get_mem_type>() - 8usize];
    ["Offset of field: xen_hvm_get_mem_type::domid"]
        [::std::mem::offset_of!(xen_hvm_get_mem_type, domid) - 0usize];
    ["Offset of field: xen_hvm_get_mem_type::mem_type"]
        [::std::mem::offset_of!(xen_hvm_get_mem_type, mem_type) - 2usize];
    ["Offset of field: xen_hvm_get_mem_type::pad"]
        [::std::mem::offset_of!(xen_hvm_get_mem_type, pad) - 4usize];
    ["Offset of field: xen_hvm_get_mem_type::pfn"]
        [::std::mem::offset_of!(xen_hvm_get_mem_type, pfn) - 8usize];
};
pub type xen_hvm_get_mem_type_t = xen_hvm_get_mem_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_get_mem_type_t {
    pub p: *mut xen_hvm_get_mem_type_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_get_mem_type_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_get_mem_type_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_get_mem_type_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_get_mem_type_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_get_mem_type_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_get_mem_type_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_get_mem_type_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_get_mem_type_t {
    pub p: *const xen_hvm_get_mem_type_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_get_mem_type_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_get_mem_type_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_get_mem_type_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_get_mem_type_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_get_mem_type_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_get_mem_type_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_get_mem_type_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_evtchn_upcall_vector {
    pub vcpu: u32,
    pub vector: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_evtchn_upcall_vector"]
        [::std::mem::size_of::<xen_hvm_evtchn_upcall_vector>() - 8usize];
    ["Alignment of xen_hvm_evtchn_upcall_vector"]
        [::std::mem::align_of::<xen_hvm_evtchn_upcall_vector>() - 4usize];
    ["Offset of field: xen_hvm_evtchn_upcall_vector::vcpu"]
        [::std::mem::offset_of!(xen_hvm_evtchn_upcall_vector, vcpu) - 0usize];
    ["Offset of field: xen_hvm_evtchn_upcall_vector::vector"]
        [::std::mem::offset_of!(xen_hvm_evtchn_upcall_vector, vector) - 4usize];
};
pub type xen_hvm_evtchn_upcall_vector_t = xen_hvm_evtchn_upcall_vector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_evtchn_upcall_vector_t {
    pub p: *mut xen_hvm_evtchn_upcall_vector_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_evtchn_upcall_vector_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_evtchn_upcall_vector_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_evtchn_upcall_vector_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_evtchn_upcall_vector_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_evtchn_upcall_vector_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_evtchn_upcall_vector_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_evtchn_upcall_vector_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_evtchn_upcall_vector_t {
    pub p: *const xen_hvm_evtchn_upcall_vector_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_evtchn_upcall_vector_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_evtchn_upcall_vector_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_evtchn_upcall_vector_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_evtchn_upcall_vector_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_evtchn_upcall_vector_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_evtchn_upcall_vector_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_evtchn_upcall_vector_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_domain_state {
    pub state: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_domain_state"]
        [::std::mem::size_of::<xen_hvm_altp2m_domain_state>() - 1usize];
    ["Alignment of xen_hvm_altp2m_domain_state"]
        [::std::mem::align_of::<xen_hvm_altp2m_domain_state>() - 1usize];
    ["Offset of field: xen_hvm_altp2m_domain_state::state"]
        [::std::mem::offset_of!(xen_hvm_altp2m_domain_state, state) - 0usize];
};
pub type xen_hvm_altp2m_domain_state_t = xen_hvm_altp2m_domain_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_domain_state_t {
    pub p: *mut xen_hvm_altp2m_domain_state_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_altp2m_domain_state_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_domain_state_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_altp2m_domain_state_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_domain_state_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_altp2m_domain_state_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_altp2m_domain_state_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_altp2m_domain_state_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_domain_state_t {
    pub p: *const xen_hvm_altp2m_domain_state_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_altp2m_domain_state_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_domain_state_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_altp2m_domain_state_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_domain_state_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_altp2m_domain_state_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_altp2m_domain_state_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_altp2m_domain_state_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_vcpu_enable_notify {
    pub vcpu_id: u32,
    pub pad: u32,
    pub gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_vcpu_enable_notify"]
        [::std::mem::size_of::<xen_hvm_altp2m_vcpu_enable_notify>() - 16usize];
    ["Alignment of xen_hvm_altp2m_vcpu_enable_notify"]
        [::std::mem::align_of::<xen_hvm_altp2m_vcpu_enable_notify>() - 8usize];
    ["Offset of field: xen_hvm_altp2m_vcpu_enable_notify::vcpu_id"]
        [::std::mem::offset_of!(xen_hvm_altp2m_vcpu_enable_notify, vcpu_id) - 0usize];
    ["Offset of field: xen_hvm_altp2m_vcpu_enable_notify::pad"]
        [::std::mem::offset_of!(xen_hvm_altp2m_vcpu_enable_notify, pad) - 4usize];
    ["Offset of field: xen_hvm_altp2m_vcpu_enable_notify::gfn"]
        [::std::mem::offset_of!(xen_hvm_altp2m_vcpu_enable_notify, gfn) - 8usize];
};
pub type xen_hvm_altp2m_vcpu_enable_notify_t = xen_hvm_altp2m_vcpu_enable_notify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_enable_notify_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_enable_notify_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t"][::std::mem::size_of::<
        __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t,
    >() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t"][::std::mem::align_of::<
        __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t,
    >() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t::p"][::std::mem::offset_of!(
        __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t,
        p
    ) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_vcpu_disable_notify {
    pub vcpu_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_vcpu_disable_notify"]
        [::std::mem::size_of::<xen_hvm_altp2m_vcpu_disable_notify>() - 4usize];
    ["Alignment of xen_hvm_altp2m_vcpu_disable_notify"]
        [::std::mem::align_of::<xen_hvm_altp2m_vcpu_disable_notify>() - 4usize];
    ["Offset of field: xen_hvm_altp2m_vcpu_disable_notify::vcpu_id"]
        [::std::mem::offset_of!(xen_hvm_altp2m_vcpu_disable_notify, vcpu_id) - 0usize];
};
pub type xen_hvm_altp2m_vcpu_disable_notify_t = xen_hvm_altp2m_vcpu_disable_notify;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_disable_notify_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_disable_notify_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t"][::std::mem::size_of::<
        __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t,
    >() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t"][::std::mem::align_of::<
        __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t,
    >() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t::p"][::std::mem::offset_of!(
        __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t,
        p
    ) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_view {
    pub view: u16,
    pub hvmmem_default_access: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_view"][::std::mem::size_of::<xen_hvm_altp2m_view>() - 4usize];
    ["Alignment of xen_hvm_altp2m_view"][::std::mem::align_of::<xen_hvm_altp2m_view>() - 2usize];
    ["Offset of field: xen_hvm_altp2m_view::view"]
        [::std::mem::offset_of!(xen_hvm_altp2m_view, view) - 0usize];
    ["Offset of field: xen_hvm_altp2m_view::hvmmem_default_access"]
        [::std::mem::offset_of!(xen_hvm_altp2m_view, hvmmem_default_access) - 2usize];
};
pub type xen_hvm_altp2m_view_t = xen_hvm_altp2m_view;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_view_t {
    pub p: *mut xen_hvm_altp2m_view_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_altp2m_view_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_view_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_altp2m_view_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_view_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_altp2m_view_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_altp2m_view_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_altp2m_view_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_view_t {
    pub p: *const xen_hvm_altp2m_view_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_altp2m_view_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_view_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_altp2m_view_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_view_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_altp2m_view_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_altp2m_view_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_altp2m_view_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_mem_access {
    pub view: u16,
    pub access: u16,
    pub pad: u32,
    pub gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_mem_access"]
        [::std::mem::size_of::<xen_hvm_altp2m_mem_access>() - 16usize];
    ["Alignment of xen_hvm_altp2m_mem_access"]
        [::std::mem::align_of::<xen_hvm_altp2m_mem_access>() - 8usize];
    ["Offset of field: xen_hvm_altp2m_mem_access::view"]
        [::std::mem::offset_of!(xen_hvm_altp2m_mem_access, view) - 0usize];
    ["Offset of field: xen_hvm_altp2m_mem_access::access"]
        [::std::mem::offset_of!(xen_hvm_altp2m_mem_access, access) - 2usize];
    ["Offset of field: xen_hvm_altp2m_mem_access::pad"]
        [::std::mem::offset_of!(xen_hvm_altp2m_mem_access, pad) - 4usize];
    ["Offset of field: xen_hvm_altp2m_mem_access::gfn"]
        [::std::mem::offset_of!(xen_hvm_altp2m_mem_access, gfn) - 8usize];
};
pub type xen_hvm_altp2m_mem_access_t = xen_hvm_altp2m_mem_access;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_mem_access_t {
    pub p: *mut xen_hvm_altp2m_mem_access_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_altp2m_mem_access_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_mem_access_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_altp2m_mem_access_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_mem_access_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_altp2m_mem_access_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_altp2m_mem_access_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_altp2m_mem_access_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_mem_access_t {
    pub p: *const xen_hvm_altp2m_mem_access_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_altp2m_mem_access_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_mem_access_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_altp2m_mem_access_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_mem_access_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_altp2m_mem_access_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_altp2m_mem_access_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_altp2m_mem_access_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_set_mem_access_multi {
    pub view: u16,
    pub pad: u16,
    pub nr: u32,
    pub opaque: u64,
    pub pfn_list: __guest_handle_const_uint64,
    pub access_list: __guest_handle_const_uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_set_mem_access_multi"]
        [::std::mem::size_of::<xen_hvm_altp2m_set_mem_access_multi>() - 32usize];
    ["Alignment of xen_hvm_altp2m_set_mem_access_multi"]
        [::std::mem::align_of::<xen_hvm_altp2m_set_mem_access_multi>() - 8usize];
    ["Offset of field: xen_hvm_altp2m_set_mem_access_multi::view"]
        [::std::mem::offset_of!(xen_hvm_altp2m_set_mem_access_multi, view) - 0usize];
    ["Offset of field: xen_hvm_altp2m_set_mem_access_multi::pad"]
        [::std::mem::offset_of!(xen_hvm_altp2m_set_mem_access_multi, pad) - 2usize];
    ["Offset of field: xen_hvm_altp2m_set_mem_access_multi::nr"]
        [::std::mem::offset_of!(xen_hvm_altp2m_set_mem_access_multi, nr) - 4usize];
    ["Offset of field: xen_hvm_altp2m_set_mem_access_multi::opaque"]
        [::std::mem::offset_of!(xen_hvm_altp2m_set_mem_access_multi, opaque) - 8usize];
    ["Offset of field: xen_hvm_altp2m_set_mem_access_multi::pfn_list"]
        [::std::mem::offset_of!(xen_hvm_altp2m_set_mem_access_multi, pfn_list) - 16usize];
    ["Offset of field: xen_hvm_altp2m_set_mem_access_multi::access_list"]
        [::std::mem::offset_of!(xen_hvm_altp2m_set_mem_access_multi, access_list) - 24usize];
};
impl Default for xen_hvm_altp2m_set_mem_access_multi {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_change_gfn {
    pub view: u16,
    pub pad1: u16,
    pub pad2: u32,
    pub old_gfn: u64,
    pub new_gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_change_gfn"]
        [::std::mem::size_of::<xen_hvm_altp2m_change_gfn>() - 24usize];
    ["Alignment of xen_hvm_altp2m_change_gfn"]
        [::std::mem::align_of::<xen_hvm_altp2m_change_gfn>() - 8usize];
    ["Offset of field: xen_hvm_altp2m_change_gfn::view"]
        [::std::mem::offset_of!(xen_hvm_altp2m_change_gfn, view) - 0usize];
    ["Offset of field: xen_hvm_altp2m_change_gfn::pad1"]
        [::std::mem::offset_of!(xen_hvm_altp2m_change_gfn, pad1) - 2usize];
    ["Offset of field: xen_hvm_altp2m_change_gfn::pad2"]
        [::std::mem::offset_of!(xen_hvm_altp2m_change_gfn, pad2) - 4usize];
    ["Offset of field: xen_hvm_altp2m_change_gfn::old_gfn"]
        [::std::mem::offset_of!(xen_hvm_altp2m_change_gfn, old_gfn) - 8usize];
    ["Offset of field: xen_hvm_altp2m_change_gfn::new_gfn"]
        [::std::mem::offset_of!(xen_hvm_altp2m_change_gfn, new_gfn) - 16usize];
};
pub type xen_hvm_altp2m_change_gfn_t = xen_hvm_altp2m_change_gfn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_change_gfn_t {
    pub p: *mut xen_hvm_altp2m_change_gfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_altp2m_change_gfn_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_change_gfn_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_altp2m_change_gfn_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_change_gfn_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_altp2m_change_gfn_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_altp2m_change_gfn_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_altp2m_change_gfn_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_change_gfn_t {
    pub p: *const xen_hvm_altp2m_change_gfn_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_altp2m_change_gfn_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_change_gfn_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_altp2m_change_gfn_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_change_gfn_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_altp2m_change_gfn_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_altp2m_change_gfn_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_altp2m_change_gfn_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_get_vcpu_p2m_idx {
    pub vcpu_id: u32,
    pub altp2m_idx: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_get_vcpu_p2m_idx"]
        [::std::mem::size_of::<xen_hvm_altp2m_get_vcpu_p2m_idx>() - 8usize];
    ["Alignment of xen_hvm_altp2m_get_vcpu_p2m_idx"]
        [::std::mem::align_of::<xen_hvm_altp2m_get_vcpu_p2m_idx>() - 4usize];
    ["Offset of field: xen_hvm_altp2m_get_vcpu_p2m_idx::vcpu_id"]
        [::std::mem::offset_of!(xen_hvm_altp2m_get_vcpu_p2m_idx, vcpu_id) - 0usize];
    ["Offset of field: xen_hvm_altp2m_get_vcpu_p2m_idx::altp2m_idx"]
        [::std::mem::offset_of!(xen_hvm_altp2m_get_vcpu_p2m_idx, altp2m_idx) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_hvm_altp2m_set_visibility {
    pub altp2m_idx: u16,
    pub visible: u8,
    pub pad: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_set_visibility"]
        [::std::mem::size_of::<xen_hvm_altp2m_set_visibility>() - 4usize];
    ["Alignment of xen_hvm_altp2m_set_visibility"]
        [::std::mem::align_of::<xen_hvm_altp2m_set_visibility>() - 2usize];
    ["Offset of field: xen_hvm_altp2m_set_visibility::altp2m_idx"]
        [::std::mem::offset_of!(xen_hvm_altp2m_set_visibility, altp2m_idx) - 0usize];
    ["Offset of field: xen_hvm_altp2m_set_visibility::visible"]
        [::std::mem::offset_of!(xen_hvm_altp2m_set_visibility, visible) - 2usize];
    ["Offset of field: xen_hvm_altp2m_set_visibility::pad"]
        [::std::mem::offset_of!(xen_hvm_altp2m_set_visibility, pad) - 3usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_hvm_altp2m_op {
    pub version: u32,
    pub cmd: u32,
    pub domain: domid_t,
    pub pad1: u16,
    pub pad2: u32,
    pub u: xen_hvm_altp2m_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_hvm_altp2m_op__bindgen_ty_1 {
    pub domain_state: xen_hvm_altp2m_domain_state,
    pub enable_notify: xen_hvm_altp2m_vcpu_enable_notify,
    pub view: xen_hvm_altp2m_view,
    pub mem_access: xen_hvm_altp2m_mem_access,
    pub change_gfn: xen_hvm_altp2m_change_gfn,
    pub set_mem_access_multi: xen_hvm_altp2m_set_mem_access_multi,
    pub suppress_ve: xen_hvm_altp2m_suppress_ve,
    pub suppress_ve_multi: xen_hvm_altp2m_suppress_ve_multi,
    pub disable_notify: xen_hvm_altp2m_vcpu_disable_notify,
    pub get_vcpu_p2m_idx: xen_hvm_altp2m_get_vcpu_p2m_idx,
    pub set_visibility: xen_hvm_altp2m_set_visibility,
    pub pad: [u8; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_hvm_altp2m_op__bindgen_ty_1>() - 64usize];
    ["Alignment of xen_hvm_altp2m_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_hvm_altp2m_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::domain_state"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, domain_state) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::enable_notify"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, enable_notify) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::view"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, view) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::mem_access"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, mem_access) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::change_gfn"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, change_gfn) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::set_mem_access_multi"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, set_mem_access_multi) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::suppress_ve"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, suppress_ve) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::suppress_ve_multi"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, suppress_ve_multi) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::disable_notify"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, disable_notify) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::get_vcpu_p2m_idx"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, get_vcpu_p2m_idx) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::set_visibility"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, set_visibility) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op__bindgen_ty_1, pad) - 0usize];
};
impl Default for xen_hvm_altp2m_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_hvm_altp2m_op"][::std::mem::size_of::<xen_hvm_altp2m_op>() - 80usize];
    ["Alignment of xen_hvm_altp2m_op"][::std::mem::align_of::<xen_hvm_altp2m_op>() - 8usize];
    ["Offset of field: xen_hvm_altp2m_op::version"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op, version) - 0usize];
    ["Offset of field: xen_hvm_altp2m_op::cmd"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op, cmd) - 4usize];
    ["Offset of field: xen_hvm_altp2m_op::domain"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op, domain) - 8usize];
    ["Offset of field: xen_hvm_altp2m_op::pad1"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op, pad1) - 10usize];
    ["Offset of field: xen_hvm_altp2m_op::pad2"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op, pad2) - 12usize];
    ["Offset of field: xen_hvm_altp2m_op::u"]
        [::std::mem::offset_of!(xen_hvm_altp2m_op, u) - 16usize];
};
impl Default for xen_hvm_altp2m_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_hvm_altp2m_op_t = xen_hvm_altp2m_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_hvm_altp2m_op_t {
    pub p: *mut xen_hvm_altp2m_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_hvm_altp2m_op_t"]
        [::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_op_t>() - 8usize];
    ["Alignment of __guest_handle_xen_hvm_altp2m_op_t"]
        [::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_op_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_hvm_altp2m_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_hvm_altp2m_op_t, p) - 0usize];
};
impl Default for __guest_handle_xen_hvm_altp2m_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_hvm_altp2m_op_t {
    pub p: *const xen_hvm_altp2m_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_hvm_altp2m_op_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_hvm_altp2m_op_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_hvm_altp2m_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_hvm_altp2m_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_hvm_altp2m_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_load {
    pub buffer: __guest_handle_char,
    pub size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_load"][::std::mem::size_of::<xen_flask_load>() - 16usize];
    ["Alignment of xen_flask_load"][::std::mem::align_of::<xen_flask_load>() - 8usize];
    ["Offset of field: xen_flask_load::buffer"]
        [::std::mem::offset_of!(xen_flask_load, buffer) - 0usize];
    ["Offset of field: xen_flask_load::size"]
        [::std::mem::offset_of!(xen_flask_load, size) - 8usize];
};
impl Default for xen_flask_load {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_flask_load_t = xen_flask_load;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_flask_setenforce {
    pub enforcing: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_setenforce"][::std::mem::size_of::<xen_flask_setenforce>() - 4usize];
    ["Alignment of xen_flask_setenforce"][::std::mem::align_of::<xen_flask_setenforce>() - 4usize];
    ["Offset of field: xen_flask_setenforce::enforcing"]
        [::std::mem::offset_of!(xen_flask_setenforce, enforcing) - 0usize];
};
pub type xen_flask_setenforce_t = xen_flask_setenforce;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_sid_context {
    pub sid: u32,
    pub size: u32,
    pub context: __guest_handle_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_sid_context"][::std::mem::size_of::<xen_flask_sid_context>() - 16usize];
    ["Alignment of xen_flask_sid_context"]
        [::std::mem::align_of::<xen_flask_sid_context>() - 8usize];
    ["Offset of field: xen_flask_sid_context::sid"]
        [::std::mem::offset_of!(xen_flask_sid_context, sid) - 0usize];
    ["Offset of field: xen_flask_sid_context::size"]
        [::std::mem::offset_of!(xen_flask_sid_context, size) - 4usize];
    ["Offset of field: xen_flask_sid_context::context"]
        [::std::mem::offset_of!(xen_flask_sid_context, context) - 8usize];
};
impl Default for xen_flask_sid_context {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_flask_sid_context_t = xen_flask_sid_context;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_flask_access {
    pub ssid: u32,
    pub tsid: u32,
    pub tclass: u32,
    pub req: u32,
    pub allowed: u32,
    pub audit_allow: u32,
    pub audit_deny: u32,
    pub seqno: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_access"][::std::mem::size_of::<xen_flask_access>() - 32usize];
    ["Alignment of xen_flask_access"][::std::mem::align_of::<xen_flask_access>() - 4usize];
    ["Offset of field: xen_flask_access::ssid"]
        [::std::mem::offset_of!(xen_flask_access, ssid) - 0usize];
    ["Offset of field: xen_flask_access::tsid"]
        [::std::mem::offset_of!(xen_flask_access, tsid) - 4usize];
    ["Offset of field: xen_flask_access::tclass"]
        [::std::mem::offset_of!(xen_flask_access, tclass) - 8usize];
    ["Offset of field: xen_flask_access::req"]
        [::std::mem::offset_of!(xen_flask_access, req) - 12usize];
    ["Offset of field: xen_flask_access::allowed"]
        [::std::mem::offset_of!(xen_flask_access, allowed) - 16usize];
    ["Offset of field: xen_flask_access::audit_allow"]
        [::std::mem::offset_of!(xen_flask_access, audit_allow) - 20usize];
    ["Offset of field: xen_flask_access::audit_deny"]
        [::std::mem::offset_of!(xen_flask_access, audit_deny) - 24usize];
    ["Offset of field: xen_flask_access::seqno"]
        [::std::mem::offset_of!(xen_flask_access, seqno) - 28usize];
};
pub type xen_flask_access_t = xen_flask_access;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_flask_transition {
    pub ssid: u32,
    pub tsid: u32,
    pub tclass: u32,
    pub newsid: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_transition"][::std::mem::size_of::<xen_flask_transition>() - 16usize];
    ["Alignment of xen_flask_transition"][::std::mem::align_of::<xen_flask_transition>() - 4usize];
    ["Offset of field: xen_flask_transition::ssid"]
        [::std::mem::offset_of!(xen_flask_transition, ssid) - 0usize];
    ["Offset of field: xen_flask_transition::tsid"]
        [::std::mem::offset_of!(xen_flask_transition, tsid) - 4usize];
    ["Offset of field: xen_flask_transition::tclass"]
        [::std::mem::offset_of!(xen_flask_transition, tclass) - 8usize];
    ["Offset of field: xen_flask_transition::newsid"]
        [::std::mem::offset_of!(xen_flask_transition, newsid) - 12usize];
};
pub type xen_flask_transition_t = xen_flask_transition;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_boolean {
    pub bool_id: u32,
    pub enforcing: u8,
    pub pending: u8,
    pub new_value: u8,
    pub commit: u8,
    pub size: u32,
    pub name: __guest_handle_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_boolean"][::std::mem::size_of::<xen_flask_boolean>() - 24usize];
    ["Alignment of xen_flask_boolean"][::std::mem::align_of::<xen_flask_boolean>() - 8usize];
    ["Offset of field: xen_flask_boolean::bool_id"]
        [::std::mem::offset_of!(xen_flask_boolean, bool_id) - 0usize];
    ["Offset of field: xen_flask_boolean::enforcing"]
        [::std::mem::offset_of!(xen_flask_boolean, enforcing) - 4usize];
    ["Offset of field: xen_flask_boolean::pending"]
        [::std::mem::offset_of!(xen_flask_boolean, pending) - 5usize];
    ["Offset of field: xen_flask_boolean::new_value"]
        [::std::mem::offset_of!(xen_flask_boolean, new_value) - 6usize];
    ["Offset of field: xen_flask_boolean::commit"]
        [::std::mem::offset_of!(xen_flask_boolean, commit) - 7usize];
    ["Offset of field: xen_flask_boolean::size"]
        [::std::mem::offset_of!(xen_flask_boolean, size) - 8usize];
    ["Offset of field: xen_flask_boolean::name"]
        [::std::mem::offset_of!(xen_flask_boolean, name) - 16usize];
};
impl Default for xen_flask_boolean {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_flask_boolean_t = xen_flask_boolean;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_flask_setavc_threshold {
    pub threshold: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_setavc_threshold"]
        [::std::mem::size_of::<xen_flask_setavc_threshold>() - 4usize];
    ["Alignment of xen_flask_setavc_threshold"]
        [::std::mem::align_of::<xen_flask_setavc_threshold>() - 4usize];
    ["Offset of field: xen_flask_setavc_threshold::threshold"]
        [::std::mem::offset_of!(xen_flask_setavc_threshold, threshold) - 0usize];
};
pub type xen_flask_setavc_threshold_t = xen_flask_setavc_threshold;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_flask_hash_stats {
    pub entries: u32,
    pub buckets_used: u32,
    pub buckets_total: u32,
    pub max_chain_len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_hash_stats"][::std::mem::size_of::<xen_flask_hash_stats>() - 16usize];
    ["Alignment of xen_flask_hash_stats"][::std::mem::align_of::<xen_flask_hash_stats>() - 4usize];
    ["Offset of field: xen_flask_hash_stats::entries"]
        [::std::mem::offset_of!(xen_flask_hash_stats, entries) - 0usize];
    ["Offset of field: xen_flask_hash_stats::buckets_used"]
        [::std::mem::offset_of!(xen_flask_hash_stats, buckets_used) - 4usize];
    ["Offset of field: xen_flask_hash_stats::buckets_total"]
        [::std::mem::offset_of!(xen_flask_hash_stats, buckets_total) - 8usize];
    ["Offset of field: xen_flask_hash_stats::max_chain_len"]
        [::std::mem::offset_of!(xen_flask_hash_stats, max_chain_len) - 12usize];
};
pub type xen_flask_hash_stats_t = xen_flask_hash_stats;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_flask_cache_stats {
    pub cpu: u32,
    pub lookups: u32,
    pub hits: u32,
    pub misses: u32,
    pub allocations: u32,
    pub reclaims: u32,
    pub frees: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_cache_stats"][::std::mem::size_of::<xen_flask_cache_stats>() - 28usize];
    ["Alignment of xen_flask_cache_stats"]
        [::std::mem::align_of::<xen_flask_cache_stats>() - 4usize];
    ["Offset of field: xen_flask_cache_stats::cpu"]
        [::std::mem::offset_of!(xen_flask_cache_stats, cpu) - 0usize];
    ["Offset of field: xen_flask_cache_stats::lookups"]
        [::std::mem::offset_of!(xen_flask_cache_stats, lookups) - 4usize];
    ["Offset of field: xen_flask_cache_stats::hits"]
        [::std::mem::offset_of!(xen_flask_cache_stats, hits) - 8usize];
    ["Offset of field: xen_flask_cache_stats::misses"]
        [::std::mem::offset_of!(xen_flask_cache_stats, misses) - 12usize];
    ["Offset of field: xen_flask_cache_stats::allocations"]
        [::std::mem::offset_of!(xen_flask_cache_stats, allocations) - 16usize];
    ["Offset of field: xen_flask_cache_stats::reclaims"]
        [::std::mem::offset_of!(xen_flask_cache_stats, reclaims) - 20usize];
    ["Offset of field: xen_flask_cache_stats::frees"]
        [::std::mem::offset_of!(xen_flask_cache_stats, frees) - 24usize];
};
pub type xen_flask_cache_stats_t = xen_flask_cache_stats;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_flask_ocontext {
    pub ocon: u32,
    pub sid: u32,
    pub low: u64,
    pub high: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_ocontext"][::std::mem::size_of::<xen_flask_ocontext>() - 24usize];
    ["Alignment of xen_flask_ocontext"][::std::mem::align_of::<xen_flask_ocontext>() - 8usize];
    ["Offset of field: xen_flask_ocontext::ocon"]
        [::std::mem::offset_of!(xen_flask_ocontext, ocon) - 0usize];
    ["Offset of field: xen_flask_ocontext::sid"]
        [::std::mem::offset_of!(xen_flask_ocontext, sid) - 4usize];
    ["Offset of field: xen_flask_ocontext::low"]
        [::std::mem::offset_of!(xen_flask_ocontext, low) - 8usize];
    ["Offset of field: xen_flask_ocontext::high"]
        [::std::mem::offset_of!(xen_flask_ocontext, high) - 16usize];
};
pub type xen_flask_ocontext_t = xen_flask_ocontext;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_flask_peersid {
    pub evtchn: evtchn_port_t,
    pub sid: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_peersid"][::std::mem::size_of::<xen_flask_peersid>() - 8usize];
    ["Alignment of xen_flask_peersid"][::std::mem::align_of::<xen_flask_peersid>() - 4usize];
    ["Offset of field: xen_flask_peersid::evtchn"]
        [::std::mem::offset_of!(xen_flask_peersid, evtchn) - 0usize];
    ["Offset of field: xen_flask_peersid::sid"]
        [::std::mem::offset_of!(xen_flask_peersid, sid) - 4usize];
};
pub type xen_flask_peersid_t = xen_flask_peersid;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_flask_relabel {
    pub domid: u32,
    pub sid: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_relabel"][::std::mem::size_of::<xen_flask_relabel>() - 8usize];
    ["Alignment of xen_flask_relabel"][::std::mem::align_of::<xen_flask_relabel>() - 4usize];
    ["Offset of field: xen_flask_relabel::domid"]
        [::std::mem::offset_of!(xen_flask_relabel, domid) - 0usize];
    ["Offset of field: xen_flask_relabel::sid"]
        [::std::mem::offset_of!(xen_flask_relabel, sid) - 4usize];
};
pub type xen_flask_relabel_t = xen_flask_relabel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_devicetree_label {
    pub sid: u32,
    pub length: u32,
    pub path: __guest_handle_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_devicetree_label"]
        [::std::mem::size_of::<xen_flask_devicetree_label>() - 16usize];
    ["Alignment of xen_flask_devicetree_label"]
        [::std::mem::align_of::<xen_flask_devicetree_label>() - 8usize];
    ["Offset of field: xen_flask_devicetree_label::sid"]
        [::std::mem::offset_of!(xen_flask_devicetree_label, sid) - 0usize];
    ["Offset of field: xen_flask_devicetree_label::length"]
        [::std::mem::offset_of!(xen_flask_devicetree_label, length) - 4usize];
    ["Offset of field: xen_flask_devicetree_label::path"]
        [::std::mem::offset_of!(xen_flask_devicetree_label, path) - 8usize];
};
impl Default for xen_flask_devicetree_label {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_flask_devicetree_label_t = xen_flask_devicetree_label;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_op {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_flask_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_flask_op__bindgen_ty_1 {
    pub load: xen_flask_load_t,
    pub enforce: xen_flask_setenforce_t,
    pub sid_context: xen_flask_sid_context_t,
    pub access: xen_flask_access_t,
    pub transition: xen_flask_transition_t,
    pub boolean: xen_flask_boolean_t,
    pub setavc_threshold: xen_flask_setavc_threshold_t,
    pub hash_stats: xen_flask_hash_stats_t,
    pub cache_stats: xen_flask_cache_stats_t,
    pub ocontext: xen_flask_ocontext_t,
    pub peersid: xen_flask_peersid_t,
    pub relabel: xen_flask_relabel_t,
    pub devicetree_label: xen_flask_devicetree_label_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_flask_op__bindgen_ty_1>() - 32usize];
    ["Alignment of xen_flask_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_flask_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::load"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, load) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::enforce"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, enforce) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::sid_context"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, sid_context) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::access"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, access) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::transition"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, transition) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::boolean"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, boolean) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::setavc_threshold"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, setavc_threshold) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::hash_stats"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, hash_stats) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::cache_stats"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, cache_stats) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::ocontext"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, ocontext) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::peersid"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, peersid) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::relabel"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, relabel) - 0usize];
    ["Offset of field: xen_flask_op__bindgen_ty_1::devicetree_label"]
        [::std::mem::offset_of!(xen_flask_op__bindgen_ty_1, devicetree_label) - 0usize];
};
impl Default for xen_flask_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_flask_op"][::std::mem::size_of::<xen_flask_op>() - 40usize];
    ["Alignment of xen_flask_op"][::std::mem::align_of::<xen_flask_op>() - 8usize];
    ["Offset of field: xen_flask_op::cmd"][::std::mem::offset_of!(xen_flask_op, cmd) - 0usize];
    ["Offset of field: xen_flask_op::interface_version"]
        [::std::mem::offset_of!(xen_flask_op, interface_version) - 4usize];
    ["Offset of field: xen_flask_op::u"][::std::mem::offset_of!(xen_flask_op, u) - 8usize];
};
impl Default for xen_flask_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_flask_op_t = xen_flask_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_flask_op_t {
    pub p: *mut xen_flask_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_flask_op_t"]
        [::std::mem::size_of::<__guest_handle_xen_flask_op_t>() - 8usize];
    ["Alignment of __guest_handle_xen_flask_op_t"]
        [::std::mem::align_of::<__guest_handle_xen_flask_op_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_flask_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_flask_op_t, p) - 0usize];
};
impl Default for __guest_handle_xen_flask_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_flask_op_t {
    pub p: *const xen_flask_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_flask_op_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_flask_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_flask_op_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_flask_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_flask_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_flask_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_flask_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_kexec_image {
    pub page_list: [::std::os::raw::c_ulong; 17usize],
    pub indirection_page: ::std::os::raw::c_ulong,
    pub start_address: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_image"][::std::mem::size_of::<xen_kexec_image>() - 152usize];
    ["Alignment of xen_kexec_image"][::std::mem::align_of::<xen_kexec_image>() - 8usize];
    ["Offset of field: xen_kexec_image::page_list"]
        [::std::mem::offset_of!(xen_kexec_image, page_list) - 0usize];
    ["Offset of field: xen_kexec_image::indirection_page"]
        [::std::mem::offset_of!(xen_kexec_image, indirection_page) - 136usize];
    ["Offset of field: xen_kexec_image::start_address"]
        [::std::mem::offset_of!(xen_kexec_image, start_address) - 144usize];
};
pub type xen_kexec_image_t = xen_kexec_image;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_kexec_exec {
    pub type_: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_exec"][::std::mem::size_of::<xen_kexec_exec>() - 4usize];
    ["Alignment of xen_kexec_exec"][::std::mem::align_of::<xen_kexec_exec>() - 4usize];
    ["Offset of field: xen_kexec_exec::type_"]
        [::std::mem::offset_of!(xen_kexec_exec, type_) - 0usize];
};
pub type xen_kexec_exec_t = xen_kexec_exec;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_kexec_load_v1 {
    pub type_: ::std::os::raw::c_int,
    pub image: xen_kexec_image_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_load_v1"][::std::mem::size_of::<xen_kexec_load_v1>() - 160usize];
    ["Alignment of xen_kexec_load_v1"][::std::mem::align_of::<xen_kexec_load_v1>() - 8usize];
    ["Offset of field: xen_kexec_load_v1::type_"]
        [::std::mem::offset_of!(xen_kexec_load_v1, type_) - 0usize];
    ["Offset of field: xen_kexec_load_v1::image"]
        [::std::mem::offset_of!(xen_kexec_load_v1, image) - 8usize];
};
pub type xen_kexec_load_v1_t = xen_kexec_load_v1;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_kexec_range {
    pub range: ::std::os::raw::c_int,
    pub nr: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_ulong,
    pub start: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_range"][::std::mem::size_of::<xen_kexec_range>() - 24usize];
    ["Alignment of xen_kexec_range"][::std::mem::align_of::<xen_kexec_range>() - 8usize];
    ["Offset of field: xen_kexec_range::range"]
        [::std::mem::offset_of!(xen_kexec_range, range) - 0usize];
    ["Offset of field: xen_kexec_range::nr"][::std::mem::offset_of!(xen_kexec_range, nr) - 4usize];
    ["Offset of field: xen_kexec_range::size"]
        [::std::mem::offset_of!(xen_kexec_range, size) - 8usize];
    ["Offset of field: xen_kexec_range::start"]
        [::std::mem::offset_of!(xen_kexec_range, start) - 16usize];
};
pub type xen_kexec_range_t = xen_kexec_range;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_kexec_segment {
    pub buf: xen_kexec_segment__bindgen_ty_1,
    pub buf_size: u64,
    pub dest_maddr: u64,
    pub dest_size: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_kexec_segment__bindgen_ty_1 {
    pub h: __guest_handle_const_void,
    pub _pad: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_segment__bindgen_ty_1"]
        [::std::mem::size_of::<xen_kexec_segment__bindgen_ty_1>() - 8usize];
    ["Alignment of xen_kexec_segment__bindgen_ty_1"]
        [::std::mem::align_of::<xen_kexec_segment__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_kexec_segment__bindgen_ty_1::h"]
        [::std::mem::offset_of!(xen_kexec_segment__bindgen_ty_1, h) - 0usize];
    ["Offset of field: xen_kexec_segment__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(xen_kexec_segment__bindgen_ty_1, _pad) - 0usize];
};
impl Default for xen_kexec_segment__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_segment"][::std::mem::size_of::<xen_kexec_segment>() - 32usize];
    ["Alignment of xen_kexec_segment"][::std::mem::align_of::<xen_kexec_segment>() - 8usize];
    ["Offset of field: xen_kexec_segment::buf"]
        [::std::mem::offset_of!(xen_kexec_segment, buf) - 0usize];
    ["Offset of field: xen_kexec_segment::buf_size"]
        [::std::mem::offset_of!(xen_kexec_segment, buf_size) - 8usize];
    ["Offset of field: xen_kexec_segment::dest_maddr"]
        [::std::mem::offset_of!(xen_kexec_segment, dest_maddr) - 16usize];
    ["Offset of field: xen_kexec_segment::dest_size"]
        [::std::mem::offset_of!(xen_kexec_segment, dest_size) - 24usize];
};
impl Default for xen_kexec_segment {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_kexec_segment_t = xen_kexec_segment;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_kexec_segment_t {
    pub p: *mut xen_kexec_segment_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_kexec_segment_t"]
        [::std::mem::size_of::<__guest_handle_xen_kexec_segment_t>() - 8usize];
    ["Alignment of __guest_handle_xen_kexec_segment_t"]
        [::std::mem::align_of::<__guest_handle_xen_kexec_segment_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_kexec_segment_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_kexec_segment_t, p) - 0usize];
};
impl Default for __guest_handle_xen_kexec_segment_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_kexec_segment_t {
    pub p: *const xen_kexec_segment_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_kexec_segment_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_kexec_segment_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_kexec_segment_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_kexec_segment_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_kexec_segment_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_kexec_segment_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_kexec_segment_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_kexec_load {
    pub type_: u8,
    pub _pad: u8,
    pub arch: u16,
    pub nr_segments: u32,
    pub segments: xen_kexec_load__bindgen_ty_1,
    pub entry_maddr: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_kexec_load__bindgen_ty_1 {
    pub h: __guest_handle_xen_kexec_segment_t,
    pub _pad: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_load__bindgen_ty_1"]
        [::std::mem::size_of::<xen_kexec_load__bindgen_ty_1>() - 8usize];
    ["Alignment of xen_kexec_load__bindgen_ty_1"]
        [::std::mem::align_of::<xen_kexec_load__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_kexec_load__bindgen_ty_1::h"]
        [::std::mem::offset_of!(xen_kexec_load__bindgen_ty_1, h) - 0usize];
    ["Offset of field: xen_kexec_load__bindgen_ty_1::_pad"]
        [::std::mem::offset_of!(xen_kexec_load__bindgen_ty_1, _pad) - 0usize];
};
impl Default for xen_kexec_load__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_load"][::std::mem::size_of::<xen_kexec_load>() - 24usize];
    ["Alignment of xen_kexec_load"][::std::mem::align_of::<xen_kexec_load>() - 8usize];
    ["Offset of field: xen_kexec_load::type_"]
        [::std::mem::offset_of!(xen_kexec_load, type_) - 0usize];
    ["Offset of field: xen_kexec_load::_pad"]
        [::std::mem::offset_of!(xen_kexec_load, _pad) - 1usize];
    ["Offset of field: xen_kexec_load::arch"]
        [::std::mem::offset_of!(xen_kexec_load, arch) - 2usize];
    ["Offset of field: xen_kexec_load::nr_segments"]
        [::std::mem::offset_of!(xen_kexec_load, nr_segments) - 4usize];
    ["Offset of field: xen_kexec_load::segments"]
        [::std::mem::offset_of!(xen_kexec_load, segments) - 8usize];
    ["Offset of field: xen_kexec_load::entry_maddr"]
        [::std::mem::offset_of!(xen_kexec_load, entry_maddr) - 16usize];
};
impl Default for xen_kexec_load {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_kexec_load_t = xen_kexec_load;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_kexec_load_t {
    pub p: *mut xen_kexec_load_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_kexec_load_t"]
        [::std::mem::size_of::<__guest_handle_xen_kexec_load_t>() - 8usize];
    ["Alignment of __guest_handle_xen_kexec_load_t"]
        [::std::mem::align_of::<__guest_handle_xen_kexec_load_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_kexec_load_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_kexec_load_t, p) - 0usize];
};
impl Default for __guest_handle_xen_kexec_load_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_kexec_load_t {
    pub p: *const xen_kexec_load_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_kexec_load_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_kexec_load_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_kexec_load_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_kexec_load_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_kexec_load_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_kexec_load_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_kexec_load_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_kexec_unload {
    pub type_: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_unload"][::std::mem::size_of::<xen_kexec_unload>() - 1usize];
    ["Alignment of xen_kexec_unload"][::std::mem::align_of::<xen_kexec_unload>() - 1usize];
    ["Offset of field: xen_kexec_unload::type_"]
        [::std::mem::offset_of!(xen_kexec_unload, type_) - 0usize];
};
pub type xen_kexec_unload_t = xen_kexec_unload;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_kexec_unload_t {
    pub p: *mut xen_kexec_unload_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_kexec_unload_t"]
        [::std::mem::size_of::<__guest_handle_xen_kexec_unload_t>() - 8usize];
    ["Alignment of __guest_handle_xen_kexec_unload_t"]
        [::std::mem::align_of::<__guest_handle_xen_kexec_unload_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_kexec_unload_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_kexec_unload_t, p) - 0usize];
};
impl Default for __guest_handle_xen_kexec_unload_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_kexec_unload_t {
    pub p: *const xen_kexec_unload_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_kexec_unload_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_kexec_unload_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_kexec_unload_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_kexec_unload_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_kexec_unload_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_kexec_unload_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_kexec_unload_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_kexec_status {
    pub type_: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_kexec_status"][::std::mem::size_of::<xen_kexec_status>() - 1usize];
    ["Alignment of xen_kexec_status"][::std::mem::align_of::<xen_kexec_status>() - 1usize];
    ["Offset of field: xen_kexec_status::type_"]
        [::std::mem::offset_of!(xen_kexec_status, type_) - 0usize];
};
pub type xen_kexec_status_t = xen_kexec_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_kexec_status_t {
    pub p: *mut xen_kexec_status_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_kexec_status_t"]
        [::std::mem::size_of::<__guest_handle_xen_kexec_status_t>() - 8usize];
    ["Alignment of __guest_handle_xen_kexec_status_t"]
        [::std::mem::align_of::<__guest_handle_xen_kexec_status_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_kexec_status_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_kexec_status_t, p) - 0usize];
};
impl Default for __guest_handle_xen_kexec_status_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_kexec_status_t {
    pub p: *const xen_kexec_status_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_kexec_status_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_kexec_status_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_kexec_status_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_kexec_status_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_kexec_status_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_kexec_status_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_kexec_status_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_settime32 {
    pub secs: u32,
    pub nsecs: u32,
    pub system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_settime32"][::std::mem::size_of::<xenpf_settime32>() - 16usize];
    ["Alignment of xenpf_settime32"][::std::mem::align_of::<xenpf_settime32>() - 8usize];
    ["Offset of field: xenpf_settime32::secs"]
        [::std::mem::offset_of!(xenpf_settime32, secs) - 0usize];
    ["Offset of field: xenpf_settime32::nsecs"]
        [::std::mem::offset_of!(xenpf_settime32, nsecs) - 4usize];
    ["Offset of field: xenpf_settime32::system_time"]
        [::std::mem::offset_of!(xenpf_settime32, system_time) - 8usize];
};
pub type xenpf_settime32_t = xenpf_settime32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_settime64 {
    pub secs: u64,
    pub nsecs: u32,
    pub mbz: u32,
    pub system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_settime64"][::std::mem::size_of::<xenpf_settime64>() - 24usize];
    ["Alignment of xenpf_settime64"][::std::mem::align_of::<xenpf_settime64>() - 8usize];
    ["Offset of field: xenpf_settime64::secs"]
        [::std::mem::offset_of!(xenpf_settime64, secs) - 0usize];
    ["Offset of field: xenpf_settime64::nsecs"]
        [::std::mem::offset_of!(xenpf_settime64, nsecs) - 8usize];
    ["Offset of field: xenpf_settime64::mbz"]
        [::std::mem::offset_of!(xenpf_settime64, mbz) - 12usize];
    ["Offset of field: xenpf_settime64::system_time"]
        [::std::mem::offset_of!(xenpf_settime64, system_time) - 16usize];
};
pub type xenpf_settime64_t = xenpf_settime64;
pub type xenpf_settime_t = xenpf_settime64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_settime_t {
    pub p: *mut xenpf_settime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_settime_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_settime_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_settime_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_settime_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_settime_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_settime_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_settime_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_settime_t {
    pub p: *const xenpf_settime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_settime_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_settime_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_settime_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_settime_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_settime_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_settime_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_settime_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_add_memtype {
    pub mfn: xen_pfn_t,
    pub nr_mfns: u64,
    pub type_: u32,
    pub handle: u32,
    pub reg: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_add_memtype"][::std::mem::size_of::<xenpf_add_memtype>() - 32usize];
    ["Alignment of xenpf_add_memtype"][::std::mem::align_of::<xenpf_add_memtype>() - 8usize];
    ["Offset of field: xenpf_add_memtype::mfn"]
        [::std::mem::offset_of!(xenpf_add_memtype, mfn) - 0usize];
    ["Offset of field: xenpf_add_memtype::nr_mfns"]
        [::std::mem::offset_of!(xenpf_add_memtype, nr_mfns) - 8usize];
    ["Offset of field: xenpf_add_memtype::type_"]
        [::std::mem::offset_of!(xenpf_add_memtype, type_) - 16usize];
    ["Offset of field: xenpf_add_memtype::handle"]
        [::std::mem::offset_of!(xenpf_add_memtype, handle) - 20usize];
    ["Offset of field: xenpf_add_memtype::reg"]
        [::std::mem::offset_of!(xenpf_add_memtype, reg) - 24usize];
};
pub type xenpf_add_memtype_t = xenpf_add_memtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_add_memtype_t {
    pub p: *mut xenpf_add_memtype_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_add_memtype_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_add_memtype_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_add_memtype_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_add_memtype_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_add_memtype_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_add_memtype_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_add_memtype_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_add_memtype_t {
    pub p: *const xenpf_add_memtype_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_add_memtype_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_add_memtype_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_add_memtype_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_add_memtype_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_add_memtype_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_add_memtype_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_add_memtype_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_del_memtype {
    pub handle: u32,
    pub reg: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_del_memtype"][::std::mem::size_of::<xenpf_del_memtype>() - 8usize];
    ["Alignment of xenpf_del_memtype"][::std::mem::align_of::<xenpf_del_memtype>() - 4usize];
    ["Offset of field: xenpf_del_memtype::handle"]
        [::std::mem::offset_of!(xenpf_del_memtype, handle) - 0usize];
    ["Offset of field: xenpf_del_memtype::reg"]
        [::std::mem::offset_of!(xenpf_del_memtype, reg) - 4usize];
};
pub type xenpf_del_memtype_t = xenpf_del_memtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_del_memtype_t {
    pub p: *mut xenpf_del_memtype_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_del_memtype_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_del_memtype_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_del_memtype_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_del_memtype_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_del_memtype_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_del_memtype_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_del_memtype_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_del_memtype_t {
    pub p: *const xenpf_del_memtype_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_del_memtype_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_del_memtype_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_del_memtype_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_del_memtype_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_del_memtype_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_del_memtype_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_del_memtype_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_read_memtype {
    pub reg: u32,
    pub mfn: xen_pfn_t,
    pub nr_mfns: u64,
    pub type_: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_read_memtype"][::std::mem::size_of::<xenpf_read_memtype>() - 32usize];
    ["Alignment of xenpf_read_memtype"][::std::mem::align_of::<xenpf_read_memtype>() - 8usize];
    ["Offset of field: xenpf_read_memtype::reg"]
        [::std::mem::offset_of!(xenpf_read_memtype, reg) - 0usize];
    ["Offset of field: xenpf_read_memtype::mfn"]
        [::std::mem::offset_of!(xenpf_read_memtype, mfn) - 8usize];
    ["Offset of field: xenpf_read_memtype::nr_mfns"]
        [::std::mem::offset_of!(xenpf_read_memtype, nr_mfns) - 16usize];
    ["Offset of field: xenpf_read_memtype::type_"]
        [::std::mem::offset_of!(xenpf_read_memtype, type_) - 24usize];
};
pub type xenpf_read_memtype_t = xenpf_read_memtype;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_read_memtype_t {
    pub p: *mut xenpf_read_memtype_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_read_memtype_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_read_memtype_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_read_memtype_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_read_memtype_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_read_memtype_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_read_memtype_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_read_memtype_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_read_memtype_t {
    pub p: *const xenpf_read_memtype_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_read_memtype_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_read_memtype_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_read_memtype_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_read_memtype_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_read_memtype_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_read_memtype_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_read_memtype_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_microcode_update {
    pub data: __guest_handle_const_void,
    pub length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_microcode_update"][::std::mem::size_of::<xenpf_microcode_update>() - 16usize];
    ["Alignment of xenpf_microcode_update"]
        [::std::mem::align_of::<xenpf_microcode_update>() - 8usize];
    ["Offset of field: xenpf_microcode_update::data"]
        [::std::mem::offset_of!(xenpf_microcode_update, data) - 0usize];
    ["Offset of field: xenpf_microcode_update::length"]
        [::std::mem::offset_of!(xenpf_microcode_update, length) - 8usize];
};
impl Default for xenpf_microcode_update {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_microcode_update_t = xenpf_microcode_update;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_microcode_update_t {
    pub p: *mut xenpf_microcode_update_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_microcode_update_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_microcode_update_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_microcode_update_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_microcode_update_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_microcode_update_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_microcode_update_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_microcode_update_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_microcode_update_t {
    pub p: *const xenpf_microcode_update_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_microcode_update_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_microcode_update_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_microcode_update_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_microcode_update_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_microcode_update_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_microcode_update_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_microcode_update_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_platform_quirk {
    pub quirk_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_platform_quirk"][::std::mem::size_of::<xenpf_platform_quirk>() - 4usize];
    ["Alignment of xenpf_platform_quirk"][::std::mem::align_of::<xenpf_platform_quirk>() - 4usize];
    ["Offset of field: xenpf_platform_quirk::quirk_id"]
        [::std::mem::offset_of!(xenpf_platform_quirk, quirk_id) - 0usize];
};
pub type xenpf_platform_quirk_t = xenpf_platform_quirk;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_platform_quirk_t {
    pub p: *mut xenpf_platform_quirk_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_platform_quirk_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_platform_quirk_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_platform_quirk_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_platform_quirk_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_platform_quirk_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_platform_quirk_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_platform_quirk_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_platform_quirk_t {
    pub p: *const xenpf_platform_quirk_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_platform_quirk_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_platform_quirk_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_platform_quirk_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_platform_quirk_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_platform_quirk_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_platform_quirk_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_platform_quirk_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_efi_time {
    pub year: u16,
    pub month: u8,
    pub day: u8,
    pub hour: u8,
    pub min: u8,
    pub sec: u8,
    pub ns: u32,
    pub tz: i16,
    pub daylight: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_time"][::std::mem::size_of::<xenpf_efi_time>() - 16usize];
    ["Alignment of xenpf_efi_time"][::std::mem::align_of::<xenpf_efi_time>() - 4usize];
    ["Offset of field: xenpf_efi_time::year"]
        [::std::mem::offset_of!(xenpf_efi_time, year) - 0usize];
    ["Offset of field: xenpf_efi_time::month"]
        [::std::mem::offset_of!(xenpf_efi_time, month) - 2usize];
    ["Offset of field: xenpf_efi_time::day"][::std::mem::offset_of!(xenpf_efi_time, day) - 3usize];
    ["Offset of field: xenpf_efi_time::hour"]
        [::std::mem::offset_of!(xenpf_efi_time, hour) - 4usize];
    ["Offset of field: xenpf_efi_time::min"][::std::mem::offset_of!(xenpf_efi_time, min) - 5usize];
    ["Offset of field: xenpf_efi_time::sec"][::std::mem::offset_of!(xenpf_efi_time, sec) - 6usize];
    ["Offset of field: xenpf_efi_time::ns"][::std::mem::offset_of!(xenpf_efi_time, ns) - 8usize];
    ["Offset of field: xenpf_efi_time::tz"][::std::mem::offset_of!(xenpf_efi_time, tz) - 12usize];
    ["Offset of field: xenpf_efi_time::daylight"]
        [::std::mem::offset_of!(xenpf_efi_time, daylight) - 14usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_efi_guid {
    pub data1: u32,
    pub data2: u16,
    pub data3: u16,
    pub data4: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_guid"][::std::mem::size_of::<xenpf_efi_guid>() - 16usize];
    ["Alignment of xenpf_efi_guid"][::std::mem::align_of::<xenpf_efi_guid>() - 4usize];
    ["Offset of field: xenpf_efi_guid::data1"]
        [::std::mem::offset_of!(xenpf_efi_guid, data1) - 0usize];
    ["Offset of field: xenpf_efi_guid::data2"]
        [::std::mem::offset_of!(xenpf_efi_guid, data2) - 4usize];
    ["Offset of field: xenpf_efi_guid::data3"]
        [::std::mem::offset_of!(xenpf_efi_guid, data3) - 6usize];
    ["Offset of field: xenpf_efi_guid::data4"]
        [::std::mem::offset_of!(xenpf_efi_guid, data4) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call {
    pub function: u32,
    pub misc: u32,
    pub status: xen_ulong_t,
    pub u: xenpf_efi_runtime_call__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_efi_runtime_call__bindgen_ty_1 {
    pub get_time: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1,
    pub set_time: xenpf_efi_time,
    pub get_wakeup_time: xenpf_efi_time,
    pub set_wakeup_time: xenpf_efi_time,
    pub get_variable: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
    pub set_variable: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
    pub get_next_variable_name: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3,
    pub query_variable_info: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
    pub query_capsule_capabilities: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
    pub update_capsule: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1 {
    pub time: xenpf_efi_time,
    pub resolution: u32,
    pub accuracy: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1::time"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1, time) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1::resolution"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1,
        resolution
    )
        - 16usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1::accuracy"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1,
        accuracy
    ) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2 {
    pub name: __guest_handle_void,
    pub size: xen_ulong_t,
    pub data: __guest_handle_void,
    pub vendor_guid: xenpf_efi_guid,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>() - 40usize];
    ["Alignment of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2::name"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2, name) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2::size"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2, size) - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2::data"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
        data
    ) - 16usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2::vendor_guid"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
        vendor_guid
    )
        - 24usize];
};
impl Default for xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3 {
    pub size: xen_ulong_t,
    pub name: __guest_handle_void,
    pub vendor_guid: xenpf_efi_guid,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3>() - 32usize];
    ["Alignment of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3::size"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3, size) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3::name"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3, name) - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3::vendor_guid"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3,
        vendor_guid
    )
        - 16usize];
};
impl Default for xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4 {
    pub attr: u32,
    pub max_store_size: u64,
    pub remain_store_size: u64,
    pub max_size: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>() - 32usize];
    ["Alignment of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4::attr"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4, attr) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4::max_store_size"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
        max_store_size
    )
        - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4::remain_store_size"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
        remain_store_size
    )
        - 16usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4::max_size"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
        max_size
    ) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5 {
    pub capsule_header_array: __guest_handle_void,
    pub capsule_count: xen_ulong_t,
    pub max_capsule_size: u64,
    pub reset_type: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>() - 32usize];
    ["Alignment of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>() - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5::capsule_header_array"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
        capsule_header_array
    )
        - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5::capsule_count"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
        capsule_count
    )
        - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5::max_capsule_size"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
        max_capsule_size
    )
        - 16usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5::reset_type"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
        reset_type
    )
        - 24usize];
};
impl Default for xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6 {
    pub capsule_header_array: __guest_handle_void,
    pub capsule_count: xen_ulong_t,
    pub sg_list: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6>() - 24usize];
    ["Alignment of xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6>() - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6::capsule_header_array"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
        capsule_header_array
    )
        - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6::capsule_count"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
        capsule_count
    )
        - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6::sg_list"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
        sg_list
    ) - 16usize];
};
impl Default for xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_runtime_call__bindgen_ty_1"]
        [::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1>() - 40usize];
    ["Alignment of xenpf_efi_runtime_call__bindgen_ty_1"]
        [::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1>() - 8usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::get_time"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1, get_time) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::set_time"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1, set_time) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::get_wakeup_time"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1, get_wakeup_time) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::set_wakeup_time"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1, set_wakeup_time) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::get_variable"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1, get_variable) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::set_variable"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1, set_variable) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::get_next_variable_name"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1,
        get_next_variable_name
    ) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::query_variable_info"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1,
        query_variable_info
    ) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::query_capsule_capabilities"][::std::mem::offset_of!(
        xenpf_efi_runtime_call__bindgen_ty_1,
        query_capsule_capabilities
    )
        - 0usize];
    ["Offset of field: xenpf_efi_runtime_call__bindgen_ty_1::update_capsule"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call__bindgen_ty_1, update_capsule) - 0usize];
};
impl Default for xenpf_efi_runtime_call__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_efi_runtime_call"][::std::mem::size_of::<xenpf_efi_runtime_call>() - 56usize];
    ["Alignment of xenpf_efi_runtime_call"]
        [::std::mem::align_of::<xenpf_efi_runtime_call>() - 8usize];
    ["Offset of field: xenpf_efi_runtime_call::function"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call, function) - 0usize];
    ["Offset of field: xenpf_efi_runtime_call::misc"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call, misc) - 4usize];
    ["Offset of field: xenpf_efi_runtime_call::status"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call, status) - 8usize];
    ["Offset of field: xenpf_efi_runtime_call::u"]
        [::std::mem::offset_of!(xenpf_efi_runtime_call, u) - 16usize];
};
impl Default for xenpf_efi_runtime_call {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_efi_runtime_call_t = xenpf_efi_runtime_call;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_efi_runtime_call_t {
    pub p: *mut xenpf_efi_runtime_call_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_efi_runtime_call_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_efi_runtime_call_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_efi_runtime_call_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_efi_runtime_call_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_efi_runtime_call_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_efi_runtime_call_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_efi_runtime_call_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_efi_runtime_call_t {
    pub p: *const xenpf_efi_runtime_call_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_efi_runtime_call_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_efi_runtime_call_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_efi_runtime_call_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_efi_runtime_call_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_efi_runtime_call_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_efi_runtime_call_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_efi_runtime_call_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info {
    pub type_: u32,
    pub index: u32,
    pub u: xenpf_firmware_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_firmware_info__bindgen_ty_1 {
    pub disk_info: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
    pub disk_mbr_signature: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2,
    pub vbeddc_info: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3,
    pub efi_info: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
    pub kbd_shift_flags: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1 {
    pub device: u8,
    pub version: u8,
    pub interface_support: u16,
    pub legacy_max_cylinder: u16,
    pub legacy_max_head: u8,
    pub legacy_sectors_per_track: u8,
    pub edd_params: __guest_handle_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1::device"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1, device) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1::version"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1, version) - 1usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1::interface_support"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
        interface_support
    )
        - 2usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1::legacy_max_cylinder"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
        legacy_max_cylinder
    )
        - 4usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1::legacy_max_head"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
        legacy_max_head
    )
        - 6usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1::legacy_sectors_per_track"] [:: std :: mem :: offset_of ! (xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1 , legacy_sectors_per_track) - 7usize] ;
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1::edd_params"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
        edd_params
    ) - 8usize];
};
impl Default for xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2 {
    pub device: u8,
    pub mbr_signature: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2::device"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2, device) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2::mbr_signature"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2,
        mbr_signature
    ) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3 {
    pub capabilities: u8,
    pub edid_transfer_time: u8,
    pub edid: __guest_handle_uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3::capabilities"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3,
        capabilities
    ) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3::edid_transfer_time"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3,
        edid_transfer_time
    )
        - 1usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3::edid"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3, edid) - 8usize];
};
impl Default for xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info {
    pub version: u32,
    pub cfg: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1,
    pub vendor: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
    pub mem: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
    pub pci_rom: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
    pub apple_properties: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1 {
    pub addr: u64,
    pub nent: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1"][::std::mem::size_of::<
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1::addr"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1,
        addr
    )
        - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1::nent"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1,
        nent
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2 {
    pub revision: u32,
    pub bufsz: u32,
    pub name: __guest_handle_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2"][::std::mem::size_of::<
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
    >() - 16usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2>()
            - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2::revision"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
        revision
    )
        - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2::bufsz"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
        bufsz
    )
        - 4usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2::name"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
        name
    )
        - 8usize];
};
impl Default for xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3 {
    pub addr: u64,
    pub size: u64,
    pub attr: u64,
    pub type_: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3"][::std::mem::size_of::<
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
    >() - 32usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3>()
            - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3::addr"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
        addr
    )
        - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3::size"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
        size
    )
        - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3::attr"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
        attr
    )
        - 16usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3::type_"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
        type_
    )
        - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4 {
    pub segment: u16,
    pub bus: u8,
    pub devfn: u8,
    pub vendor: u16,
    pub devid: u16,
    pub address: u64,
    pub size: xen_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4"][::std::mem::size_of::<
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
    >() - 24usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>()
            - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4::segment"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
        segment
    )
        - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4::bus"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
        bus
    )
        - 2usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4::devfn"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
        devfn
    )
        - 3usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4::vendor"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
        vendor
    )
        - 4usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4::devid"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
        devid
    )
        - 6usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4::address"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
        address
    )
        - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4::size"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
        size
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5 {
    pub address: u64,
    pub size: xen_ulong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5"][::std::mem::size_of::<
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5,
    >() - 16usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5>()
            - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5::address"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5,
        address
    )
        - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5::size"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5,
        size
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info"]
        [::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>() - 32usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>() - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info::version"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
        version
    ) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info::cfg"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info, cfg) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info::vendor"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info, vendor) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info::mem"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info, mem) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info::pci_rom"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
        pci_rom
    ) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info::apple_properties"][::std::mem::offset_of!(
        xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
        apple_properties
    )
        - 0usize];
};
impl Default for xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info__bindgen_ty_1"]
        [::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1>() - 32usize];
    ["Alignment of xenpf_firmware_info__bindgen_ty_1"]
        [::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1>() - 8usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1::disk_info"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1, disk_info) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1::disk_mbr_signature"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1, disk_mbr_signature) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1::vbeddc_info"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1, vbeddc_info) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1::efi_info"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1, efi_info) - 0usize];
    ["Offset of field: xenpf_firmware_info__bindgen_ty_1::kbd_shift_flags"]
        [::std::mem::offset_of!(xenpf_firmware_info__bindgen_ty_1, kbd_shift_flags) - 0usize];
};
impl Default for xenpf_firmware_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_firmware_info"][::std::mem::size_of::<xenpf_firmware_info>() - 40usize];
    ["Alignment of xenpf_firmware_info"][::std::mem::align_of::<xenpf_firmware_info>() - 8usize];
    ["Offset of field: xenpf_firmware_info::type_"]
        [::std::mem::offset_of!(xenpf_firmware_info, type_) - 0usize];
    ["Offset of field: xenpf_firmware_info::index"]
        [::std::mem::offset_of!(xenpf_firmware_info, index) - 4usize];
    ["Offset of field: xenpf_firmware_info::u"]
        [::std::mem::offset_of!(xenpf_firmware_info, u) - 8usize];
};
impl Default for xenpf_firmware_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_firmware_info_t = xenpf_firmware_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_firmware_info_t {
    pub p: *mut xenpf_firmware_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_firmware_info_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_firmware_info_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_firmware_info_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_firmware_info_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_firmware_info_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_firmware_info_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_firmware_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_firmware_info_t {
    pub p: *const xenpf_firmware_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_firmware_info_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_firmware_info_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_firmware_info_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_firmware_info_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_firmware_info_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_firmware_info_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_firmware_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_enter_acpi_sleep {
    pub val_a: u16,
    pub val_b: u16,
    pub sleep_state: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_enter_acpi_sleep"][::std::mem::size_of::<xenpf_enter_acpi_sleep>() - 12usize];
    ["Alignment of xenpf_enter_acpi_sleep"]
        [::std::mem::align_of::<xenpf_enter_acpi_sleep>() - 4usize];
    ["Offset of field: xenpf_enter_acpi_sleep::val_a"]
        [::std::mem::offset_of!(xenpf_enter_acpi_sleep, val_a) - 0usize];
    ["Offset of field: xenpf_enter_acpi_sleep::val_b"]
        [::std::mem::offset_of!(xenpf_enter_acpi_sleep, val_b) - 2usize];
    ["Offset of field: xenpf_enter_acpi_sleep::sleep_state"]
        [::std::mem::offset_of!(xenpf_enter_acpi_sleep, sleep_state) - 4usize];
    ["Offset of field: xenpf_enter_acpi_sleep::flags"]
        [::std::mem::offset_of!(xenpf_enter_acpi_sleep, flags) - 8usize];
};
pub type xenpf_enter_acpi_sleep_t = xenpf_enter_acpi_sleep;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_enter_acpi_sleep_t {
    pub p: *mut xenpf_enter_acpi_sleep_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_enter_acpi_sleep_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_enter_acpi_sleep_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_enter_acpi_sleep_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_enter_acpi_sleep_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_enter_acpi_sleep_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_enter_acpi_sleep_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_enter_acpi_sleep_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_enter_acpi_sleep_t {
    pub p: *const xenpf_enter_acpi_sleep_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_enter_acpi_sleep_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_enter_acpi_sleep_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_enter_acpi_sleep_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_enter_acpi_sleep_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_enter_acpi_sleep_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_enter_acpi_sleep_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_enter_acpi_sleep_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_change_freq {
    pub flags: u32,
    pub cpu: u32,
    pub freq: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_change_freq"][::std::mem::size_of::<xenpf_change_freq>() - 16usize];
    ["Alignment of xenpf_change_freq"][::std::mem::align_of::<xenpf_change_freq>() - 8usize];
    ["Offset of field: xenpf_change_freq::flags"]
        [::std::mem::offset_of!(xenpf_change_freq, flags) - 0usize];
    ["Offset of field: xenpf_change_freq::cpu"]
        [::std::mem::offset_of!(xenpf_change_freq, cpu) - 4usize];
    ["Offset of field: xenpf_change_freq::freq"]
        [::std::mem::offset_of!(xenpf_change_freq, freq) - 8usize];
};
pub type xenpf_change_freq_t = xenpf_change_freq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_change_freq_t {
    pub p: *mut xenpf_change_freq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_change_freq_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_change_freq_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_change_freq_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_change_freq_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_change_freq_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_change_freq_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_change_freq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_change_freq_t {
    pub p: *const xenpf_change_freq_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_change_freq_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_change_freq_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_change_freq_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_change_freq_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_change_freq_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_change_freq_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_change_freq_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_getidletime {
    pub cpumap_bitmap: __guest_handle_uint8,
    pub cpumap_nr_cpus: u32,
    pub idletime: __guest_handle_uint64,
    pub now: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_getidletime"][::std::mem::size_of::<xenpf_getidletime>() - 32usize];
    ["Alignment of xenpf_getidletime"][::std::mem::align_of::<xenpf_getidletime>() - 8usize];
    ["Offset of field: xenpf_getidletime::cpumap_bitmap"]
        [::std::mem::offset_of!(xenpf_getidletime, cpumap_bitmap) - 0usize];
    ["Offset of field: xenpf_getidletime::cpumap_nr_cpus"]
        [::std::mem::offset_of!(xenpf_getidletime, cpumap_nr_cpus) - 8usize];
    ["Offset of field: xenpf_getidletime::idletime"]
        [::std::mem::offset_of!(xenpf_getidletime, idletime) - 16usize];
    ["Offset of field: xenpf_getidletime::now"]
        [::std::mem::offset_of!(xenpf_getidletime, now) - 24usize];
};
impl Default for xenpf_getidletime {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_getidletime_t = xenpf_getidletime;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_getidletime_t {
    pub p: *mut xenpf_getidletime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_getidletime_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_getidletime_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_getidletime_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_getidletime_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_getidletime_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_getidletime_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_getidletime_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_getidletime_t {
    pub p: *const xenpf_getidletime_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_getidletime_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_getidletime_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_getidletime_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_getidletime_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_getidletime_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_getidletime_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_getidletime_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_power_register {
    pub space_id: u32,
    pub bit_width: u32,
    pub bit_offset: u32,
    pub access_size: u32,
    pub address: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_power_register"][::std::mem::size_of::<xen_power_register>() - 24usize];
    ["Alignment of xen_power_register"][::std::mem::align_of::<xen_power_register>() - 8usize];
    ["Offset of field: xen_power_register::space_id"]
        [::std::mem::offset_of!(xen_power_register, space_id) - 0usize];
    ["Offset of field: xen_power_register::bit_width"]
        [::std::mem::offset_of!(xen_power_register, bit_width) - 4usize];
    ["Offset of field: xen_power_register::bit_offset"]
        [::std::mem::offset_of!(xen_power_register, bit_offset) - 8usize];
    ["Offset of field: xen_power_register::access_size"]
        [::std::mem::offset_of!(xen_power_register, access_size) - 12usize];
    ["Offset of field: xen_power_register::address"]
        [::std::mem::offset_of!(xen_power_register, address) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_processor_csd {
    pub domain: u32,
    pub coord_type: u32,
    pub num: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_processor_csd"][::std::mem::size_of::<xen_processor_csd>() - 12usize];
    ["Alignment of xen_processor_csd"][::std::mem::align_of::<xen_processor_csd>() - 4usize];
    ["Offset of field: xen_processor_csd::domain"]
        [::std::mem::offset_of!(xen_processor_csd, domain) - 0usize];
    ["Offset of field: xen_processor_csd::coord_type"]
        [::std::mem::offset_of!(xen_processor_csd, coord_type) - 4usize];
    ["Offset of field: xen_processor_csd::num"]
        [::std::mem::offset_of!(xen_processor_csd, num) - 8usize];
};
pub type xen_processor_csd_t = xen_processor_csd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_processor_csd_t {
    pub p: *mut xen_processor_csd_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_processor_csd_t"]
        [::std::mem::size_of::<__guest_handle_xen_processor_csd_t>() - 8usize];
    ["Alignment of __guest_handle_xen_processor_csd_t"]
        [::std::mem::align_of::<__guest_handle_xen_processor_csd_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_processor_csd_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_processor_csd_t, p) - 0usize];
};
impl Default for __guest_handle_xen_processor_csd_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_processor_csd_t {
    pub p: *const xen_processor_csd_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_processor_csd_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_processor_csd_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_processor_csd_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_processor_csd_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_processor_csd_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_processor_csd_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_processor_csd_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_cx {
    pub reg: xen_power_register,
    pub type_: u8,
    pub latency: u32,
    pub power: u32,
    pub dpcnt: u32,
    pub dp: __guest_handle_xen_processor_csd_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_processor_cx"][::std::mem::size_of::<xen_processor_cx>() - 48usize];
    ["Alignment of xen_processor_cx"][::std::mem::align_of::<xen_processor_cx>() - 8usize];
    ["Offset of field: xen_processor_cx::reg"]
        [::std::mem::offset_of!(xen_processor_cx, reg) - 0usize];
    ["Offset of field: xen_processor_cx::type_"]
        [::std::mem::offset_of!(xen_processor_cx, type_) - 24usize];
    ["Offset of field: xen_processor_cx::latency"]
        [::std::mem::offset_of!(xen_processor_cx, latency) - 28usize];
    ["Offset of field: xen_processor_cx::power"]
        [::std::mem::offset_of!(xen_processor_cx, power) - 32usize];
    ["Offset of field: xen_processor_cx::dpcnt"]
        [::std::mem::offset_of!(xen_processor_cx, dpcnt) - 36usize];
    ["Offset of field: xen_processor_cx::dp"]
        [::std::mem::offset_of!(xen_processor_cx, dp) - 40usize];
};
impl Default for xen_processor_cx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_processor_cx_t = xen_processor_cx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_processor_cx_t {
    pub p: *mut xen_processor_cx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_processor_cx_t"]
        [::std::mem::size_of::<__guest_handle_xen_processor_cx_t>() - 8usize];
    ["Alignment of __guest_handle_xen_processor_cx_t"]
        [::std::mem::align_of::<__guest_handle_xen_processor_cx_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_processor_cx_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_processor_cx_t, p) - 0usize];
};
impl Default for __guest_handle_xen_processor_cx_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_processor_cx_t {
    pub p: *const xen_processor_cx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_processor_cx_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_processor_cx_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_processor_cx_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_processor_cx_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_processor_cx_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_processor_cx_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_processor_cx_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_processor_flags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_processor_flags"][::std::mem::size_of::<xen_processor_flags>() - 4usize];
    ["Alignment of xen_processor_flags"][::std::mem::align_of::<xen_processor_flags>() - 4usize];
};
impl xen_processor_flags {
    #[inline]
    pub fn bm_control(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_control(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bm_check(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_check(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_cst(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_cst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn power_setup_done(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_power_setup_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bm_rld_set(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_rld_set(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bm_control: u32,
        bm_check: u32,
        has_cst: u32,
        power_setup_done: u32,
        bm_rld_set: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bm_control: u32 = unsafe { ::std::mem::transmute(bm_control) };
            bm_control as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bm_check: u32 = unsafe { ::std::mem::transmute(bm_check) };
            bm_check as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let has_cst: u32 = unsafe { ::std::mem::transmute(has_cst) };
            has_cst as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let power_setup_done: u32 = unsafe { ::std::mem::transmute(power_setup_done) };
            power_setup_done as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bm_rld_set: u32 = unsafe { ::std::mem::transmute(bm_rld_set) };
            bm_rld_set as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_power {
    pub count: u32,
    pub flags: xen_processor_flags,
    pub states: __guest_handle_xen_processor_cx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_processor_power"][::std::mem::size_of::<xen_processor_power>() - 16usize];
    ["Alignment of xen_processor_power"][::std::mem::align_of::<xen_processor_power>() - 8usize];
    ["Offset of field: xen_processor_power::count"]
        [::std::mem::offset_of!(xen_processor_power, count) - 0usize];
    ["Offset of field: xen_processor_power::flags"]
        [::std::mem::offset_of!(xen_processor_power, flags) - 4usize];
    ["Offset of field: xen_processor_power::states"]
        [::std::mem::offset_of!(xen_processor_power, states) - 8usize];
};
impl Default for xen_processor_power {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_pct_register {
    pub descriptor: u8,
    pub length: u16,
    pub space_id: u8,
    pub bit_width: u8,
    pub bit_offset: u8,
    pub reserved: u8,
    pub address: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_pct_register"][::std::mem::size_of::<xen_pct_register>() - 16usize];
    ["Alignment of xen_pct_register"][::std::mem::align_of::<xen_pct_register>() - 8usize];
    ["Offset of field: xen_pct_register::descriptor"]
        [::std::mem::offset_of!(xen_pct_register, descriptor) - 0usize];
    ["Offset of field: xen_pct_register::length"]
        [::std::mem::offset_of!(xen_pct_register, length) - 2usize];
    ["Offset of field: xen_pct_register::space_id"]
        [::std::mem::offset_of!(xen_pct_register, space_id) - 4usize];
    ["Offset of field: xen_pct_register::bit_width"]
        [::std::mem::offset_of!(xen_pct_register, bit_width) - 5usize];
    ["Offset of field: xen_pct_register::bit_offset"]
        [::std::mem::offset_of!(xen_pct_register, bit_offset) - 6usize];
    ["Offset of field: xen_pct_register::reserved"]
        [::std::mem::offset_of!(xen_pct_register, reserved) - 7usize];
    ["Offset of field: xen_pct_register::address"]
        [::std::mem::offset_of!(xen_pct_register, address) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_processor_px {
    pub core_frequency: u64,
    pub power: u64,
    pub transition_latency: u64,
    pub bus_master_latency: u64,
    pub control: u64,
    pub status: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_processor_px"][::std::mem::size_of::<xen_processor_px>() - 48usize];
    ["Alignment of xen_processor_px"][::std::mem::align_of::<xen_processor_px>() - 8usize];
    ["Offset of field: xen_processor_px::core_frequency"]
        [::std::mem::offset_of!(xen_processor_px, core_frequency) - 0usize];
    ["Offset of field: xen_processor_px::power"]
        [::std::mem::offset_of!(xen_processor_px, power) - 8usize];
    ["Offset of field: xen_processor_px::transition_latency"]
        [::std::mem::offset_of!(xen_processor_px, transition_latency) - 16usize];
    ["Offset of field: xen_processor_px::bus_master_latency"]
        [::std::mem::offset_of!(xen_processor_px, bus_master_latency) - 24usize];
    ["Offset of field: xen_processor_px::control"]
        [::std::mem::offset_of!(xen_processor_px, control) - 32usize];
    ["Offset of field: xen_processor_px::status"]
        [::std::mem::offset_of!(xen_processor_px, status) - 40usize];
};
pub type xen_processor_px_t = xen_processor_px;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_processor_px_t {
    pub p: *mut xen_processor_px_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_processor_px_t"]
        [::std::mem::size_of::<__guest_handle_xen_processor_px_t>() - 8usize];
    ["Alignment of __guest_handle_xen_processor_px_t"]
        [::std::mem::align_of::<__guest_handle_xen_processor_px_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_processor_px_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_processor_px_t, p) - 0usize];
};
impl Default for __guest_handle_xen_processor_px_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_processor_px_t {
    pub p: *const xen_processor_px_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_processor_px_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_processor_px_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_processor_px_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_processor_px_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_processor_px_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_processor_px_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_processor_px_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_psd_package {
    pub num_entries: u64,
    pub revision: u64,
    pub domain: u64,
    pub coord_type: u64,
    pub num_processors: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_psd_package"][::std::mem::size_of::<xen_psd_package>() - 40usize];
    ["Alignment of xen_psd_package"][::std::mem::align_of::<xen_psd_package>() - 8usize];
    ["Offset of field: xen_psd_package::num_entries"]
        [::std::mem::offset_of!(xen_psd_package, num_entries) - 0usize];
    ["Offset of field: xen_psd_package::revision"]
        [::std::mem::offset_of!(xen_psd_package, revision) - 8usize];
    ["Offset of field: xen_psd_package::domain"]
        [::std::mem::offset_of!(xen_psd_package, domain) - 16usize];
    ["Offset of field: xen_psd_package::coord_type"]
        [::std::mem::offset_of!(xen_psd_package, coord_type) - 24usize];
    ["Offset of field: xen_psd_package::num_processors"]
        [::std::mem::offset_of!(xen_psd_package, num_processors) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_performance {
    pub flags: u32,
    pub platform_limit: u32,
    pub control_register: xen_pct_register,
    pub status_register: xen_pct_register,
    pub state_count: u32,
    pub states: __guest_handle_xen_processor_px_t,
    pub domain_info: xen_psd_package,
    pub shared_type: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_processor_performance"]
        [::std::mem::size_of::<xen_processor_performance>() - 104usize];
    ["Alignment of xen_processor_performance"]
        [::std::mem::align_of::<xen_processor_performance>() - 8usize];
    ["Offset of field: xen_processor_performance::flags"]
        [::std::mem::offset_of!(xen_processor_performance, flags) - 0usize];
    ["Offset of field: xen_processor_performance::platform_limit"]
        [::std::mem::offset_of!(xen_processor_performance, platform_limit) - 4usize];
    ["Offset of field: xen_processor_performance::control_register"]
        [::std::mem::offset_of!(xen_processor_performance, control_register) - 8usize];
    ["Offset of field: xen_processor_performance::status_register"]
        [::std::mem::offset_of!(xen_processor_performance, status_register) - 24usize];
    ["Offset of field: xen_processor_performance::state_count"]
        [::std::mem::offset_of!(xen_processor_performance, state_count) - 40usize];
    ["Offset of field: xen_processor_performance::states"]
        [::std::mem::offset_of!(xen_processor_performance, states) - 48usize];
    ["Offset of field: xen_processor_performance::domain_info"]
        [::std::mem::offset_of!(xen_processor_performance, domain_info) - 56usize];
    ["Offset of field: xen_processor_performance::shared_type"]
        [::std::mem::offset_of!(xen_processor_performance, shared_type) - 96usize];
};
impl Default for xen_processor_performance {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_processor_performance_t = xen_processor_performance;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_processor_performance_t {
    pub p: *mut xen_processor_performance_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_processor_performance_t"]
        [::std::mem::size_of::<__guest_handle_xen_processor_performance_t>() - 8usize];
    ["Alignment of __guest_handle_xen_processor_performance_t"]
        [::std::mem::align_of::<__guest_handle_xen_processor_performance_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_processor_performance_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_processor_performance_t, p) - 0usize];
};
impl Default for __guest_handle_xen_processor_performance_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_processor_performance_t {
    pub p: *const xen_processor_performance_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_processor_performance_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_processor_performance_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_processor_performance_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_processor_performance_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_processor_performance_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_processor_performance_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_processor_performance_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_set_processor_pminfo {
    pub id: u32,
    pub type_: u32,
    pub u: xenpf_set_processor_pminfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_set_processor_pminfo__bindgen_ty_1 {
    pub power: xen_processor_power,
    pub perf: xen_processor_performance,
    pub pdc: __guest_handle_uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_set_processor_pminfo__bindgen_ty_1"]
        [::std::mem::size_of::<xenpf_set_processor_pminfo__bindgen_ty_1>() - 104usize];
    ["Alignment of xenpf_set_processor_pminfo__bindgen_ty_1"]
        [::std::mem::align_of::<xenpf_set_processor_pminfo__bindgen_ty_1>() - 8usize];
    ["Offset of field: xenpf_set_processor_pminfo__bindgen_ty_1::power"]
        [::std::mem::offset_of!(xenpf_set_processor_pminfo__bindgen_ty_1, power) - 0usize];
    ["Offset of field: xenpf_set_processor_pminfo__bindgen_ty_1::perf"]
        [::std::mem::offset_of!(xenpf_set_processor_pminfo__bindgen_ty_1, perf) - 0usize];
    ["Offset of field: xenpf_set_processor_pminfo__bindgen_ty_1::pdc"]
        [::std::mem::offset_of!(xenpf_set_processor_pminfo__bindgen_ty_1, pdc) - 0usize];
};
impl Default for xenpf_set_processor_pminfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_set_processor_pminfo"]
        [::std::mem::size_of::<xenpf_set_processor_pminfo>() - 112usize];
    ["Alignment of xenpf_set_processor_pminfo"]
        [::std::mem::align_of::<xenpf_set_processor_pminfo>() - 8usize];
    ["Offset of field: xenpf_set_processor_pminfo::id"]
        [::std::mem::offset_of!(xenpf_set_processor_pminfo, id) - 0usize];
    ["Offset of field: xenpf_set_processor_pminfo::type_"]
        [::std::mem::offset_of!(xenpf_set_processor_pminfo, type_) - 4usize];
    ["Offset of field: xenpf_set_processor_pminfo::u"]
        [::std::mem::offset_of!(xenpf_set_processor_pminfo, u) - 8usize];
};
impl Default for xenpf_set_processor_pminfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_set_processor_pminfo_t = xenpf_set_processor_pminfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_set_processor_pminfo_t {
    pub p: *mut xenpf_set_processor_pminfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_set_processor_pminfo_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_set_processor_pminfo_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_set_processor_pminfo_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_set_processor_pminfo_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_set_processor_pminfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_set_processor_pminfo_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_set_processor_pminfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_set_processor_pminfo_t {
    pub p: *const xenpf_set_processor_pminfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_set_processor_pminfo_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_set_processor_pminfo_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_set_processor_pminfo_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_set_processor_pminfo_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_set_processor_pminfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_set_processor_pminfo_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_set_processor_pminfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_pcpuinfo {
    pub xen_cpuid: u32,
    pub max_present: u32,
    pub flags: u32,
    pub apic_id: u32,
    pub acpi_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_pcpuinfo"][::std::mem::size_of::<xenpf_pcpuinfo>() - 20usize];
    ["Alignment of xenpf_pcpuinfo"][::std::mem::align_of::<xenpf_pcpuinfo>() - 4usize];
    ["Offset of field: xenpf_pcpuinfo::xen_cpuid"]
        [::std::mem::offset_of!(xenpf_pcpuinfo, xen_cpuid) - 0usize];
    ["Offset of field: xenpf_pcpuinfo::max_present"]
        [::std::mem::offset_of!(xenpf_pcpuinfo, max_present) - 4usize];
    ["Offset of field: xenpf_pcpuinfo::flags"]
        [::std::mem::offset_of!(xenpf_pcpuinfo, flags) - 8usize];
    ["Offset of field: xenpf_pcpuinfo::apic_id"]
        [::std::mem::offset_of!(xenpf_pcpuinfo, apic_id) - 12usize];
    ["Offset of field: xenpf_pcpuinfo::acpi_id"]
        [::std::mem::offset_of!(xenpf_pcpuinfo, acpi_id) - 16usize];
};
pub type xenpf_pcpuinfo_t = xenpf_pcpuinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_pcpuinfo_t {
    pub p: *mut xenpf_pcpuinfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_pcpuinfo_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_pcpuinfo_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_pcpuinfo_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_pcpuinfo_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_pcpuinfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_pcpuinfo_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_pcpuinfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_pcpuinfo_t {
    pub p: *const xenpf_pcpuinfo_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_pcpuinfo_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_pcpuinfo_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_pcpuinfo_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_pcpuinfo_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_pcpuinfo_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_pcpuinfo_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_pcpuinfo_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_pcpu_version {
    pub xen_cpuid: u32,
    pub max_present: u32,
    pub vendor_id: [::std::os::raw::c_char; 12usize],
    pub family: u32,
    pub model: u32,
    pub stepping: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_pcpu_version"][::std::mem::size_of::<xenpf_pcpu_version>() - 32usize];
    ["Alignment of xenpf_pcpu_version"][::std::mem::align_of::<xenpf_pcpu_version>() - 4usize];
    ["Offset of field: xenpf_pcpu_version::xen_cpuid"]
        [::std::mem::offset_of!(xenpf_pcpu_version, xen_cpuid) - 0usize];
    ["Offset of field: xenpf_pcpu_version::max_present"]
        [::std::mem::offset_of!(xenpf_pcpu_version, max_present) - 4usize];
    ["Offset of field: xenpf_pcpu_version::vendor_id"]
        [::std::mem::offset_of!(xenpf_pcpu_version, vendor_id) - 8usize];
    ["Offset of field: xenpf_pcpu_version::family"]
        [::std::mem::offset_of!(xenpf_pcpu_version, family) - 20usize];
    ["Offset of field: xenpf_pcpu_version::model"]
        [::std::mem::offset_of!(xenpf_pcpu_version, model) - 24usize];
    ["Offset of field: xenpf_pcpu_version::stepping"]
        [::std::mem::offset_of!(xenpf_pcpu_version, stepping) - 28usize];
};
pub type xenpf_pcpu_version_t = xenpf_pcpu_version;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_pcpu_version_t {
    pub p: *mut xenpf_pcpu_version_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_pcpu_version_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_pcpu_version_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_pcpu_version_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_pcpu_version_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_pcpu_version_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_pcpu_version_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_pcpu_version_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_pcpu_version_t {
    pub p: *const xenpf_pcpu_version_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_pcpu_version_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_pcpu_version_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_pcpu_version_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_pcpu_version_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_pcpu_version_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_pcpu_version_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_pcpu_version_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_cpu_ol {
    pub cpuid: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_cpu_ol"][::std::mem::size_of::<xenpf_cpu_ol>() - 4usize];
    ["Alignment of xenpf_cpu_ol"][::std::mem::align_of::<xenpf_cpu_ol>() - 4usize];
    ["Offset of field: xenpf_cpu_ol::cpuid"][::std::mem::offset_of!(xenpf_cpu_ol, cpuid) - 0usize];
};
pub type xenpf_cpu_ol_t = xenpf_cpu_ol;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_cpu_ol_t {
    pub p: *mut xenpf_cpu_ol_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_cpu_ol_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_cpu_ol_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_cpu_ol_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_cpu_ol_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_cpu_ol_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_cpu_ol_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_cpu_ol_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_cpu_ol_t {
    pub p: *const xenpf_cpu_ol_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_cpu_ol_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_cpu_ol_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_cpu_ol_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_cpu_ol_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_cpu_ol_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_cpu_ol_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_cpu_ol_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_cpu_hotadd {
    pub apic_id: u32,
    pub acpi_id: u32,
    pub pxm: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_cpu_hotadd"][::std::mem::size_of::<xenpf_cpu_hotadd>() - 12usize];
    ["Alignment of xenpf_cpu_hotadd"][::std::mem::align_of::<xenpf_cpu_hotadd>() - 4usize];
    ["Offset of field: xenpf_cpu_hotadd::apic_id"]
        [::std::mem::offset_of!(xenpf_cpu_hotadd, apic_id) - 0usize];
    ["Offset of field: xenpf_cpu_hotadd::acpi_id"]
        [::std::mem::offset_of!(xenpf_cpu_hotadd, acpi_id) - 4usize];
    ["Offset of field: xenpf_cpu_hotadd::pxm"]
        [::std::mem::offset_of!(xenpf_cpu_hotadd, pxm) - 8usize];
};
pub type xenpf_cpu_hotadd_t = xenpf_cpu_hotadd;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_mem_hotadd {
    pub spfn: u64,
    pub epfn: u64,
    pub pxm: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_mem_hotadd"][::std::mem::size_of::<xenpf_mem_hotadd>() - 24usize];
    ["Alignment of xenpf_mem_hotadd"][::std::mem::align_of::<xenpf_mem_hotadd>() - 8usize];
    ["Offset of field: xenpf_mem_hotadd::spfn"]
        [::std::mem::offset_of!(xenpf_mem_hotadd, spfn) - 0usize];
    ["Offset of field: xenpf_mem_hotadd::epfn"]
        [::std::mem::offset_of!(xenpf_mem_hotadd, epfn) - 8usize];
    ["Offset of field: xenpf_mem_hotadd::pxm"]
        [::std::mem::offset_of!(xenpf_mem_hotadd, pxm) - 16usize];
    ["Offset of field: xenpf_mem_hotadd::flags"]
        [::std::mem::offset_of!(xenpf_mem_hotadd, flags) - 20usize];
};
pub type xenpf_mem_hotadd_t = xenpf_mem_hotadd;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_core_parking {
    pub type_: u32,
    pub idle_nums: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_core_parking"][::std::mem::size_of::<xenpf_core_parking>() - 8usize];
    ["Alignment of xenpf_core_parking"][::std::mem::align_of::<xenpf_core_parking>() - 4usize];
    ["Offset of field: xenpf_core_parking::type_"]
        [::std::mem::offset_of!(xenpf_core_parking, type_) - 0usize];
    ["Offset of field: xenpf_core_parking::idle_nums"]
        [::std::mem::offset_of!(xenpf_core_parking, idle_nums) - 4usize];
};
pub type xenpf_core_parking_t = xenpf_core_parking;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_core_parking_t {
    pub p: *mut xenpf_core_parking_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_core_parking_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_core_parking_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_core_parking_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_core_parking_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_core_parking_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_core_parking_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_core_parking_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_core_parking_t {
    pub p: *const xenpf_core_parking_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_core_parking_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_core_parking_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_core_parking_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_core_parking_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_core_parking_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_core_parking_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_core_parking_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_resource_entry {
    pub u: xenpf_resource_entry__bindgen_ty_1,
    pub rsvd: u32,
    pub idx: u64,
    pub val: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_resource_entry__bindgen_ty_1 {
    pub cmd: u32,
    pub ret: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_resource_entry__bindgen_ty_1"]
        [::std::mem::size_of::<xenpf_resource_entry__bindgen_ty_1>() - 4usize];
    ["Alignment of xenpf_resource_entry__bindgen_ty_1"]
        [::std::mem::align_of::<xenpf_resource_entry__bindgen_ty_1>() - 4usize];
    ["Offset of field: xenpf_resource_entry__bindgen_ty_1::cmd"]
        [::std::mem::offset_of!(xenpf_resource_entry__bindgen_ty_1, cmd) - 0usize];
    ["Offset of field: xenpf_resource_entry__bindgen_ty_1::ret"]
        [::std::mem::offset_of!(xenpf_resource_entry__bindgen_ty_1, ret) - 0usize];
};
impl Default for xenpf_resource_entry__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_resource_entry"][::std::mem::size_of::<xenpf_resource_entry>() - 24usize];
    ["Alignment of xenpf_resource_entry"][::std::mem::align_of::<xenpf_resource_entry>() - 8usize];
    ["Offset of field: xenpf_resource_entry::u"]
        [::std::mem::offset_of!(xenpf_resource_entry, u) - 0usize];
    ["Offset of field: xenpf_resource_entry::rsvd"]
        [::std::mem::offset_of!(xenpf_resource_entry, rsvd) - 4usize];
    ["Offset of field: xenpf_resource_entry::idx"]
        [::std::mem::offset_of!(xenpf_resource_entry, idx) - 8usize];
    ["Offset of field: xenpf_resource_entry::val"]
        [::std::mem::offset_of!(xenpf_resource_entry, val) - 16usize];
};
impl Default for xenpf_resource_entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_resource_entry_t = xenpf_resource_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_resource_entry_t {
    pub p: *mut xenpf_resource_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_resource_entry_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_resource_entry_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_resource_entry_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_resource_entry_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_resource_entry_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_resource_entry_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_resource_entry_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_resource_entry_t {
    pub p: *const xenpf_resource_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_resource_entry_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_resource_entry_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_resource_entry_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_resource_entry_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_resource_entry_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_resource_entry_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_resource_entry_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_resource_op {
    pub nr_entries: u32,
    pub cpu: u32,
    pub entries: __guest_handle_xenpf_resource_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_resource_op"][::std::mem::size_of::<xenpf_resource_op>() - 16usize];
    ["Alignment of xenpf_resource_op"][::std::mem::align_of::<xenpf_resource_op>() - 8usize];
    ["Offset of field: xenpf_resource_op::nr_entries"]
        [::std::mem::offset_of!(xenpf_resource_op, nr_entries) - 0usize];
    ["Offset of field: xenpf_resource_op::cpu"]
        [::std::mem::offset_of!(xenpf_resource_op, cpu) - 4usize];
    ["Offset of field: xenpf_resource_op::entries"]
        [::std::mem::offset_of!(xenpf_resource_op, entries) - 8usize];
};
impl Default for xenpf_resource_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_resource_op_t = xenpf_resource_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_resource_op_t {
    pub p: *mut xenpf_resource_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_resource_op_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_resource_op_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_resource_op_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_resource_op_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_resource_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_resource_op_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_resource_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_resource_op_t {
    pub p: *const xenpf_resource_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_resource_op_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_resource_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_resource_op_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_resource_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_resource_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_resource_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_resource_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_symdata {
    pub namelen: u32,
    pub symnum: u32,
    pub name: __guest_handle_char,
    pub address: u64,
    pub type_: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_symdata"][::std::mem::size_of::<xenpf_symdata>() - 32usize];
    ["Alignment of xenpf_symdata"][::std::mem::align_of::<xenpf_symdata>() - 8usize];
    ["Offset of field: xenpf_symdata::namelen"]
        [::std::mem::offset_of!(xenpf_symdata, namelen) - 0usize];
    ["Offset of field: xenpf_symdata::symnum"]
        [::std::mem::offset_of!(xenpf_symdata, symnum) - 4usize];
    ["Offset of field: xenpf_symdata::name"][::std::mem::offset_of!(xenpf_symdata, name) - 8usize];
    ["Offset of field: xenpf_symdata::address"]
        [::std::mem::offset_of!(xenpf_symdata, address) - 16usize];
    ["Offset of field: xenpf_symdata::type_"]
        [::std::mem::offset_of!(xenpf_symdata, type_) - 24usize];
};
impl Default for xenpf_symdata {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_symdata_t = xenpf_symdata;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_symdata_t {
    pub p: *mut xenpf_symdata_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_symdata_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_symdata_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_symdata_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_symdata_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_symdata_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_symdata_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_symdata_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_symdata_t {
    pub p: *const xenpf_symdata_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_symdata_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_symdata_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_symdata_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_symdata_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_symdata_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_symdata_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_symdata_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_dom0_console_t = dom0_vga_console_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_dom0_console_t {
    pub p: *mut xenpf_dom0_console_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_dom0_console_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_dom0_console_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_dom0_console_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_dom0_console_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_dom0_console_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_dom0_console_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_dom0_console_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_dom0_console_t {
    pub p: *const xenpf_dom0_console_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_dom0_console_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_dom0_console_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_dom0_console_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_dom0_console_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_dom0_console_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_dom0_console_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_dom0_console_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xenpf_ucode_revision {
    pub cpu: u32,
    pub signature: u32,
    pub pf: u32,
    pub revision: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_ucode_revision"][::std::mem::size_of::<xenpf_ucode_revision>() - 16usize];
    ["Alignment of xenpf_ucode_revision"][::std::mem::align_of::<xenpf_ucode_revision>() - 4usize];
    ["Offset of field: xenpf_ucode_revision::cpu"]
        [::std::mem::offset_of!(xenpf_ucode_revision, cpu) - 0usize];
    ["Offset of field: xenpf_ucode_revision::signature"]
        [::std::mem::offset_of!(xenpf_ucode_revision, signature) - 4usize];
    ["Offset of field: xenpf_ucode_revision::pf"]
        [::std::mem::offset_of!(xenpf_ucode_revision, pf) - 8usize];
    ["Offset of field: xenpf_ucode_revision::revision"]
        [::std::mem::offset_of!(xenpf_ucode_revision, revision) - 12usize];
};
pub type xenpf_ucode_revision_t = xenpf_ucode_revision;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_ucode_revision_t {
    pub p: *mut xenpf_ucode_revision_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_ucode_revision_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_ucode_revision_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_ucode_revision_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_ucode_revision_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_ucode_revision_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_ucode_revision_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_ucode_revision_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_ucode_revision_t {
    pub p: *const xenpf_ucode_revision_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_ucode_revision_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_ucode_revision_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_ucode_revision_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_ucode_revision_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_ucode_revision_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_ucode_revision_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_ucode_revision_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_microcode_update2 {
    pub flags: u32,
    pub length: u32,
    pub data: __guest_handle_const_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenpf_microcode_update2"][::std::mem::size_of::<xenpf_microcode_update2>() - 16usize];
    ["Alignment of xenpf_microcode_update2"]
        [::std::mem::align_of::<xenpf_microcode_update2>() - 8usize];
    ["Offset of field: xenpf_microcode_update2::flags"]
        [::std::mem::offset_of!(xenpf_microcode_update2, flags) - 0usize];
    ["Offset of field: xenpf_microcode_update2::length"]
        [::std::mem::offset_of!(xenpf_microcode_update2, length) - 4usize];
    ["Offset of field: xenpf_microcode_update2::data"]
        [::std::mem::offset_of!(xenpf_microcode_update2, data) - 8usize];
};
impl Default for xenpf_microcode_update2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xenpf_microcode_update2_t = xenpf_microcode_update2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xenpf_microcode_update2_t {
    pub p: *mut xenpf_microcode_update2_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xenpf_microcode_update2_t"]
        [::std::mem::size_of::<__guest_handle_xenpf_microcode_update2_t>() - 8usize];
    ["Alignment of __guest_handle_xenpf_microcode_update2_t"]
        [::std::mem::align_of::<__guest_handle_xenpf_microcode_update2_t>() - 8usize];
    ["Offset of field: __guest_handle_xenpf_microcode_update2_t::p"]
        [::std::mem::offset_of!(__guest_handle_xenpf_microcode_update2_t, p) - 0usize];
};
impl Default for __guest_handle_xenpf_microcode_update2_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xenpf_microcode_update2_t {
    pub p: *const xenpf_microcode_update2_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xenpf_microcode_update2_t"]
        [::std::mem::size_of::<__guest_handle_const_xenpf_microcode_update2_t>() - 8usize];
    ["Alignment of __guest_handle_const_xenpf_microcode_update2_t"]
        [::std::mem::align_of::<__guest_handle_const_xenpf_microcode_update2_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xenpf_microcode_update2_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xenpf_microcode_update2_t, p) - 0usize];
};
impl Default for __guest_handle_const_xenpf_microcode_update2_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_platform_op {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_platform_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_platform_op__bindgen_ty_1 {
    pub settime: xenpf_settime_t,
    pub settime32: xenpf_settime32_t,
    pub settime64: xenpf_settime64_t,
    pub add_memtype: xenpf_add_memtype_t,
    pub del_memtype: xenpf_del_memtype_t,
    pub read_memtype: xenpf_read_memtype_t,
    pub microcode: xenpf_microcode_update_t,
    pub platform_quirk: xenpf_platform_quirk_t,
    pub efi_runtime_call: xenpf_efi_runtime_call_t,
    pub firmware_info: xenpf_firmware_info_t,
    pub enter_acpi_sleep: xenpf_enter_acpi_sleep_t,
    pub change_freq: xenpf_change_freq_t,
    pub getidletime: xenpf_getidletime_t,
    pub set_pminfo: xenpf_set_processor_pminfo_t,
    pub pcpu_info: xenpf_pcpuinfo_t,
    pub pcpu_version: xenpf_pcpu_version_t,
    pub cpu_ol: xenpf_cpu_ol_t,
    pub cpu_add: xenpf_cpu_hotadd_t,
    pub mem_add: xenpf_mem_hotadd_t,
    pub core_parking: xenpf_core_parking_t,
    pub resource_op: xenpf_resource_op_t,
    pub symdata: xenpf_symdata_t,
    pub dom0_console: xenpf_dom0_console_t,
    pub ucode_revision: xenpf_ucode_revision_t,
    pub microcode2: xenpf_microcode_update2_t,
    pub pad: [u8; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_platform_op__bindgen_ty_1"]
        [::std::mem::size_of::<xen_platform_op__bindgen_ty_1>() - 128usize];
    ["Alignment of xen_platform_op__bindgen_ty_1"]
        [::std::mem::align_of::<xen_platform_op__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::settime"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, settime) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::settime32"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, settime32) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::settime64"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, settime64) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::add_memtype"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, add_memtype) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::del_memtype"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, del_memtype) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::read_memtype"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, read_memtype) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::microcode"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, microcode) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::platform_quirk"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, platform_quirk) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::efi_runtime_call"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, efi_runtime_call) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::firmware_info"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, firmware_info) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::enter_acpi_sleep"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, enter_acpi_sleep) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::change_freq"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, change_freq) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::getidletime"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, getidletime) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::set_pminfo"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, set_pminfo) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::pcpu_info"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, pcpu_info) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::pcpu_version"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, pcpu_version) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::cpu_ol"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, cpu_ol) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::cpu_add"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, cpu_add) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::mem_add"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, mem_add) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::core_parking"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, core_parking) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::resource_op"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, resource_op) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::symdata"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, symdata) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::dom0_console"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, dom0_console) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::ucode_revision"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, ucode_revision) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::microcode2"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, microcode2) - 0usize];
    ["Offset of field: xen_platform_op__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(xen_platform_op__bindgen_ty_1, pad) - 0usize];
};
impl Default for xen_platform_op__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_platform_op"][::std::mem::size_of::<xen_platform_op>() - 136usize];
    ["Alignment of xen_platform_op"][::std::mem::align_of::<xen_platform_op>() - 8usize];
    ["Offset of field: xen_platform_op::cmd"]
        [::std::mem::offset_of!(xen_platform_op, cmd) - 0usize];
    ["Offset of field: xen_platform_op::interface_version"]
        [::std::mem::offset_of!(xen_platform_op, interface_version) - 4usize];
    ["Offset of field: xen_platform_op::u"][::std::mem::offset_of!(xen_platform_op, u) - 8usize];
};
impl Default for xen_platform_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_platform_op_t = xen_platform_op;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_platform_op_t {
    pub p: *mut xen_platform_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_platform_op_t"]
        [::std::mem::size_of::<__guest_handle_xen_platform_op_t>() - 8usize];
    ["Alignment of __guest_handle_xen_platform_op_t"]
        [::std::mem::align_of::<__guest_handle_xen_platform_op_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_platform_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_platform_op_t, p) - 0usize];
};
impl Default for __guest_handle_xen_platform_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_platform_op_t {
    pub p: *const xen_platform_op_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_platform_op_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_platform_op_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_platform_op_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_platform_op_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_platform_op_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_platform_op_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_platform_op_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const xentoollog_level_XTL_NONE: xentoollog_level = 0;
pub const xentoollog_level_XTL_DEBUG: xentoollog_level = 1;
pub const xentoollog_level_XTL_VERBOSE: xentoollog_level = 2;
pub const xentoollog_level_XTL_DETAIL: xentoollog_level = 3;
pub const xentoollog_level_XTL_PROGRESS: xentoollog_level = 4;
pub const xentoollog_level_XTL_INFO: xentoollog_level = 5;
pub const xentoollog_level_XTL_NOTICE: xentoollog_level = 6;
pub const xentoollog_level_XTL_WARN: xentoollog_level = 7;
pub const xentoollog_level_XTL_ERROR: xentoollog_level = 8;
pub const xentoollog_level_XTL_CRITICAL: xentoollog_level = 9;
pub const xentoollog_level_XTL_NUM_LEVELS: xentoollog_level = 10;
pub type xentoollog_level = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xentoollog_logger {
    pub vmessage: ::std::option::Option<
        unsafe extern "C" fn(
            logger: *mut xentoollog_logger,
            level: xentoollog_level,
            errnoval: ::std::os::raw::c_int,
            context: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            al: *mut __va_list_tag,
        ),
    >,
    pub progress: ::std::option::Option<
        unsafe extern "C" fn(
            logger: *mut xentoollog_logger,
            context: *const ::std::os::raw::c_char,
            doing_what: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
            done: ::std::os::raw::c_ulong,
            total: ::std::os::raw::c_ulong,
        ),
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(logger: *mut xentoollog_logger)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xentoollog_logger"][::std::mem::size_of::<xentoollog_logger>() - 24usize];
    ["Alignment of xentoollog_logger"][::std::mem::align_of::<xentoollog_logger>() - 8usize];
    ["Offset of field: xentoollog_logger::vmessage"]
        [::std::mem::offset_of!(xentoollog_logger, vmessage) - 0usize];
    ["Offset of field: xentoollog_logger::progress"]
        [::std::mem::offset_of!(xentoollog_logger, progress) - 8usize];
    ["Offset of field: xentoollog_logger::destroy"]
        [::std::mem::offset_of!(xentoollog_logger, destroy) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xentoollog_logger_stdiostream {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xtl_createlogger_stdiostream(
        f: *mut FILE,
        min_level: xentoollog_level,
        flags: ::std::os::raw::c_uint,
    ) -> *mut xentoollog_logger_stdiostream;
}
extern "C" {
    pub fn xtl_stdiostream_set_minlevel(
        arg1: *mut xentoollog_logger_stdiostream,
        min_level: xentoollog_level,
    );
}
extern "C" {
    pub fn xtl_stdiostream_adjust_flags(
        arg1: *mut xentoollog_logger_stdiostream,
        set_flags: ::std::os::raw::c_uint,
        clear_flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn xtl_logger_destroy(logger: *mut xentoollog_logger);
}
extern "C" {
    pub fn xtl_logv(
        logger: *mut xentoollog_logger,
        level: xentoollog_level,
        errnoval: ::std::os::raw::c_int,
        context: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn xtl_log(
        logger: *mut xentoollog_logger,
        level: xentoollog_level,
        errnoval: ::std::os::raw::c_int,
        context: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn xtl_progress(
        logger: *mut xentoollog_logger,
        context: *const ::std::os::raw::c_char,
        doing_what: *const ::std::os::raw::c_char,
        done: ::std::os::raw::c_ulong,
        total: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn xtl_level_to_string(arg1: xentoollog_level) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct start_info_x86_32 {
    pub magic: [::std::os::raw::c_char; 32usize],
    pub nr_pages: u32,
    pub shared_info: u32,
    pub flags: u32,
    pub store_mfn: u32,
    pub store_evtchn: u32,
    pub console: start_info_x86_32__bindgen_ty_1,
    pub pt_base: u32,
    pub nr_pt_frames: u32,
    pub mfn_list: u32,
    pub mod_start: u32,
    pub mod_len: u32,
    pub cmd_line: [i8; 1024usize],
    pub first_p2m_pfn: u32,
    pub nr_p2m_frames: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union start_info_x86_32__bindgen_ty_1 {
    pub domU: start_info_x86_32__bindgen_ty_1__bindgen_ty_1,
    pub dom0: start_info_x86_32__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct start_info_x86_32__bindgen_ty_1__bindgen_ty_1 {
    pub mfn: u32,
    pub evtchn: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info_x86_32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<start_info_x86_32__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of start_info_x86_32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<start_info_x86_32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: start_info_x86_32__bindgen_ty_1__bindgen_ty_1::mfn"]
        [::std::mem::offset_of!(start_info_x86_32__bindgen_ty_1__bindgen_ty_1, mfn) - 0usize];
    ["Offset of field: start_info_x86_32__bindgen_ty_1__bindgen_ty_1::evtchn"]
        [::std::mem::offset_of!(start_info_x86_32__bindgen_ty_1__bindgen_ty_1, evtchn) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct start_info_x86_32__bindgen_ty_1__bindgen_ty_2 {
    pub info_off: u32,
    pub info_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info_x86_32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<start_info_x86_32__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of start_info_x86_32__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<start_info_x86_32__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: start_info_x86_32__bindgen_ty_1__bindgen_ty_2::info_off"]
        [::std::mem::offset_of!(start_info_x86_32__bindgen_ty_1__bindgen_ty_2, info_off) - 0usize];
    ["Offset of field: start_info_x86_32__bindgen_ty_1__bindgen_ty_2::info_size"]
        [::std::mem::offset_of!(start_info_x86_32__bindgen_ty_1__bindgen_ty_2, info_size) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info_x86_32__bindgen_ty_1"]
        [::std::mem::size_of::<start_info_x86_32__bindgen_ty_1>() - 8usize];
    ["Alignment of start_info_x86_32__bindgen_ty_1"]
        [::std::mem::align_of::<start_info_x86_32__bindgen_ty_1>() - 4usize];
    ["Offset of field: start_info_x86_32__bindgen_ty_1::domU"]
        [::std::mem::offset_of!(start_info_x86_32__bindgen_ty_1, domU) - 0usize];
    ["Offset of field: start_info_x86_32__bindgen_ty_1::dom0"]
        [::std::mem::offset_of!(start_info_x86_32__bindgen_ty_1, dom0) - 0usize];
};
impl Default for start_info_x86_32__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info_x86_32"][::std::mem::size_of::<start_info_x86_32>() - 1112usize];
    ["Alignment of start_info_x86_32"][::std::mem::align_of::<start_info_x86_32>() - 4usize];
    ["Offset of field: start_info_x86_32::magic"]
        [::std::mem::offset_of!(start_info_x86_32, magic) - 0usize];
    ["Offset of field: start_info_x86_32::nr_pages"]
        [::std::mem::offset_of!(start_info_x86_32, nr_pages) - 32usize];
    ["Offset of field: start_info_x86_32::shared_info"]
        [::std::mem::offset_of!(start_info_x86_32, shared_info) - 36usize];
    ["Offset of field: start_info_x86_32::flags"]
        [::std::mem::offset_of!(start_info_x86_32, flags) - 40usize];
    ["Offset of field: start_info_x86_32::store_mfn"]
        [::std::mem::offset_of!(start_info_x86_32, store_mfn) - 44usize];
    ["Offset of field: start_info_x86_32::store_evtchn"]
        [::std::mem::offset_of!(start_info_x86_32, store_evtchn) - 48usize];
    ["Offset of field: start_info_x86_32::console"]
        [::std::mem::offset_of!(start_info_x86_32, console) - 52usize];
    ["Offset of field: start_info_x86_32::pt_base"]
        [::std::mem::offset_of!(start_info_x86_32, pt_base) - 60usize];
    ["Offset of field: start_info_x86_32::nr_pt_frames"]
        [::std::mem::offset_of!(start_info_x86_32, nr_pt_frames) - 64usize];
    ["Offset of field: start_info_x86_32::mfn_list"]
        [::std::mem::offset_of!(start_info_x86_32, mfn_list) - 68usize];
    ["Offset of field: start_info_x86_32::mod_start"]
        [::std::mem::offset_of!(start_info_x86_32, mod_start) - 72usize];
    ["Offset of field: start_info_x86_32::mod_len"]
        [::std::mem::offset_of!(start_info_x86_32, mod_len) - 76usize];
    ["Offset of field: start_info_x86_32::cmd_line"]
        [::std::mem::offset_of!(start_info_x86_32, cmd_line) - 80usize];
    ["Offset of field: start_info_x86_32::first_p2m_pfn"]
        [::std::mem::offset_of!(start_info_x86_32, first_p2m_pfn) - 1104usize];
    ["Offset of field: start_info_x86_32::nr_p2m_frames"]
        [::std::mem::offset_of!(start_info_x86_32, nr_p2m_frames) - 1108usize];
};
impl Default for start_info_x86_32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type start_info_x86_32_t = start_info_x86_32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct trap_info_x86_32 {
    pub vector: u8,
    pub flags: u8,
    pub cs: u16,
    pub address: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of trap_info_x86_32"][::std::mem::size_of::<trap_info_x86_32>() - 8usize];
    ["Alignment of trap_info_x86_32"][::std::mem::align_of::<trap_info_x86_32>() - 4usize];
    ["Offset of field: trap_info_x86_32::vector"]
        [::std::mem::offset_of!(trap_info_x86_32, vector) - 0usize];
    ["Offset of field: trap_info_x86_32::flags"]
        [::std::mem::offset_of!(trap_info_x86_32, flags) - 1usize];
    ["Offset of field: trap_info_x86_32::cs"]
        [::std::mem::offset_of!(trap_info_x86_32, cs) - 2usize];
    ["Offset of field: trap_info_x86_32::address"]
        [::std::mem::offset_of!(trap_info_x86_32, address) - 4usize];
};
pub type trap_info_x86_32_t = trap_info_x86_32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_user_regs_x86_32 {
    pub ebx: u32,
    pub ecx: u32,
    pub edx: u32,
    pub esi: u32,
    pub edi: u32,
    pub ebp: u32,
    pub eax: u32,
    pub error_code: u16,
    pub entry_vector: u16,
    pub eip: u32,
    pub cs: u16,
    pub saved_upcall_mask: u8,
    pub _pad0: u8,
    pub eflags: u32,
    pub esp: u32,
    pub ss: u16,
    pub _pad1: u16,
    pub es: u16,
    pub _pad2: u16,
    pub ds: u16,
    pub _pad3: u16,
    pub fs: u16,
    pub _pad4: u16,
    pub gs: u16,
    pub _pad5: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_32"][::std::mem::size_of::<cpu_user_regs_x86_32>() - 68usize];
    ["Alignment of cpu_user_regs_x86_32"][::std::mem::align_of::<cpu_user_regs_x86_32>() - 4usize];
    ["Offset of field: cpu_user_regs_x86_32::ebx"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, ebx) - 0usize];
    ["Offset of field: cpu_user_regs_x86_32::ecx"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, ecx) - 4usize];
    ["Offset of field: cpu_user_regs_x86_32::edx"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, edx) - 8usize];
    ["Offset of field: cpu_user_regs_x86_32::esi"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, esi) - 12usize];
    ["Offset of field: cpu_user_regs_x86_32::edi"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, edi) - 16usize];
    ["Offset of field: cpu_user_regs_x86_32::ebp"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, ebp) - 20usize];
    ["Offset of field: cpu_user_regs_x86_32::eax"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, eax) - 24usize];
    ["Offset of field: cpu_user_regs_x86_32::error_code"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, error_code) - 28usize];
    ["Offset of field: cpu_user_regs_x86_32::entry_vector"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, entry_vector) - 30usize];
    ["Offset of field: cpu_user_regs_x86_32::eip"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, eip) - 32usize];
    ["Offset of field: cpu_user_regs_x86_32::cs"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, cs) - 36usize];
    ["Offset of field: cpu_user_regs_x86_32::saved_upcall_mask"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, saved_upcall_mask) - 38usize];
    ["Offset of field: cpu_user_regs_x86_32::_pad0"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, _pad0) - 39usize];
    ["Offset of field: cpu_user_regs_x86_32::eflags"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, eflags) - 40usize];
    ["Offset of field: cpu_user_regs_x86_32::esp"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, esp) - 44usize];
    ["Offset of field: cpu_user_regs_x86_32::ss"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, ss) - 48usize];
    ["Offset of field: cpu_user_regs_x86_32::_pad1"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, _pad1) - 50usize];
    ["Offset of field: cpu_user_regs_x86_32::es"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, es) - 52usize];
    ["Offset of field: cpu_user_regs_x86_32::_pad2"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, _pad2) - 54usize];
    ["Offset of field: cpu_user_regs_x86_32::ds"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, ds) - 56usize];
    ["Offset of field: cpu_user_regs_x86_32::_pad3"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, _pad3) - 58usize];
    ["Offset of field: cpu_user_regs_x86_32::fs"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, fs) - 60usize];
    ["Offset of field: cpu_user_regs_x86_32::_pad4"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, _pad4) - 62usize];
    ["Offset of field: cpu_user_regs_x86_32::gs"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, gs) - 64usize];
    ["Offset of field: cpu_user_regs_x86_32::_pad5"]
        [::std::mem::offset_of!(cpu_user_regs_x86_32, _pad5) - 66usize];
};
pub type cpu_user_regs_x86_32_t = cpu_user_regs_x86_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_guest_context_x86_32 {
    pub fpu_ctxt: vcpu_guest_context_x86_32__bindgen_ty_1,
    pub flags: u32,
    pub user_regs: cpu_user_regs_x86_32,
    pub trap_ctxt: [trap_info_x86_32; 256usize],
    pub ldt_base: u32,
    pub ldt_ents: u32,
    pub gdt_frames: [u32; 16usize],
    pub gdt_ents: u32,
    pub kernel_ss: u32,
    pub kernel_sp: u32,
    pub ctrlreg: [u32; 8usize],
    pub debugreg: [u32; 8usize],
    pub event_callback_cs: u32,
    pub event_callback_eip: u32,
    pub failsafe_callback_cs: u32,
    pub failsafe_callback_eip: u32,
    pub vm_assist: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_guest_context_x86_32__bindgen_ty_1 {
    pub x: [::std::os::raw::c_char; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_guest_context_x86_32__bindgen_ty_1"]
        [::std::mem::size_of::<vcpu_guest_context_x86_32__bindgen_ty_1>() - 512usize];
    ["Alignment of vcpu_guest_context_x86_32__bindgen_ty_1"]
        [::std::mem::align_of::<vcpu_guest_context_x86_32__bindgen_ty_1>() - 1usize];
    ["Offset of field: vcpu_guest_context_x86_32__bindgen_ty_1::x"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32__bindgen_ty_1, x) - 0usize];
};
impl Default for vcpu_guest_context_x86_32__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_guest_context_x86_32"]
        [::std::mem::size_of::<vcpu_guest_context_x86_32>() - 2800usize];
    ["Alignment of vcpu_guest_context_x86_32"]
        [::std::mem::align_of::<vcpu_guest_context_x86_32>() - 4usize];
    ["Offset of field: vcpu_guest_context_x86_32::fpu_ctxt"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, fpu_ctxt) - 0usize];
    ["Offset of field: vcpu_guest_context_x86_32::flags"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, flags) - 512usize];
    ["Offset of field: vcpu_guest_context_x86_32::user_regs"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, user_regs) - 516usize];
    ["Offset of field: vcpu_guest_context_x86_32::trap_ctxt"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, trap_ctxt) - 584usize];
    ["Offset of field: vcpu_guest_context_x86_32::ldt_base"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, ldt_base) - 2632usize];
    ["Offset of field: vcpu_guest_context_x86_32::ldt_ents"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, ldt_ents) - 2636usize];
    ["Offset of field: vcpu_guest_context_x86_32::gdt_frames"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, gdt_frames) - 2640usize];
    ["Offset of field: vcpu_guest_context_x86_32::gdt_ents"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, gdt_ents) - 2704usize];
    ["Offset of field: vcpu_guest_context_x86_32::kernel_ss"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, kernel_ss) - 2708usize];
    ["Offset of field: vcpu_guest_context_x86_32::kernel_sp"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, kernel_sp) - 2712usize];
    ["Offset of field: vcpu_guest_context_x86_32::ctrlreg"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, ctrlreg) - 2716usize];
    ["Offset of field: vcpu_guest_context_x86_32::debugreg"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, debugreg) - 2748usize];
    ["Offset of field: vcpu_guest_context_x86_32::event_callback_cs"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, event_callback_cs) - 2780usize];
    ["Offset of field: vcpu_guest_context_x86_32::event_callback_eip"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, event_callback_eip) - 2784usize];
    ["Offset of field: vcpu_guest_context_x86_32::failsafe_callback_cs"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, failsafe_callback_cs) - 2788usize];
    ["Offset of field: vcpu_guest_context_x86_32::failsafe_callback_eip"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, failsafe_callback_eip) - 2792usize];
    ["Offset of field: vcpu_guest_context_x86_32::vm_assist"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_32, vm_assist) - 2796usize];
};
impl Default for vcpu_guest_context_x86_32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type vcpu_guest_context_x86_32_t = vcpu_guest_context_x86_32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct arch_vcpu_info_x86_32 {
    pub cr2: u32,
    pub pad: [u32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_vcpu_info_x86_32"][::std::mem::size_of::<arch_vcpu_info_x86_32>() - 24usize];
    ["Alignment of arch_vcpu_info_x86_32"]
        [::std::mem::align_of::<arch_vcpu_info_x86_32>() - 4usize];
    ["Offset of field: arch_vcpu_info_x86_32::cr2"]
        [::std::mem::offset_of!(arch_vcpu_info_x86_32, cr2) - 0usize];
    ["Offset of field: arch_vcpu_info_x86_32::pad"]
        [::std::mem::offset_of!(arch_vcpu_info_x86_32, pad) - 4usize];
};
pub type arch_vcpu_info_x86_32_t = arch_vcpu_info_x86_32;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_time_info_x86_32 {
    pub version: u32,
    pub pad0: u32,
    pub tsc_timestamp: u64,
    pub system_time: u64,
    pub tsc_to_system_mul: u32,
    pub tsc_shift: i8,
    pub flags: u8,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_time_info_x86_32"][::std::mem::size_of::<vcpu_time_info_x86_32>() - 32usize];
    ["Alignment of vcpu_time_info_x86_32"]
        [::std::mem::align_of::<vcpu_time_info_x86_32>() - 4usize];
    ["Offset of field: vcpu_time_info_x86_32::version"]
        [::std::mem::offset_of!(vcpu_time_info_x86_32, version) - 0usize];
    ["Offset of field: vcpu_time_info_x86_32::pad0"]
        [::std::mem::offset_of!(vcpu_time_info_x86_32, pad0) - 4usize];
    ["Offset of field: vcpu_time_info_x86_32::tsc_timestamp"]
        [::std::mem::offset_of!(vcpu_time_info_x86_32, tsc_timestamp) - 8usize];
    ["Offset of field: vcpu_time_info_x86_32::system_time"]
        [::std::mem::offset_of!(vcpu_time_info_x86_32, system_time) - 16usize];
    ["Offset of field: vcpu_time_info_x86_32::tsc_to_system_mul"]
        [::std::mem::offset_of!(vcpu_time_info_x86_32, tsc_to_system_mul) - 24usize];
    ["Offset of field: vcpu_time_info_x86_32::tsc_shift"]
        [::std::mem::offset_of!(vcpu_time_info_x86_32, tsc_shift) - 28usize];
    ["Offset of field: vcpu_time_info_x86_32::flags"]
        [::std::mem::offset_of!(vcpu_time_info_x86_32, flags) - 29usize];
    ["Offset of field: vcpu_time_info_x86_32::pad1"]
        [::std::mem::offset_of!(vcpu_time_info_x86_32, pad1) - 30usize];
};
pub type vcpu_time_info_x86_32_t = vcpu_time_info_x86_32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_info_x86_32 {
    pub evtchn_upcall_pending: u8,
    pub evtchn_upcall_mask: u8,
    pub evtchn_pending_sel: u32,
    pub arch: arch_vcpu_info_x86_32,
    pub time: vcpu_time_info_x86_32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_info_x86_32"][::std::mem::size_of::<vcpu_info_x86_32>() - 64usize];
    ["Alignment of vcpu_info_x86_32"][::std::mem::align_of::<vcpu_info_x86_32>() - 4usize];
    ["Offset of field: vcpu_info_x86_32::evtchn_upcall_pending"]
        [::std::mem::offset_of!(vcpu_info_x86_32, evtchn_upcall_pending) - 0usize];
    ["Offset of field: vcpu_info_x86_32::evtchn_upcall_mask"]
        [::std::mem::offset_of!(vcpu_info_x86_32, evtchn_upcall_mask) - 1usize];
    ["Offset of field: vcpu_info_x86_32::evtchn_pending_sel"]
        [::std::mem::offset_of!(vcpu_info_x86_32, evtchn_pending_sel) - 4usize];
    ["Offset of field: vcpu_info_x86_32::arch"]
        [::std::mem::offset_of!(vcpu_info_x86_32, arch) - 8usize];
    ["Offset of field: vcpu_info_x86_32::time"]
        [::std::mem::offset_of!(vcpu_info_x86_32, time) - 32usize];
};
pub type vcpu_info_x86_32_t = vcpu_info_x86_32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct arch_shared_info_x86_32 {
    pub max_pfn: u32,
    pub pfn_to_mfn_frame_list_list: u32,
    pub nmi_reason: u32,
    pub p2m_cr3: u32,
    pub p2m_vaddr: u32,
    pub p2m_generation: u32,
    pub wc_sec_hi: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_shared_info_x86_32"][::std::mem::size_of::<arch_shared_info_x86_32>() - 28usize];
    ["Alignment of arch_shared_info_x86_32"]
        [::std::mem::align_of::<arch_shared_info_x86_32>() - 4usize];
    ["Offset of field: arch_shared_info_x86_32::max_pfn"]
        [::std::mem::offset_of!(arch_shared_info_x86_32, max_pfn) - 0usize];
    ["Offset of field: arch_shared_info_x86_32::pfn_to_mfn_frame_list_list"]
        [::std::mem::offset_of!(arch_shared_info_x86_32, pfn_to_mfn_frame_list_list) - 4usize];
    ["Offset of field: arch_shared_info_x86_32::nmi_reason"]
        [::std::mem::offset_of!(arch_shared_info_x86_32, nmi_reason) - 8usize];
    ["Offset of field: arch_shared_info_x86_32::p2m_cr3"]
        [::std::mem::offset_of!(arch_shared_info_x86_32, p2m_cr3) - 12usize];
    ["Offset of field: arch_shared_info_x86_32::p2m_vaddr"]
        [::std::mem::offset_of!(arch_shared_info_x86_32, p2m_vaddr) - 16usize];
    ["Offset of field: arch_shared_info_x86_32::p2m_generation"]
        [::std::mem::offset_of!(arch_shared_info_x86_32, p2m_generation) - 20usize];
    ["Offset of field: arch_shared_info_x86_32::wc_sec_hi"]
        [::std::mem::offset_of!(arch_shared_info_x86_32, wc_sec_hi) - 24usize];
};
pub type arch_shared_info_x86_32_t = arch_shared_info_x86_32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct shared_info_x86_32 {
    pub vcpu_info: [vcpu_info_x86_32; 32usize],
    pub evtchn_pending: [u32; 32usize],
    pub evtchn_mask: [u32; 32usize],
    pub wc_version: u32,
    pub wc_sec: u32,
    pub wc_nsec: u32,
    pub arch: arch_shared_info_x86_32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shared_info_x86_32"][::std::mem::size_of::<shared_info_x86_32>() - 2344usize];
    ["Alignment of shared_info_x86_32"][::std::mem::align_of::<shared_info_x86_32>() - 4usize];
    ["Offset of field: shared_info_x86_32::vcpu_info"]
        [::std::mem::offset_of!(shared_info_x86_32, vcpu_info) - 0usize];
    ["Offset of field: shared_info_x86_32::evtchn_pending"]
        [::std::mem::offset_of!(shared_info_x86_32, evtchn_pending) - 2048usize];
    ["Offset of field: shared_info_x86_32::evtchn_mask"]
        [::std::mem::offset_of!(shared_info_x86_32, evtchn_mask) - 2176usize];
    ["Offset of field: shared_info_x86_32::wc_version"]
        [::std::mem::offset_of!(shared_info_x86_32, wc_version) - 2304usize];
    ["Offset of field: shared_info_x86_32::wc_sec"]
        [::std::mem::offset_of!(shared_info_x86_32, wc_sec) - 2308usize];
    ["Offset of field: shared_info_x86_32::wc_nsec"]
        [::std::mem::offset_of!(shared_info_x86_32, wc_nsec) - 2312usize];
    ["Offset of field: shared_info_x86_32::arch"]
        [::std::mem::offset_of!(shared_info_x86_32, arch) - 2316usize];
};
pub type shared_info_x86_32_t = shared_info_x86_32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct start_info_x86_64 {
    pub magic: [::std::os::raw::c_char; 32usize],
    pub nr_pages: u64,
    pub shared_info: u64,
    pub flags: u32,
    pub store_mfn: u64,
    pub store_evtchn: u32,
    pub console: start_info_x86_64__bindgen_ty_1,
    pub pt_base: u64,
    pub nr_pt_frames: u64,
    pub mfn_list: u64,
    pub mod_start: u64,
    pub mod_len: u64,
    pub cmd_line: [i8; 1024usize],
    pub first_p2m_pfn: u64,
    pub nr_p2m_frames: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union start_info_x86_64__bindgen_ty_1 {
    pub domU: start_info_x86_64__bindgen_ty_1__bindgen_ty_1,
    pub dom0: start_info_x86_64__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct start_info_x86_64__bindgen_ty_1__bindgen_ty_1 {
    pub mfn: u64,
    pub evtchn: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info_x86_64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<start_info_x86_64__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of start_info_x86_64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<start_info_x86_64__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: start_info_x86_64__bindgen_ty_1__bindgen_ty_1::mfn"]
        [::std::mem::offset_of!(start_info_x86_64__bindgen_ty_1__bindgen_ty_1, mfn) - 0usize];
    ["Offset of field: start_info_x86_64__bindgen_ty_1__bindgen_ty_1::evtchn"]
        [::std::mem::offset_of!(start_info_x86_64__bindgen_ty_1__bindgen_ty_1, evtchn) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct start_info_x86_64__bindgen_ty_1__bindgen_ty_2 {
    pub info_off: u32,
    pub info_size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info_x86_64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<start_info_x86_64__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of start_info_x86_64__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<start_info_x86_64__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: start_info_x86_64__bindgen_ty_1__bindgen_ty_2::info_off"]
        [::std::mem::offset_of!(start_info_x86_64__bindgen_ty_1__bindgen_ty_2, info_off) - 0usize];
    ["Offset of field: start_info_x86_64__bindgen_ty_1__bindgen_ty_2::info_size"]
        [::std::mem::offset_of!(start_info_x86_64__bindgen_ty_1__bindgen_ty_2, info_size) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info_x86_64__bindgen_ty_1"]
        [::std::mem::size_of::<start_info_x86_64__bindgen_ty_1>() - 16usize];
    ["Alignment of start_info_x86_64__bindgen_ty_1"]
        [::std::mem::align_of::<start_info_x86_64__bindgen_ty_1>() - 8usize];
    ["Offset of field: start_info_x86_64__bindgen_ty_1::domU"]
        [::std::mem::offset_of!(start_info_x86_64__bindgen_ty_1, domU) - 0usize];
    ["Offset of field: start_info_x86_64__bindgen_ty_1::dom0"]
        [::std::mem::offset_of!(start_info_x86_64__bindgen_ty_1, dom0) - 0usize];
};
impl Default for start_info_x86_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info_x86_64"][::std::mem::size_of::<start_info_x86_64>() - 1168usize];
    ["Alignment of start_info_x86_64"][::std::mem::align_of::<start_info_x86_64>() - 8usize];
    ["Offset of field: start_info_x86_64::magic"]
        [::std::mem::offset_of!(start_info_x86_64, magic) - 0usize];
    ["Offset of field: start_info_x86_64::nr_pages"]
        [::std::mem::offset_of!(start_info_x86_64, nr_pages) - 32usize];
    ["Offset of field: start_info_x86_64::shared_info"]
        [::std::mem::offset_of!(start_info_x86_64, shared_info) - 40usize];
    ["Offset of field: start_info_x86_64::flags"]
        [::std::mem::offset_of!(start_info_x86_64, flags) - 48usize];
    ["Offset of field: start_info_x86_64::store_mfn"]
        [::std::mem::offset_of!(start_info_x86_64, store_mfn) - 56usize];
    ["Offset of field: start_info_x86_64::store_evtchn"]
        [::std::mem::offset_of!(start_info_x86_64, store_evtchn) - 64usize];
    ["Offset of field: start_info_x86_64::console"]
        [::std::mem::offset_of!(start_info_x86_64, console) - 72usize];
    ["Offset of field: start_info_x86_64::pt_base"]
        [::std::mem::offset_of!(start_info_x86_64, pt_base) - 88usize];
    ["Offset of field: start_info_x86_64::nr_pt_frames"]
        [::std::mem::offset_of!(start_info_x86_64, nr_pt_frames) - 96usize];
    ["Offset of field: start_info_x86_64::mfn_list"]
        [::std::mem::offset_of!(start_info_x86_64, mfn_list) - 104usize];
    ["Offset of field: start_info_x86_64::mod_start"]
        [::std::mem::offset_of!(start_info_x86_64, mod_start) - 112usize];
    ["Offset of field: start_info_x86_64::mod_len"]
        [::std::mem::offset_of!(start_info_x86_64, mod_len) - 120usize];
    ["Offset of field: start_info_x86_64::cmd_line"]
        [::std::mem::offset_of!(start_info_x86_64, cmd_line) - 128usize];
    ["Offset of field: start_info_x86_64::first_p2m_pfn"]
        [::std::mem::offset_of!(start_info_x86_64, first_p2m_pfn) - 1152usize];
    ["Offset of field: start_info_x86_64::nr_p2m_frames"]
        [::std::mem::offset_of!(start_info_x86_64, nr_p2m_frames) - 1160usize];
};
impl Default for start_info_x86_64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type start_info_x86_64_t = start_info_x86_64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct trap_info_x86_64 {
    pub vector: u8,
    pub flags: u8,
    pub cs: u16,
    pub address: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of trap_info_x86_64"][::std::mem::size_of::<trap_info_x86_64>() - 16usize];
    ["Alignment of trap_info_x86_64"][::std::mem::align_of::<trap_info_x86_64>() - 8usize];
    ["Offset of field: trap_info_x86_64::vector"]
        [::std::mem::offset_of!(trap_info_x86_64, vector) - 0usize];
    ["Offset of field: trap_info_x86_64::flags"]
        [::std::mem::offset_of!(trap_info_x86_64, flags) - 1usize];
    ["Offset of field: trap_info_x86_64::cs"]
        [::std::mem::offset_of!(trap_info_x86_64, cs) - 2usize];
    ["Offset of field: trap_info_x86_64::address"]
        [::std::mem::offset_of!(trap_info_x86_64, address) - 8usize];
};
pub type trap_info_x86_64_t = trap_info_x86_64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cpu_user_regs_x86_64 {
    pub __bindgen_anon_1: cpu_user_regs_x86_64__bindgen_ty_1,
    pub __bindgen_anon_2: cpu_user_regs_x86_64__bindgen_ty_2,
    pub __bindgen_anon_3: cpu_user_regs_x86_64__bindgen_ty_3,
    pub __bindgen_anon_4: cpu_user_regs_x86_64__bindgen_ty_4,
    pub __bindgen_anon_5: cpu_user_regs_x86_64__bindgen_ty_5,
    pub __bindgen_anon_6: cpu_user_regs_x86_64__bindgen_ty_6,
    pub __bindgen_anon_7: cpu_user_regs_x86_64__bindgen_ty_7,
    pub __bindgen_anon_8: cpu_user_regs_x86_64__bindgen_ty_8,
    pub __bindgen_anon_9: cpu_user_regs_x86_64__bindgen_ty_9,
    pub __bindgen_anon_10: cpu_user_regs_x86_64__bindgen_ty_10,
    pub __bindgen_anon_11: cpu_user_regs_x86_64__bindgen_ty_11,
    pub __bindgen_anon_12: cpu_user_regs_x86_64__bindgen_ty_12,
    pub __bindgen_anon_13: cpu_user_regs_x86_64__bindgen_ty_13,
    pub __bindgen_anon_14: cpu_user_regs_x86_64__bindgen_ty_14,
    pub __bindgen_anon_15: cpu_user_regs_x86_64__bindgen_ty_15,
    pub error_code: u32,
    pub entry_vector: u32,
    pub __bindgen_anon_16: cpu_user_regs_x86_64__bindgen_ty_16,
    pub cs: u16,
    pub _pad0: [u16; 1usize],
    pub saved_upcall_mask: u8,
    pub _pad1: [u8; 3usize],
    pub __bindgen_anon_17: cpu_user_regs_x86_64__bindgen_ty_17,
    pub __bindgen_anon_18: cpu_user_regs_x86_64__bindgen_ty_18,
    pub ss: u16,
    pub _pad2: [u16; 3usize],
    pub es: u16,
    pub _pad3: [u16; 3usize],
    pub ds: u16,
    pub _pad4: [u16; 3usize],
    pub fs: u16,
    pub _pad5: [u16; 3usize],
    pub gs: u16,
    pub _pad6: [u16; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_1 {
    pub r15: u64,
    pub e15: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_1"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_1>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_1"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_1>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_1::r15"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_1, r15) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_1::e15"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_1, e15) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_2 {
    pub r14: u64,
    pub e14: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_2"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_2>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_2"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_2>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_2::r14"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_2, r14) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_2::e14"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_2, e14) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_3 {
    pub r13: u64,
    pub e13: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_3"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_3>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_3"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_3>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_3::r13"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_3, r13) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_3::e13"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_3, e13) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_4 {
    pub r12: u64,
    pub e12: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_4"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_4>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_4"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_4>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_4::r12"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_4, r12) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_4::e12"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_4, e12) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_5 {
    pub rbp: u64,
    pub ebp: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_5"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_5>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_5"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_5>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_5::rbp"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_5, rbp) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_5::ebp"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_5, ebp) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_6 {
    pub rbx: u64,
    pub ebx: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_6"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_6>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_6"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_6>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_6::rbx"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_6, rbx) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_6::ebx"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_6, ebx) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_7 {
    pub r11: u64,
    pub e11: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_7"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_7>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_7"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_7>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_7::r11"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_7, r11) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_7::e11"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_7, e11) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_7 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_8 {
    pub r10: u64,
    pub e10: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_8"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_8>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_8"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_8>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_8::r10"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_8, r10) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_8::e10"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_8, e10) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_9 {
    pub r9: u64,
    pub e9: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_9"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_9>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_9"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_9>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_9::r9"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_9, r9) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_9::e9"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_9, e9) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_9 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_10 {
    pub r8: u64,
    pub e8: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_10"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_10>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_10"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_10>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_10::r8"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_10, r8) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_10::e8"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_10, e8) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_10 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_11 {
    pub rax: u64,
    pub eax: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_11"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_11>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_11"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_11>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_11::rax"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_11, rax) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_11::eax"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_11, eax) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_11 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_12 {
    pub rcx: u64,
    pub ecx: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_12"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_12>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_12"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_12>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_12::rcx"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_12, rcx) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_12::ecx"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_12, ecx) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_12 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_13 {
    pub rdx: u64,
    pub edx: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_13"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_13>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_13"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_13>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_13::rdx"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_13, rdx) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_13::edx"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_13, edx) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_13 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_14 {
    pub rsi: u64,
    pub esi: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_14"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_14>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_14"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_14>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_14::rsi"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_14, rsi) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_14::esi"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_14, esi) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_14 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_15 {
    pub rdi: u64,
    pub edi: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_15"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_15>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_15"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_15>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_15::rdi"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_15, rdi) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_15::edi"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_15, edi) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_15 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_16 {
    pub rip: u64,
    pub eip: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_16"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_16>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_16"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_16>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_16::rip"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_16, rip) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_16::eip"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_16, eip) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_17 {
    pub rflags: u64,
    pub eflags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_17"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_17>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_17"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_17>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_17::rflags"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_17, rflags) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_17::eflags"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_17, eflags) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_17 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cpu_user_regs_x86_64__bindgen_ty_18 {
    pub rsp: u64,
    pub esp: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64__bindgen_ty_18"]
        [::std::mem::size_of::<cpu_user_regs_x86_64__bindgen_ty_18>() - 8usize];
    ["Alignment of cpu_user_regs_x86_64__bindgen_ty_18"]
        [::std::mem::align_of::<cpu_user_regs_x86_64__bindgen_ty_18>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_18::rsp"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_18, rsp) - 0usize];
    ["Offset of field: cpu_user_regs_x86_64__bindgen_ty_18::esp"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64__bindgen_ty_18, esp) - 0usize];
};
impl Default for cpu_user_regs_x86_64__bindgen_ty_18 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_user_regs_x86_64"][::std::mem::size_of::<cpu_user_regs_x86_64>() - 200usize];
    ["Alignment of cpu_user_regs_x86_64"][::std::mem::align_of::<cpu_user_regs_x86_64>() - 8usize];
    ["Offset of field: cpu_user_regs_x86_64::error_code"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, error_code) - 120usize];
    ["Offset of field: cpu_user_regs_x86_64::entry_vector"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, entry_vector) - 124usize];
    ["Offset of field: cpu_user_regs_x86_64::cs"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, cs) - 136usize];
    ["Offset of field: cpu_user_regs_x86_64::_pad0"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, _pad0) - 138usize];
    ["Offset of field: cpu_user_regs_x86_64::saved_upcall_mask"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, saved_upcall_mask) - 140usize];
    ["Offset of field: cpu_user_regs_x86_64::_pad1"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, _pad1) - 141usize];
    ["Offset of field: cpu_user_regs_x86_64::ss"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, ss) - 160usize];
    ["Offset of field: cpu_user_regs_x86_64::_pad2"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, _pad2) - 162usize];
    ["Offset of field: cpu_user_regs_x86_64::es"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, es) - 168usize];
    ["Offset of field: cpu_user_regs_x86_64::_pad3"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, _pad3) - 170usize];
    ["Offset of field: cpu_user_regs_x86_64::ds"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, ds) - 176usize];
    ["Offset of field: cpu_user_regs_x86_64::_pad4"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, _pad4) - 178usize];
    ["Offset of field: cpu_user_regs_x86_64::fs"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, fs) - 184usize];
    ["Offset of field: cpu_user_regs_x86_64::_pad5"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, _pad5) - 186usize];
    ["Offset of field: cpu_user_regs_x86_64::gs"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, gs) - 192usize];
    ["Offset of field: cpu_user_regs_x86_64::_pad6"]
        [::std::mem::offset_of!(cpu_user_regs_x86_64, _pad6) - 194usize];
};
impl Default for cpu_user_regs_x86_64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type cpu_user_regs_x86_64_t = cpu_user_regs_x86_64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vcpu_guest_context_x86_64 {
    pub fpu_ctxt: vcpu_guest_context_x86_64__bindgen_ty_1,
    pub flags: u64,
    pub user_regs: cpu_user_regs_x86_64,
    pub trap_ctxt: [trap_info_x86_64; 256usize],
    pub ldt_base: u64,
    pub ldt_ents: u64,
    pub gdt_frames: [u64; 16usize],
    pub gdt_ents: u64,
    pub kernel_ss: u64,
    pub kernel_sp: u64,
    pub ctrlreg: [u64; 8usize],
    pub debugreg: [u64; 8usize],
    pub event_callback_eip: u64,
    pub failsafe_callback_eip: u64,
    pub syscall_callback_eip: u64,
    pub vm_assist: u64,
    pub fs_base: u64,
    pub gs_base_kernel: u64,
    pub gs_base_user: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_guest_context_x86_64__bindgen_ty_1 {
    pub x: [::std::os::raw::c_char; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_guest_context_x86_64__bindgen_ty_1"]
        [::std::mem::size_of::<vcpu_guest_context_x86_64__bindgen_ty_1>() - 512usize];
    ["Alignment of vcpu_guest_context_x86_64__bindgen_ty_1"]
        [::std::mem::align_of::<vcpu_guest_context_x86_64__bindgen_ty_1>() - 1usize];
    ["Offset of field: vcpu_guest_context_x86_64__bindgen_ty_1::x"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64__bindgen_ty_1, x) - 0usize];
};
impl Default for vcpu_guest_context_x86_64__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_guest_context_x86_64"]
        [::std::mem::size_of::<vcpu_guest_context_x86_64>() - 5168usize];
    ["Alignment of vcpu_guest_context_x86_64"]
        [::std::mem::align_of::<vcpu_guest_context_x86_64>() - 8usize];
    ["Offset of field: vcpu_guest_context_x86_64::fpu_ctxt"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, fpu_ctxt) - 0usize];
    ["Offset of field: vcpu_guest_context_x86_64::flags"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, flags) - 512usize];
    ["Offset of field: vcpu_guest_context_x86_64::user_regs"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, user_regs) - 520usize];
    ["Offset of field: vcpu_guest_context_x86_64::trap_ctxt"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, trap_ctxt) - 720usize];
    ["Offset of field: vcpu_guest_context_x86_64::ldt_base"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, ldt_base) - 4816usize];
    ["Offset of field: vcpu_guest_context_x86_64::ldt_ents"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, ldt_ents) - 4824usize];
    ["Offset of field: vcpu_guest_context_x86_64::gdt_frames"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, gdt_frames) - 4832usize];
    ["Offset of field: vcpu_guest_context_x86_64::gdt_ents"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, gdt_ents) - 4960usize];
    ["Offset of field: vcpu_guest_context_x86_64::kernel_ss"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, kernel_ss) - 4968usize];
    ["Offset of field: vcpu_guest_context_x86_64::kernel_sp"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, kernel_sp) - 4976usize];
    ["Offset of field: vcpu_guest_context_x86_64::ctrlreg"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, ctrlreg) - 4984usize];
    ["Offset of field: vcpu_guest_context_x86_64::debugreg"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, debugreg) - 5048usize];
    ["Offset of field: vcpu_guest_context_x86_64::event_callback_eip"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, event_callback_eip) - 5112usize];
    ["Offset of field: vcpu_guest_context_x86_64::failsafe_callback_eip"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, failsafe_callback_eip) - 5120usize];
    ["Offset of field: vcpu_guest_context_x86_64::syscall_callback_eip"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, syscall_callback_eip) - 5128usize];
    ["Offset of field: vcpu_guest_context_x86_64::vm_assist"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, vm_assist) - 5136usize];
    ["Offset of field: vcpu_guest_context_x86_64::fs_base"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, fs_base) - 5144usize];
    ["Offset of field: vcpu_guest_context_x86_64::gs_base_kernel"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, gs_base_kernel) - 5152usize];
    ["Offset of field: vcpu_guest_context_x86_64::gs_base_user"]
        [::std::mem::offset_of!(vcpu_guest_context_x86_64, gs_base_user) - 5160usize];
};
impl Default for vcpu_guest_context_x86_64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type vcpu_guest_context_x86_64_t = vcpu_guest_context_x86_64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct arch_vcpu_info_x86_64 {
    pub cr2: u64,
    pub pad: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_vcpu_info_x86_64"][::std::mem::size_of::<arch_vcpu_info_x86_64>() - 16usize];
    ["Alignment of arch_vcpu_info_x86_64"]
        [::std::mem::align_of::<arch_vcpu_info_x86_64>() - 8usize];
    ["Offset of field: arch_vcpu_info_x86_64::cr2"]
        [::std::mem::offset_of!(arch_vcpu_info_x86_64, cr2) - 0usize];
    ["Offset of field: arch_vcpu_info_x86_64::pad"]
        [::std::mem::offset_of!(arch_vcpu_info_x86_64, pad) - 8usize];
};
pub type arch_vcpu_info_x86_64_t = arch_vcpu_info_x86_64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_time_info_x86_64 {
    pub version: u32,
    pub pad0: u32,
    pub tsc_timestamp: u64,
    pub system_time: u64,
    pub tsc_to_system_mul: u32,
    pub tsc_shift: i8,
    pub flags: u8,
    pub pad1: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_time_info_x86_64"][::std::mem::size_of::<vcpu_time_info_x86_64>() - 32usize];
    ["Alignment of vcpu_time_info_x86_64"]
        [::std::mem::align_of::<vcpu_time_info_x86_64>() - 8usize];
    ["Offset of field: vcpu_time_info_x86_64::version"]
        [::std::mem::offset_of!(vcpu_time_info_x86_64, version) - 0usize];
    ["Offset of field: vcpu_time_info_x86_64::pad0"]
        [::std::mem::offset_of!(vcpu_time_info_x86_64, pad0) - 4usize];
    ["Offset of field: vcpu_time_info_x86_64::tsc_timestamp"]
        [::std::mem::offset_of!(vcpu_time_info_x86_64, tsc_timestamp) - 8usize];
    ["Offset of field: vcpu_time_info_x86_64::system_time"]
        [::std::mem::offset_of!(vcpu_time_info_x86_64, system_time) - 16usize];
    ["Offset of field: vcpu_time_info_x86_64::tsc_to_system_mul"]
        [::std::mem::offset_of!(vcpu_time_info_x86_64, tsc_to_system_mul) - 24usize];
    ["Offset of field: vcpu_time_info_x86_64::tsc_shift"]
        [::std::mem::offset_of!(vcpu_time_info_x86_64, tsc_shift) - 28usize];
    ["Offset of field: vcpu_time_info_x86_64::flags"]
        [::std::mem::offset_of!(vcpu_time_info_x86_64, flags) - 29usize];
    ["Offset of field: vcpu_time_info_x86_64::pad1"]
        [::std::mem::offset_of!(vcpu_time_info_x86_64, pad1) - 30usize];
};
pub type vcpu_time_info_x86_64_t = vcpu_time_info_x86_64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vcpu_info_x86_64 {
    pub evtchn_upcall_pending: u8,
    pub evtchn_upcall_mask: u8,
    pub evtchn_pending_sel: u64,
    pub arch: arch_vcpu_info_x86_64,
    pub time: vcpu_time_info_x86_64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_info_x86_64"][::std::mem::size_of::<vcpu_info_x86_64>() - 64usize];
    ["Alignment of vcpu_info_x86_64"][::std::mem::align_of::<vcpu_info_x86_64>() - 8usize];
    ["Offset of field: vcpu_info_x86_64::evtchn_upcall_pending"]
        [::std::mem::offset_of!(vcpu_info_x86_64, evtchn_upcall_pending) - 0usize];
    ["Offset of field: vcpu_info_x86_64::evtchn_upcall_mask"]
        [::std::mem::offset_of!(vcpu_info_x86_64, evtchn_upcall_mask) - 1usize];
    ["Offset of field: vcpu_info_x86_64::evtchn_pending_sel"]
        [::std::mem::offset_of!(vcpu_info_x86_64, evtchn_pending_sel) - 8usize];
    ["Offset of field: vcpu_info_x86_64::arch"]
        [::std::mem::offset_of!(vcpu_info_x86_64, arch) - 16usize];
    ["Offset of field: vcpu_info_x86_64::time"]
        [::std::mem::offset_of!(vcpu_info_x86_64, time) - 32usize];
};
pub type vcpu_info_x86_64_t = vcpu_info_x86_64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct arch_shared_info_x86_64 {
    pub max_pfn: u64,
    pub pfn_to_mfn_frame_list_list: u64,
    pub nmi_reason: u64,
    pub p2m_cr3: u64,
    pub p2m_vaddr: u64,
    pub p2m_generation: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of arch_shared_info_x86_64"][::std::mem::size_of::<arch_shared_info_x86_64>() - 48usize];
    ["Alignment of arch_shared_info_x86_64"]
        [::std::mem::align_of::<arch_shared_info_x86_64>() - 8usize];
    ["Offset of field: arch_shared_info_x86_64::max_pfn"]
        [::std::mem::offset_of!(arch_shared_info_x86_64, max_pfn) - 0usize];
    ["Offset of field: arch_shared_info_x86_64::pfn_to_mfn_frame_list_list"]
        [::std::mem::offset_of!(arch_shared_info_x86_64, pfn_to_mfn_frame_list_list) - 8usize];
    ["Offset of field: arch_shared_info_x86_64::nmi_reason"]
        [::std::mem::offset_of!(arch_shared_info_x86_64, nmi_reason) - 16usize];
    ["Offset of field: arch_shared_info_x86_64::p2m_cr3"]
        [::std::mem::offset_of!(arch_shared_info_x86_64, p2m_cr3) - 24usize];
    ["Offset of field: arch_shared_info_x86_64::p2m_vaddr"]
        [::std::mem::offset_of!(arch_shared_info_x86_64, p2m_vaddr) - 32usize];
    ["Offset of field: arch_shared_info_x86_64::p2m_generation"]
        [::std::mem::offset_of!(arch_shared_info_x86_64, p2m_generation) - 40usize];
};
pub type arch_shared_info_x86_64_t = arch_shared_info_x86_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_info_x86_64 {
    pub vcpu_info: [vcpu_info_x86_64; 32usize],
    pub evtchn_pending: [u64; 64usize],
    pub evtchn_mask: [u64; 64usize],
    pub wc_version: u32,
    pub wc_sec: u32,
    pub wc_nsec: u32,
    pub wc_sec_hi: u32,
    pub arch: arch_shared_info_x86_64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shared_info_x86_64"][::std::mem::size_of::<shared_info_x86_64>() - 3136usize];
    ["Alignment of shared_info_x86_64"][::std::mem::align_of::<shared_info_x86_64>() - 8usize];
    ["Offset of field: shared_info_x86_64::vcpu_info"]
        [::std::mem::offset_of!(shared_info_x86_64, vcpu_info) - 0usize];
    ["Offset of field: shared_info_x86_64::evtchn_pending"]
        [::std::mem::offset_of!(shared_info_x86_64, evtchn_pending) - 2048usize];
    ["Offset of field: shared_info_x86_64::evtchn_mask"]
        [::std::mem::offset_of!(shared_info_x86_64, evtchn_mask) - 2560usize];
    ["Offset of field: shared_info_x86_64::wc_version"]
        [::std::mem::offset_of!(shared_info_x86_64, wc_version) - 3072usize];
    ["Offset of field: shared_info_x86_64::wc_sec"]
        [::std::mem::offset_of!(shared_info_x86_64, wc_sec) - 3076usize];
    ["Offset of field: shared_info_x86_64::wc_nsec"]
        [::std::mem::offset_of!(shared_info_x86_64, wc_nsec) - 3080usize];
    ["Offset of field: shared_info_x86_64::wc_sec_hi"]
        [::std::mem::offset_of!(shared_info_x86_64, wc_sec_hi) - 3084usize];
    ["Offset of field: shared_info_x86_64::arch"]
        [::std::mem::offset_of!(shared_info_x86_64, arch) - 3088usize];
};
impl Default for shared_info_x86_64 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type shared_info_x86_64_t = shared_info_x86_64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mcinfo_common {
    pub type_: u16,
    pub size: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcinfo_common"][::std::mem::size_of::<mcinfo_common>() - 4usize];
    ["Alignment of mcinfo_common"][::std::mem::align_of::<mcinfo_common>() - 2usize];
    ["Offset of field: mcinfo_common::type_"]
        [::std::mem::offset_of!(mcinfo_common, type_) - 0usize];
    ["Offset of field: mcinfo_common::size"][::std::mem::offset_of!(mcinfo_common, size) - 2usize];
};
pub type xen_mcinfo_common_t = mcinfo_common;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mcinfo_global {
    pub common: xen_mcinfo_common_t,
    pub mc_domid: u16,
    pub mc_vcpuid: u16,
    pub mc_socketid: u32,
    pub mc_coreid: u16,
    pub mc_core_threadid: u16,
    pub mc_apicid: u32,
    pub mc_flags: u32,
    pub mc_gstatus: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcinfo_global"][::std::mem::size_of::<mcinfo_global>() - 32usize];
    ["Alignment of mcinfo_global"][::std::mem::align_of::<mcinfo_global>() - 8usize];
    ["Offset of field: mcinfo_global::common"]
        [::std::mem::offset_of!(mcinfo_global, common) - 0usize];
    ["Offset of field: mcinfo_global::mc_domid"]
        [::std::mem::offset_of!(mcinfo_global, mc_domid) - 4usize];
    ["Offset of field: mcinfo_global::mc_vcpuid"]
        [::std::mem::offset_of!(mcinfo_global, mc_vcpuid) - 6usize];
    ["Offset of field: mcinfo_global::mc_socketid"]
        [::std::mem::offset_of!(mcinfo_global, mc_socketid) - 8usize];
    ["Offset of field: mcinfo_global::mc_coreid"]
        [::std::mem::offset_of!(mcinfo_global, mc_coreid) - 12usize];
    ["Offset of field: mcinfo_global::mc_core_threadid"]
        [::std::mem::offset_of!(mcinfo_global, mc_core_threadid) - 14usize];
    ["Offset of field: mcinfo_global::mc_apicid"]
        [::std::mem::offset_of!(mcinfo_global, mc_apicid) - 16usize];
    ["Offset of field: mcinfo_global::mc_flags"]
        [::std::mem::offset_of!(mcinfo_global, mc_flags) - 20usize];
    ["Offset of field: mcinfo_global::mc_gstatus"]
        [::std::mem::offset_of!(mcinfo_global, mc_gstatus) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mcinfo_bank {
    pub common: xen_mcinfo_common_t,
    pub mc_bank: u16,
    pub mc_domid: u16,
    pub mc_status: u64,
    pub mc_addr: u64,
    pub mc_misc: u64,
    pub mc_ctrl2: u64,
    pub mc_tsc: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcinfo_bank"][::std::mem::size_of::<mcinfo_bank>() - 48usize];
    ["Alignment of mcinfo_bank"][::std::mem::align_of::<mcinfo_bank>() - 8usize];
    ["Offset of field: mcinfo_bank::common"][::std::mem::offset_of!(mcinfo_bank, common) - 0usize];
    ["Offset of field: mcinfo_bank::mc_bank"]
        [::std::mem::offset_of!(mcinfo_bank, mc_bank) - 4usize];
    ["Offset of field: mcinfo_bank::mc_domid"]
        [::std::mem::offset_of!(mcinfo_bank, mc_domid) - 6usize];
    ["Offset of field: mcinfo_bank::mc_status"]
        [::std::mem::offset_of!(mcinfo_bank, mc_status) - 8usize];
    ["Offset of field: mcinfo_bank::mc_addr"]
        [::std::mem::offset_of!(mcinfo_bank, mc_addr) - 16usize];
    ["Offset of field: mcinfo_bank::mc_misc"]
        [::std::mem::offset_of!(mcinfo_bank, mc_misc) - 24usize];
    ["Offset of field: mcinfo_bank::mc_ctrl2"]
        [::std::mem::offset_of!(mcinfo_bank, mc_ctrl2) - 32usize];
    ["Offset of field: mcinfo_bank::mc_tsc"][::std::mem::offset_of!(mcinfo_bank, mc_tsc) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mcinfo_msr {
    pub reg: u64,
    pub value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcinfo_msr"][::std::mem::size_of::<mcinfo_msr>() - 16usize];
    ["Alignment of mcinfo_msr"][::std::mem::align_of::<mcinfo_msr>() - 8usize];
    ["Offset of field: mcinfo_msr::reg"][::std::mem::offset_of!(mcinfo_msr, reg) - 0usize];
    ["Offset of field: mcinfo_msr::value"][::std::mem::offset_of!(mcinfo_msr, value) - 8usize];
};
pub type xen_mcinfo_msr_t = mcinfo_msr;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mcinfo_extended {
    pub common: xen_mcinfo_common_t,
    pub mc_msrs: u32,
    pub mc_msr: [xen_mcinfo_msr_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcinfo_extended"][::std::mem::size_of::<mcinfo_extended>() - 520usize];
    ["Alignment of mcinfo_extended"][::std::mem::align_of::<mcinfo_extended>() - 8usize];
    ["Offset of field: mcinfo_extended::common"]
        [::std::mem::offset_of!(mcinfo_extended, common) - 0usize];
    ["Offset of field: mcinfo_extended::mc_msrs"]
        [::std::mem::offset_of!(mcinfo_extended, mc_msrs) - 4usize];
    ["Offset of field: mcinfo_extended::mc_msr"]
        [::std::mem::offset_of!(mcinfo_extended, mc_msr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct page_offline_action {
    pub mfn: u64,
    pub status: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of page_offline_action"][::std::mem::size_of::<page_offline_action>() - 16usize];
    ["Alignment of page_offline_action"][::std::mem::align_of::<page_offline_action>() - 8usize];
    ["Offset of field: page_offline_action::mfn"]
        [::std::mem::offset_of!(page_offline_action, mfn) - 0usize];
    ["Offset of field: page_offline_action::status"]
        [::std::mem::offset_of!(page_offline_action, status) - 8usize];
};
pub type xen_page_offline_action_t = page_offline_action;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_offline_action {
    pub mc_socketid: u32,
    pub mc_coreid: u16,
    pub mc_core_threadid: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_offline_action"][::std::mem::size_of::<cpu_offline_action>() - 8usize];
    ["Alignment of cpu_offline_action"][::std::mem::align_of::<cpu_offline_action>() - 4usize];
    ["Offset of field: cpu_offline_action::mc_socketid"]
        [::std::mem::offset_of!(cpu_offline_action, mc_socketid) - 0usize];
    ["Offset of field: cpu_offline_action::mc_coreid"]
        [::std::mem::offset_of!(cpu_offline_action, mc_coreid) - 4usize];
    ["Offset of field: cpu_offline_action::mc_core_threadid"]
        [::std::mem::offset_of!(cpu_offline_action, mc_core_threadid) - 6usize];
};
pub type xen_cpu_offline_action_t = cpu_offline_action;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mcinfo_recovery {
    pub common: xen_mcinfo_common_t,
    pub mc_bank: u16,
    pub action_flags: u8,
    pub action_types: u8,
    pub action_info: mcinfo_recovery__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mcinfo_recovery__bindgen_ty_1 {
    pub page_retire: xen_page_offline_action_t,
    pub cpu_offline: xen_cpu_offline_action_t,
    pub pad: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcinfo_recovery__bindgen_ty_1"]
        [::std::mem::size_of::<mcinfo_recovery__bindgen_ty_1>() - 16usize];
    ["Alignment of mcinfo_recovery__bindgen_ty_1"]
        [::std::mem::align_of::<mcinfo_recovery__bindgen_ty_1>() - 8usize];
    ["Offset of field: mcinfo_recovery__bindgen_ty_1::page_retire"]
        [::std::mem::offset_of!(mcinfo_recovery__bindgen_ty_1, page_retire) - 0usize];
    ["Offset of field: mcinfo_recovery__bindgen_ty_1::cpu_offline"]
        [::std::mem::offset_of!(mcinfo_recovery__bindgen_ty_1, cpu_offline) - 0usize];
    ["Offset of field: mcinfo_recovery__bindgen_ty_1::pad"]
        [::std::mem::offset_of!(mcinfo_recovery__bindgen_ty_1, pad) - 0usize];
};
impl Default for mcinfo_recovery__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcinfo_recovery"][::std::mem::size_of::<mcinfo_recovery>() - 24usize];
    ["Alignment of mcinfo_recovery"][::std::mem::align_of::<mcinfo_recovery>() - 8usize];
    ["Offset of field: mcinfo_recovery::common"]
        [::std::mem::offset_of!(mcinfo_recovery, common) - 0usize];
    ["Offset of field: mcinfo_recovery::mc_bank"]
        [::std::mem::offset_of!(mcinfo_recovery, mc_bank) - 4usize];
    ["Offset of field: mcinfo_recovery::action_flags"]
        [::std::mem::offset_of!(mcinfo_recovery, action_flags) - 6usize];
    ["Offset of field: mcinfo_recovery::action_types"]
        [::std::mem::offset_of!(mcinfo_recovery, action_types) - 7usize];
    ["Offset of field: mcinfo_recovery::action_info"]
        [::std::mem::offset_of!(mcinfo_recovery, action_info) - 8usize];
};
impl Default for mcinfo_recovery {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mc_info {
    pub mi_nentries: u32,
    pub flags: u32,
    pub mi_data: [u64; 95usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mc_info"][::std::mem::size_of::<mc_info>() - 768usize];
    ["Alignment of mc_info"][::std::mem::align_of::<mc_info>() - 8usize];
    ["Offset of field: mc_info::mi_nentries"]
        [::std::mem::offset_of!(mc_info, mi_nentries) - 0usize];
    ["Offset of field: mc_info::flags"][::std::mem::offset_of!(mc_info, flags) - 4usize];
    ["Offset of field: mc_info::mi_data"][::std::mem::offset_of!(mc_info, mi_data) - 8usize];
};
impl Default for mc_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mc_info_t = mc_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_mc_info_t {
    pub p: *mut mc_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_mc_info_t"]
        [::std::mem::size_of::<__guest_handle_mc_info_t>() - 8usize];
    ["Alignment of __guest_handle_mc_info_t"]
        [::std::mem::align_of::<__guest_handle_mc_info_t>() - 8usize];
    ["Offset of field: __guest_handle_mc_info_t::p"]
        [::std::mem::offset_of!(__guest_handle_mc_info_t, p) - 0usize];
};
impl Default for __guest_handle_mc_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_mc_info_t {
    pub p: *const mc_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_mc_info_t"]
        [::std::mem::size_of::<__guest_handle_const_mc_info_t>() - 8usize];
    ["Alignment of __guest_handle_const_mc_info_t"]
        [::std::mem::align_of::<__guest_handle_const_mc_info_t>() - 8usize];
    ["Offset of field: __guest_handle_const_mc_info_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_mc_info_t, p) - 0usize];
};
impl Default for __guest_handle_const_mc_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcinfo_logical_cpu {
    pub mc_cpunr: u32,
    pub mc_chipid: u32,
    pub mc_coreid: u16,
    pub mc_threadid: u16,
    pub mc_apicid: u32,
    pub mc_clusterid: u32,
    pub mc_ncores: u32,
    pub mc_ncores_active: u32,
    pub mc_nthreads: u32,
    pub mc_cpuid_level: i32,
    pub mc_family: u32,
    pub mc_vendor: u32,
    pub mc_model: u32,
    pub mc_step: u32,
    pub mc_vendorid: [::std::os::raw::c_char; 16usize],
    pub mc_brandid: [::std::os::raw::c_char; 64usize],
    pub mc_cpu_caps: [u32; 7usize],
    pub mc_cache_size: u32,
    pub mc_cache_alignment: u32,
    pub mc_nmsrvals: i32,
    pub mc_msrvalues: [xen_mcinfo_msr_t; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mcinfo_logical_cpu"][::std::mem::size_of::<mcinfo_logical_cpu>() - 304usize];
    ["Alignment of mcinfo_logical_cpu"][::std::mem::align_of::<mcinfo_logical_cpu>() - 8usize];
    ["Offset of field: mcinfo_logical_cpu::mc_cpunr"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_cpunr) - 0usize];
    ["Offset of field: mcinfo_logical_cpu::mc_chipid"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_chipid) - 4usize];
    ["Offset of field: mcinfo_logical_cpu::mc_coreid"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_coreid) - 8usize];
    ["Offset of field: mcinfo_logical_cpu::mc_threadid"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_threadid) - 10usize];
    ["Offset of field: mcinfo_logical_cpu::mc_apicid"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_apicid) - 12usize];
    ["Offset of field: mcinfo_logical_cpu::mc_clusterid"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_clusterid) - 16usize];
    ["Offset of field: mcinfo_logical_cpu::mc_ncores"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_ncores) - 20usize];
    ["Offset of field: mcinfo_logical_cpu::mc_ncores_active"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_ncores_active) - 24usize];
    ["Offset of field: mcinfo_logical_cpu::mc_nthreads"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_nthreads) - 28usize];
    ["Offset of field: mcinfo_logical_cpu::mc_cpuid_level"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_cpuid_level) - 32usize];
    ["Offset of field: mcinfo_logical_cpu::mc_family"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_family) - 36usize];
    ["Offset of field: mcinfo_logical_cpu::mc_vendor"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_vendor) - 40usize];
    ["Offset of field: mcinfo_logical_cpu::mc_model"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_model) - 44usize];
    ["Offset of field: mcinfo_logical_cpu::mc_step"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_step) - 48usize];
    ["Offset of field: mcinfo_logical_cpu::mc_vendorid"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_vendorid) - 52usize];
    ["Offset of field: mcinfo_logical_cpu::mc_brandid"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_brandid) - 68usize];
    ["Offset of field: mcinfo_logical_cpu::mc_cpu_caps"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_cpu_caps) - 132usize];
    ["Offset of field: mcinfo_logical_cpu::mc_cache_size"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_cache_size) - 160usize];
    ["Offset of field: mcinfo_logical_cpu::mc_cache_alignment"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_cache_alignment) - 164usize];
    ["Offset of field: mcinfo_logical_cpu::mc_nmsrvals"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_nmsrvals) - 168usize];
    ["Offset of field: mcinfo_logical_cpu::mc_msrvalues"]
        [::std::mem::offset_of!(mcinfo_logical_cpu, mc_msrvalues) - 176usize];
};
impl Default for mcinfo_logical_cpu {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_mc_logical_cpu_t = mcinfo_logical_cpu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mc_logical_cpu_t {
    pub p: *mut xen_mc_logical_cpu_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_mc_logical_cpu_t"]
        [::std::mem::size_of::<__guest_handle_xen_mc_logical_cpu_t>() - 8usize];
    ["Alignment of __guest_handle_xen_mc_logical_cpu_t"]
        [::std::mem::align_of::<__guest_handle_xen_mc_logical_cpu_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_mc_logical_cpu_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_mc_logical_cpu_t, p) - 0usize];
};
impl Default for __guest_handle_xen_mc_logical_cpu_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mc_logical_cpu_t {
    pub p: *const xen_mc_logical_cpu_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_mc_logical_cpu_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_mc_logical_cpu_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_mc_logical_cpu_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_mc_logical_cpu_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_mc_logical_cpu_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_mc_logical_cpu_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_mc_logical_cpu_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mc_fetch {
    pub flags: u32,
    pub _pad0: u32,
    pub fetch_id: u64,
    pub data: __guest_handle_mc_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mc_fetch"][::std::mem::size_of::<xen_mc_fetch>() - 24usize];
    ["Alignment of xen_mc_fetch"][::std::mem::align_of::<xen_mc_fetch>() - 8usize];
    ["Offset of field: xen_mc_fetch::flags"][::std::mem::offset_of!(xen_mc_fetch, flags) - 0usize];
    ["Offset of field: xen_mc_fetch::_pad0"][::std::mem::offset_of!(xen_mc_fetch, _pad0) - 4usize];
    ["Offset of field: xen_mc_fetch::fetch_id"]
        [::std::mem::offset_of!(xen_mc_fetch, fetch_id) - 8usize];
    ["Offset of field: xen_mc_fetch::data"][::std::mem::offset_of!(xen_mc_fetch, data) - 16usize];
};
impl Default for xen_mc_fetch {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_mc_fetch_t = xen_mc_fetch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mc_fetch_t {
    pub p: *mut xen_mc_fetch_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_mc_fetch_t"]
        [::std::mem::size_of::<__guest_handle_xen_mc_fetch_t>() - 8usize];
    ["Alignment of __guest_handle_xen_mc_fetch_t"]
        [::std::mem::align_of::<__guest_handle_xen_mc_fetch_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_mc_fetch_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_mc_fetch_t, p) - 0usize];
};
impl Default for __guest_handle_xen_mc_fetch_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mc_fetch_t {
    pub p: *const xen_mc_fetch_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_mc_fetch_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_mc_fetch_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_mc_fetch_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_mc_fetch_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_mc_fetch_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_mc_fetch_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_mc_fetch_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_mc_notifydomain {
    pub mc_domid: u16,
    pub mc_vcpuid: u16,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mc_notifydomain"][::std::mem::size_of::<xen_mc_notifydomain>() - 8usize];
    ["Alignment of xen_mc_notifydomain"][::std::mem::align_of::<xen_mc_notifydomain>() - 4usize];
    ["Offset of field: xen_mc_notifydomain::mc_domid"]
        [::std::mem::offset_of!(xen_mc_notifydomain, mc_domid) - 0usize];
    ["Offset of field: xen_mc_notifydomain::mc_vcpuid"]
        [::std::mem::offset_of!(xen_mc_notifydomain, mc_vcpuid) - 2usize];
    ["Offset of field: xen_mc_notifydomain::flags"]
        [::std::mem::offset_of!(xen_mc_notifydomain, flags) - 4usize];
};
pub type xen_mc_notifydomain_t = xen_mc_notifydomain;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mc_notifydomain_t {
    pub p: *mut xen_mc_notifydomain_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_mc_notifydomain_t"]
        [::std::mem::size_of::<__guest_handle_xen_mc_notifydomain_t>() - 8usize];
    ["Alignment of __guest_handle_xen_mc_notifydomain_t"]
        [::std::mem::align_of::<__guest_handle_xen_mc_notifydomain_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_mc_notifydomain_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_mc_notifydomain_t, p) - 0usize];
};
impl Default for __guest_handle_xen_mc_notifydomain_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mc_notifydomain_t {
    pub p: *const xen_mc_notifydomain_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_mc_notifydomain_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_mc_notifydomain_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_mc_notifydomain_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_mc_notifydomain_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_mc_notifydomain_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_mc_notifydomain_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_mc_notifydomain_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mc_physcpuinfo {
    pub ncpus: u32,
    pub _pad0: u32,
    pub info: __guest_handle_xen_mc_logical_cpu_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mc_physcpuinfo"][::std::mem::size_of::<xen_mc_physcpuinfo>() - 16usize];
    ["Alignment of xen_mc_physcpuinfo"][::std::mem::align_of::<xen_mc_physcpuinfo>() - 8usize];
    ["Offset of field: xen_mc_physcpuinfo::ncpus"]
        [::std::mem::offset_of!(xen_mc_physcpuinfo, ncpus) - 0usize];
    ["Offset of field: xen_mc_physcpuinfo::_pad0"]
        [::std::mem::offset_of!(xen_mc_physcpuinfo, _pad0) - 4usize];
    ["Offset of field: xen_mc_physcpuinfo::info"]
        [::std::mem::offset_of!(xen_mc_physcpuinfo, info) - 8usize];
};
impl Default for xen_mc_physcpuinfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_mc_physcpuinfo_t = xen_mc_physcpuinfo;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_mc_msrinject {
    pub mcinj_cpunr: u32,
    pub mcinj_flags: u32,
    pub mcinj_count: u32,
    pub mcinj_domid: domid_t,
    pub _pad0: u16,
    pub mcinj_msr: [xen_mcinfo_msr_t; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mc_msrinject"][::std::mem::size_of::<xen_mc_msrinject>() - 144usize];
    ["Alignment of xen_mc_msrinject"][::std::mem::align_of::<xen_mc_msrinject>() - 8usize];
    ["Offset of field: xen_mc_msrinject::mcinj_cpunr"]
        [::std::mem::offset_of!(xen_mc_msrinject, mcinj_cpunr) - 0usize];
    ["Offset of field: xen_mc_msrinject::mcinj_flags"]
        [::std::mem::offset_of!(xen_mc_msrinject, mcinj_flags) - 4usize];
    ["Offset of field: xen_mc_msrinject::mcinj_count"]
        [::std::mem::offset_of!(xen_mc_msrinject, mcinj_count) - 8usize];
    ["Offset of field: xen_mc_msrinject::mcinj_domid"]
        [::std::mem::offset_of!(xen_mc_msrinject, mcinj_domid) - 12usize];
    ["Offset of field: xen_mc_msrinject::_pad0"]
        [::std::mem::offset_of!(xen_mc_msrinject, _pad0) - 14usize];
    ["Offset of field: xen_mc_msrinject::mcinj_msr"]
        [::std::mem::offset_of!(xen_mc_msrinject, mcinj_msr) - 16usize];
};
pub type xen_mc_msrinject_t = xen_mc_msrinject;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xen_mc_mceinject {
    pub mceinj_cpunr: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mc_mceinject"][::std::mem::size_of::<xen_mc_mceinject>() - 4usize];
    ["Alignment of xen_mc_mceinject"][::std::mem::align_of::<xen_mc_mceinject>() - 4usize];
    ["Offset of field: xen_mc_mceinject::mceinj_cpunr"]
        [::std::mem::offset_of!(xen_mc_mceinject, mceinj_cpunr) - 0usize];
};
pub type xen_mc_mceinject_t = xen_mc_mceinject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mc_inject_v2 {
    pub flags: u32,
    pub cpumap: xenctl_bitmap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mc_inject_v2"][::std::mem::size_of::<xen_mc_inject_v2>() - 24usize];
    ["Alignment of xen_mc_inject_v2"][::std::mem::align_of::<xen_mc_inject_v2>() - 8usize];
    ["Offset of field: xen_mc_inject_v2::flags"]
        [::std::mem::offset_of!(xen_mc_inject_v2, flags) - 0usize];
    ["Offset of field: xen_mc_inject_v2::cpumap"]
        [::std::mem::offset_of!(xen_mc_inject_v2, cpumap) - 8usize];
};
impl Default for xen_mc_inject_v2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_mc_inject_v2_t = xen_mc_inject_v2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mc {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_mc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mc__bindgen_ty_1 {
    pub mc_fetch: xen_mc_fetch_t,
    pub mc_notifydomain: xen_mc_notifydomain_t,
    pub mc_physcpuinfo: xen_mc_physcpuinfo_t,
    pub mc_msrinject: xen_mc_msrinject_t,
    pub mc_mceinject: xen_mc_mceinject_t,
    pub mc_inject_v2: xen_mc_inject_v2_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mc__bindgen_ty_1"][::std::mem::size_of::<xen_mc__bindgen_ty_1>() - 144usize];
    ["Alignment of xen_mc__bindgen_ty_1"][::std::mem::align_of::<xen_mc__bindgen_ty_1>() - 8usize];
    ["Offset of field: xen_mc__bindgen_ty_1::mc_fetch"]
        [::std::mem::offset_of!(xen_mc__bindgen_ty_1, mc_fetch) - 0usize];
    ["Offset of field: xen_mc__bindgen_ty_1::mc_notifydomain"]
        [::std::mem::offset_of!(xen_mc__bindgen_ty_1, mc_notifydomain) - 0usize];
    ["Offset of field: xen_mc__bindgen_ty_1::mc_physcpuinfo"]
        [::std::mem::offset_of!(xen_mc__bindgen_ty_1, mc_physcpuinfo) - 0usize];
    ["Offset of field: xen_mc__bindgen_ty_1::mc_msrinject"]
        [::std::mem::offset_of!(xen_mc__bindgen_ty_1, mc_msrinject) - 0usize];
    ["Offset of field: xen_mc__bindgen_ty_1::mc_mceinject"]
        [::std::mem::offset_of!(xen_mc__bindgen_ty_1, mc_mceinject) - 0usize];
    ["Offset of field: xen_mc__bindgen_ty_1::mc_inject_v2"]
        [::std::mem::offset_of!(xen_mc__bindgen_ty_1, mc_inject_v2) - 0usize];
};
impl Default for xen_mc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xen_mc"][::std::mem::size_of::<xen_mc>() - 152usize];
    ["Alignment of xen_mc"][::std::mem::align_of::<xen_mc>() - 8usize];
    ["Offset of field: xen_mc::cmd"][::std::mem::offset_of!(xen_mc, cmd) - 0usize];
    ["Offset of field: xen_mc::interface_version"]
        [::std::mem::offset_of!(xen_mc, interface_version) - 4usize];
    ["Offset of field: xen_mc::u"][::std::mem::offset_of!(xen_mc, u) - 8usize];
};
impl Default for xen_mc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xen_mc_t = xen_mc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_xen_mc_t {
    pub p: *mut xen_mc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_xen_mc_t"][::std::mem::size_of::<__guest_handle_xen_mc_t>() - 8usize];
    ["Alignment of __guest_handle_xen_mc_t"]
        [::std::mem::align_of::<__guest_handle_xen_mc_t>() - 8usize];
    ["Offset of field: __guest_handle_xen_mc_t::p"]
        [::std::mem::offset_of!(__guest_handle_xen_mc_t, p) - 0usize];
};
impl Default for __guest_handle_xen_mc_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __guest_handle_const_xen_mc_t {
    pub p: *const xen_mc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __guest_handle_const_xen_mc_t"]
        [::std::mem::size_of::<__guest_handle_const_xen_mc_t>() - 8usize];
    ["Alignment of __guest_handle_const_xen_mc_t"]
        [::std::mem::align_of::<__guest_handle_const_xen_mc_t>() - 8usize];
    ["Offset of field: __guest_handle_const_xen_mc_t::p"]
        [::std::mem::offset_of!(__guest_handle_const_xen_mc_t, p) - 0usize];
};
impl Default for __guest_handle_const_xen_mc_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_interface_core {
    _unused: [u8; 0],
}
pub type xc_interface = xc_interface_core;
pub const xc_error_code_XC_ERROR_NONE: xc_error_code = 0;
pub const xc_error_code_XC_INTERNAL_ERROR: xc_error_code = 1;
pub const xc_error_code_XC_INVALID_KERNEL: xc_error_code = 2;
pub const xc_error_code_XC_INVALID_PARAM: xc_error_code = 3;
pub const xc_error_code_XC_OUT_OF_MEMORY: xc_error_code = 4;
pub type xc_error_code = ::std::os::raw::c_uint;
extern "C" {
    pub fn xc_interface_open(
        logger: *mut xentoollog_logger,
        dombuild_logger: *mut xentoollog_logger,
        open_flags: ::std::os::raw::c_uint,
    ) -> *mut xc_interface;
}
pub const xc_open_flags_XC_OPENFLAG_DUMMY: xc_open_flags = 1;
pub const xc_open_flags_XC_OPENFLAG_NON_REENTRANT: xc_open_flags = 2;
pub type xc_open_flags = ::std::os::raw::c_uint;
extern "C" {
    pub fn xc_interface_close(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xencall_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xc_interface_xcall_handle(xch: *mut xc_interface) -> *mut xencall_handle;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenforeignmemory_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xc_interface_fmem_handle(xch: *mut xc_interface) -> *mut xenforeignmemory_handle;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xendevicemodel_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xc_interface_dmod_handle(xch: *mut xc_interface) -> *mut xendevicemodel_handle;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_hypercall_buffer {
    pub hbuf: *mut ::std::os::raw::c_void,
    pub param_shadow: *mut xc_hypercall_buffer,
    pub dir: ::std::os::raw::c_int,
    pub ubuf: *mut ::std::os::raw::c_void,
    pub sz: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_hypercall_buffer"][::std::mem::size_of::<xc_hypercall_buffer>() - 40usize];
    ["Alignment of xc_hypercall_buffer"][::std::mem::align_of::<xc_hypercall_buffer>() - 8usize];
    ["Offset of field: xc_hypercall_buffer::hbuf"]
        [::std::mem::offset_of!(xc_hypercall_buffer, hbuf) - 0usize];
    ["Offset of field: xc_hypercall_buffer::param_shadow"]
        [::std::mem::offset_of!(xc_hypercall_buffer, param_shadow) - 8usize];
    ["Offset of field: xc_hypercall_buffer::dir"]
        [::std::mem::offset_of!(xc_hypercall_buffer, dir) - 16usize];
    ["Offset of field: xc_hypercall_buffer::ubuf"]
        [::std::mem::offset_of!(xc_hypercall_buffer, ubuf) - 24usize];
    ["Offset of field: xc_hypercall_buffer::sz"]
        [::std::mem::offset_of!(xc_hypercall_buffer, sz) - 32usize];
};
impl Default for xc_hypercall_buffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xc_hypercall_buffer_t = xc_hypercall_buffer;
extern "C" {
    pub static mut xc__hypercall_buffer_HYPERCALL_BUFFER_NULL: xc_hypercall_buffer_t;
}
extern "C" {
    pub fn xc__hypercall_buffer_alloc(
        xch: *mut xc_interface,
        b: *mut xc_hypercall_buffer_t,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc__hypercall_buffer_free(xch: *mut xc_interface, b: *mut xc_hypercall_buffer_t);
}
extern "C" {
    pub fn xc__hypercall_buffer_alloc_pages(
        xch: *mut xc_interface,
        b: *mut xc_hypercall_buffer_t,
        nr_pages: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc__hypercall_buffer_free_pages(
        xch: *mut xc_interface,
        b: *mut xc_hypercall_buffer_t,
        nr_pages: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_hypercall_buffer_array {
    _unused: [u8; 0],
}
pub type xc_hypercall_buffer_array_t = xc_hypercall_buffer_array;
extern "C" {
    pub fn xc_hypercall_buffer_array_create(
        xch: *mut xc_interface,
        n: ::std::os::raw::c_uint,
    ) -> *mut xc_hypercall_buffer_array_t;
}
extern "C" {
    pub fn xc__hypercall_buffer_array_alloc(
        xch: *mut xc_interface,
        array: *mut xc_hypercall_buffer_array_t,
        index: ::std::os::raw::c_uint,
        hbuf: *mut xc_hypercall_buffer_t,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc__hypercall_buffer_array_get(
        xch: *mut xc_interface,
        array: *mut xc_hypercall_buffer_array_t,
        index: ::std::os::raw::c_uint,
        hbuf: *mut xc_hypercall_buffer_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc_hypercall_buffer_array_destroy(
        xc: *mut xc_interface,
        array: *mut xc_hypercall_buffer_array_t,
    );
}
pub type xc_cpumap_t = *mut u8;
extern "C" {
    pub fn xc_get_max_cpus(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_online_cpus(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_cpumap_size(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpumap_alloc(xch: *mut xc_interface) -> xc_cpumap_t;
}
extern "C" {
    pub fn xc_cpumap_clearcpu(cpu: ::std::os::raw::c_int, map: xc_cpumap_t);
}
extern "C" {
    pub fn xc_cpumap_setcpu(cpu: ::std::os::raw::c_int, map: xc_cpumap_t);
}
extern "C" {
    pub fn xc_cpumap_testcpu(cpu: ::std::os::raw::c_int, map: xc_cpumap_t)
        -> ::std::os::raw::c_int;
}
pub type xc_nodemap_t = *mut u8;
extern "C" {
    pub fn xc_get_max_nodes(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_nodemap_size(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_nodemap_alloc(xch: *mut xc_interface) -> xc_nodemap_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xc_core_header {
    pub xch_magic: ::std::os::raw::c_uint,
    pub xch_nr_vcpus: ::std::os::raw::c_uint,
    pub xch_nr_pages: ::std::os::raw::c_uint,
    pub xch_ctxt_offset: ::std::os::raw::c_uint,
    pub xch_index_offset: ::std::os::raw::c_uint,
    pub xch_pages_offset: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_core_header"][::std::mem::size_of::<xc_core_header>() - 24usize];
    ["Alignment of xc_core_header"][::std::mem::align_of::<xc_core_header>() - 4usize];
    ["Offset of field: xc_core_header::xch_magic"]
        [::std::mem::offset_of!(xc_core_header, xch_magic) - 0usize];
    ["Offset of field: xc_core_header::xch_nr_vcpus"]
        [::std::mem::offset_of!(xc_core_header, xch_nr_vcpus) - 4usize];
    ["Offset of field: xc_core_header::xch_nr_pages"]
        [::std::mem::offset_of!(xc_core_header, xch_nr_pages) - 8usize];
    ["Offset of field: xc_core_header::xch_ctxt_offset"]
        [::std::mem::offset_of!(xc_core_header, xch_ctxt_offset) - 12usize];
    ["Offset of field: xc_core_header::xch_index_offset"]
        [::std::mem::offset_of!(xc_core_header, xch_index_offset) - 16usize];
    ["Offset of field: xc_core_header::xch_pages_offset"]
        [::std::mem::offset_of!(xc_core_header, xch_pages_offset) - 20usize];
};
pub type xc_core_header_t = xc_core_header;
pub type xc_domaininfo_t = xen_domctl_getdomaininfo_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_context_any_t {
    pub x64: vcpu_guest_context_x86_64_t,
    pub x32: vcpu_guest_context_x86_32_t,
    pub c: vcpu_guest_context_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vcpu_guest_context_any_t"]
        [::std::mem::size_of::<vcpu_guest_context_any_t>() - 5168usize];
    ["Alignment of vcpu_guest_context_any_t"]
        [::std::mem::align_of::<vcpu_guest_context_any_t>() - 8usize];
    ["Offset of field: vcpu_guest_context_any_t::x64"]
        [::std::mem::offset_of!(vcpu_guest_context_any_t, x64) - 0usize];
    ["Offset of field: vcpu_guest_context_any_t::x32"]
        [::std::mem::offset_of!(vcpu_guest_context_any_t, x32) - 0usize];
    ["Offset of field: vcpu_guest_context_any_t::c"]
        [::std::mem::offset_of!(vcpu_guest_context_any_t, c) - 0usize];
};
impl Default for vcpu_guest_context_any_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union shared_info_any_t {
    pub x64: shared_info_x86_64_t,
    pub x32: shared_info_x86_32_t,
    pub s: shared_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of shared_info_any_t"][::std::mem::size_of::<shared_info_any_t>() - 3136usize];
    ["Alignment of shared_info_any_t"][::std::mem::align_of::<shared_info_any_t>() - 8usize];
    ["Offset of field: shared_info_any_t::x64"]
        [::std::mem::offset_of!(shared_info_any_t, x64) - 0usize];
    ["Offset of field: shared_info_any_t::x32"]
        [::std::mem::offset_of!(shared_info_any_t, x32) - 0usize];
    ["Offset of field: shared_info_any_t::s"]
        [::std::mem::offset_of!(shared_info_any_t, s) - 0usize];
};
impl Default for shared_info_any_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union start_info_any_t {
    pub x64: start_info_x86_64_t,
    pub x32: start_info_x86_32_t,
    pub s: start_info_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of start_info_any_t"][::std::mem::size_of::<start_info_any_t>() - 1168usize];
    ["Alignment of start_info_any_t"][::std::mem::align_of::<start_info_any_t>() - 8usize];
    ["Offset of field: start_info_any_t::x64"]
        [::std::mem::offset_of!(start_info_any_t, x64) - 0usize];
    ["Offset of field: start_info_any_t::x32"]
        [::std::mem::offset_of!(start_info_any_t, x32) - 0usize];
    ["Offset of field: start_info_any_t::s"][::std::mem::offset_of!(start_info_any_t, s) - 0usize];
};
impl Default for start_info_any_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_vcpu_extstate {
    pub xfeature_mask: u64,
    pub size: u64,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_vcpu_extstate"][::std::mem::size_of::<xc_vcpu_extstate>() - 24usize];
    ["Alignment of xc_vcpu_extstate"][::std::mem::align_of::<xc_vcpu_extstate>() - 8usize];
    ["Offset of field: xc_vcpu_extstate::xfeature_mask"]
        [::std::mem::offset_of!(xc_vcpu_extstate, xfeature_mask) - 0usize];
    ["Offset of field: xc_vcpu_extstate::size"]
        [::std::mem::offset_of!(xc_vcpu_extstate, size) - 8usize];
    ["Offset of field: xc_vcpu_extstate::buffer"]
        [::std::mem::offset_of!(xc_vcpu_extstate, buffer) - 16usize];
};
impl Default for xc_vcpu_extstate {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xc_vcpu_extstate_t = xc_vcpu_extstate;
extern "C" {
    pub fn xc_domain_create(
        xch: *mut xc_interface,
        pdomid: *mut u32,
        config: *mut xen_domctl_createdomain,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_dumpcore(
        xch: *mut xc_interface,
        domid: u32,
        corename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type dumpcore_rtn_t = ::std::option::Option<
    unsafe extern "C" fn(
        xch: *mut xc_interface,
        arg: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn xc_domain_dumpcore_via_callback(
        xch: *mut xc_interface,
        domid: u32,
        arg: *mut ::std::os::raw::c_void,
        dump_rtn: dumpcore_rtn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_max_vcpus(
        xch: *mut xc_interface,
        domid: u32,
        max: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_pause(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_unpause(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_destroy(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_shutdown(
        xch: *mut xc_interface,
        domid: u32,
        reason: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_watchdog(xch: *mut xc_interface, id: u32, timeout: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_node_setaffinity(
        xch: *mut xc_interface,
        domind: u32,
        nodemap: xc_nodemap_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_node_getaffinity(
        xch: *mut xc_interface,
        domind: u32,
        nodemap: xc_nodemap_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vcpu_setaffinity(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: ::std::os::raw::c_int,
        cpumap_hard_inout: xc_cpumap_t,
        cpumap_soft_inout: xc_cpumap_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vcpu_getaffinity(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: ::std::os::raw::c_int,
        cpumap_hard: xc_cpumap_t,
        cpumap_soft: xc_cpumap_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_guest_width(
        xch: *mut xc_interface,
        domid: u32,
        guest_width: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_getinfo_single(
        xch: *mut xc_interface,
        domid: u32,
        info: *mut xc_domaininfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vcpu_setcontext(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        ctxt: *mut vcpu_guest_context_any_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_getinfolist(
        xch: *mut xc_interface,
        first_domain: u32,
        max_domains: ::std::os::raw::c_uint,
        info: *mut xc_domaininfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_broken_page_p2m(
        xch: *mut xc_interface,
        domid: u32,
        pfn: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_hvm_getcontext(
        xch: *mut xc_interface,
        domid: u32,
        ctxt_buf: *mut u8,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_hvm_getcontext_partial(
        xch: *mut xc_interface,
        domid: u32,
        typecode: u16,
        instance: u16,
        ctxt_buf: *mut ::std::os::raw::c_void,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_hvm_setcontext(
        xch: *mut xc_interface,
        domid: u32,
        hvm_ctxt: *mut u8,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_native_protocol(
        xch: *mut xc_interface,
        domid: u32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_vcpu_getcontext(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        ctxt: *mut vcpu_guest_context_any_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_dom_vuart_init(
        xch: *mut xc_interface,
        type_: u32,
        domid: u32,
        console_domid: u32,
        gfn: xen_pfn_t,
        evtchn: *mut evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vcpu_get_extstate(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        extstate: *mut xc_vcpu_extstate_t,
    ) -> ::std::os::raw::c_int;
}
pub type xc_vcpuinfo_t = xen_domctl_getvcpuinfo;
extern "C" {
    pub fn xc_vcpu_getinfo(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        info: *mut xc_vcpuinfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_cpu_usage(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn xc_domain_sethandle(
        xch: *mut xc_interface,
        domid: u32,
        handle: *mut u8,
    ) -> ::std::os::raw::c_int;
}
pub type xc_shadow_op_stats_t = xen_domctl_shadow_op_stats;
extern "C" {
    pub fn xc_shadow_control(
        xch: *mut xc_interface,
        domid: u32,
        sop: ::std::os::raw::c_uint,
        mb: *mut ::std::os::raw::c_uint,
        mode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_logdirty_control(
        xch: *mut xc_interface,
        domid: u32,
        sop: ::std::os::raw::c_uint,
        dirty_bitmap: *mut xc_hypercall_buffer_t,
        pages: ::std::os::raw::c_ulong,
        mode: ::std::os::raw::c_uint,
        stats: *mut xc_shadow_op_stats_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn xc_get_paging_mempool_size(
        xch: *mut xc_interface,
        domid: u32,
        size: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_paging_mempool_size(
        xch: *mut xc_interface,
        domid: u32,
        size: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit_domain_set(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_credit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit_domain_get(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_credit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit_params_set(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_credit_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit_params_get(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_credit_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit2_params_set(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_credit2_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit2_params_get(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_credit2_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit2_domain_set(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_credit2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit2_domain_get(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_credit2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_rtds_domain_set(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_rtds,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_rtds_domain_get(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_rtds,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_rtds_vcpu_set(
        xch: *mut xc_interface,
        domid: u32,
        vcpus: *mut xen_domctl_schedparam_vcpu,
        num_vcpus: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_rtds_vcpu_get(
        xch: *mut xc_interface,
        domid: u32,
        vcpus: *mut xen_domctl_schedparam_vcpu,
        num_vcpus: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_arinc653_schedule_set(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_arinc653_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_arinc653_schedule_get(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_arinc653_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_send_trigger(
        xch: *mut xc_interface,
        domid: u32,
        trigger: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_setdebugging(
        xch: *mut xc_interface,
        domid: u32,
        enable: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_p2m_audit(
        xch: *mut xc_interface,
        domid: u32,
        orphans: *mut u64,
        m2p_bad: *mut u64,
        p2m_bad: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_access_required(
        xch: *mut xc_interface,
        domid: u32,
        required: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_virq_handler(
        xch: *mut xc_interface,
        domid: u32,
        virq: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_cpupoolinfo {
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub n_dom: u32,
    pub cpumap: xc_cpumap_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_cpupoolinfo"][::std::mem::size_of::<xc_cpupoolinfo>() - 24usize];
    ["Alignment of xc_cpupoolinfo"][::std::mem::align_of::<xc_cpupoolinfo>() - 8usize];
    ["Offset of field: xc_cpupoolinfo::cpupool_id"]
        [::std::mem::offset_of!(xc_cpupoolinfo, cpupool_id) - 0usize];
    ["Offset of field: xc_cpupoolinfo::sched_id"]
        [::std::mem::offset_of!(xc_cpupoolinfo, sched_id) - 4usize];
    ["Offset of field: xc_cpupoolinfo::n_dom"]
        [::std::mem::offset_of!(xc_cpupoolinfo, n_dom) - 8usize];
    ["Offset of field: xc_cpupoolinfo::cpumap"]
        [::std::mem::offset_of!(xc_cpupoolinfo, cpumap) - 16usize];
};
impl Default for xc_cpupoolinfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xc_cpupoolinfo_t = xc_cpupoolinfo;
extern "C" {
    pub fn xc_cpupool_create(
        xch: *mut xc_interface,
        ppoolid: *mut u32,
        sched_id: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_destroy(xch: *mut xc_interface, poolid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_getinfo(xch: *mut xc_interface, poolid: u32) -> *mut xc_cpupoolinfo_t;
}
extern "C" {
    pub fn xc_cpupool_infofree(xch: *mut xc_interface, info: *mut xc_cpupoolinfo_t);
}
extern "C" {
    pub fn xc_cpupool_addcpu(
        xch: *mut xc_interface,
        poolid: u32,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_removecpu(
        xch: *mut xc_interface,
        poolid: u32,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_movedomain(
        xch: *mut xc_interface,
        poolid: u32,
        domid: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_freeinfo(xch: *mut xc_interface) -> xc_cpumap_t;
}
pub type xc_evtchn_port_or_error_t = ::std::os::raw::c_int;
extern "C" {
    pub fn xc_evtchn_alloc_unbound(
        xch: *mut xc_interface,
        dom: u32,
        remote_dom: u32,
    ) -> xc_evtchn_port_or_error_t;
}
extern "C" {
    pub fn xc_evtchn_reset(xch: *mut xc_interface, dom: u32) -> ::std::os::raw::c_int;
}
pub type xc_evtchn_status_t = evtchn_status;
extern "C" {
    pub fn xc_evtchn_status(
        xch: *mut xc_interface,
        status: *mut xc_evtchn_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_physdev_pci_access_modify(
        xch: *mut xc_interface,
        domid: u32,
        bus: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        func: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_readconsolering(
        xch: *mut xc_interface,
        buffer: *mut ::std::os::raw::c_char,
        pnr_chars: *mut ::std::os::raw::c_uint,
        clear: ::std::os::raw::c_int,
        incremental: ::std::os::raw::c_int,
        pindex: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_send_debug_keys(
        xch: *mut xc_interface,
        keys: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type xc_physinfo_t = xen_sysctl_physinfo;
pub type xc_cputopo_t = xen_sysctl_cputopo;
pub type xc_numainfo_t = xen_sysctl_numainfo;
pub type xc_meminfo_t = xen_sysctl_meminfo;
pub type xc_pcitopoinfo_t = xen_sysctl_pcitopoinfo;
pub type xc_cpu_to_node_t = u32;
pub type xc_cpu_to_socket_t = u32;
pub type xc_cpu_to_core_t = u32;
pub type xc_node_to_memsize_t = u64;
pub type xc_node_to_memfree_t = u64;
pub type xc_node_to_node_dist_t = u32;
extern "C" {
    pub fn xc_physinfo(xch: *mut xc_interface, info: *mut xc_physinfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cputopoinfo(
        xch: *mut xc_interface,
        max_cpus: *mut ::std::os::raw::c_uint,
        cputopo: *mut xc_cputopo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_microcode_update(
        xch: *mut xc_interface,
        buf: *const ::std::os::raw::c_void,
        len: usize,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_cpu_version(
        xch: *mut xc_interface,
        cpu_ver: *mut xenpf_pcpu_version,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_ucode_revision(
        xch: *mut xc_interface,
        ucode_rev: *mut xenpf_ucode_revision,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_numainfo(
        xch: *mut xc_interface,
        max_nodes: *mut ::std::os::raw::c_uint,
        meminfo: *mut xc_meminfo_t,
        distance: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pcitopoinfo(
        xch: *mut xc_interface,
        num_devs: ::std::os::raw::c_uint,
        devs: *mut physdev_pci_device_t,
        nodes: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_id(
        xch: *mut xc_interface,
        sched_id: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_machphys_mfn_list(
        xch: *mut xc_interface,
        max_extents: ::std::os::raw::c_ulong,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
pub type xc_cpuinfo_t = xen_sysctl_cpuinfo;
extern "C" {
    pub fn xc_getcpuinfo(
        xch: *mut xc_interface,
        max_cpus: ::std::os::raw::c_int,
        info: *mut xc_cpuinfo_t,
        nr_cpus: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_setmaxmem(
        xch: *mut xc_interface,
        domid: u32,
        max_memkb: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_memmap_limit(
        xch: *mut xc_interface,
        domid: u32,
        map_limitkb: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_setvnuma(
        xch: *mut xc_interface,
        domid: u32,
        nr_vnodes: u32,
        nr_regions: u32,
        nr_vcpus: u32,
        vmemrange: *mut xen_vmemrange_t,
        vdistance: *mut ::std::os::raw::c_uint,
        vcpu_to_vnode: *mut ::std::os::raw::c_uint,
        vnode_to_pnode: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_getvnuma(
        xch: *mut xc_interface,
        domid: u32,
        nr_vnodes: *mut u32,
        nr_vmemranges: *mut u32,
        nr_vcpus: *mut u32,
        vmemrange: *mut xen_vmemrange_t,
        vdistance: *mut ::std::os::raw::c_uint,
        vcpu_to_vnode: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_soft_reset(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct e820entry {
    pub addr: u64,
    pub size: u64,
    pub type_: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of e820entry"][::std::mem::size_of::<e820entry>() - 20usize];
    ["Alignment of e820entry"][::std::mem::align_of::<e820entry>() - 1usize];
    ["Offset of field: e820entry::addr"][::std::mem::offset_of!(e820entry, addr) - 0usize];
    ["Offset of field: e820entry::size"][::std::mem::offset_of!(e820entry, size) - 8usize];
    ["Offset of field: e820entry::type_"][::std::mem::offset_of!(e820entry, type_) - 16usize];
};
extern "C" {
    pub fn xc_domain_set_memory_map(
        xch: *mut xc_interface,
        domid: u32,
        entries: *mut e820entry,
        nr_entries: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_machine_memory_map(
        xch: *mut xc_interface,
        entries: *mut e820entry,
        max_entries: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_reserved_device_memory_map(
        xch: *mut xc_interface,
        flags: u32,
        seg: u16,
        bus: u8,
        devfn: u8,
        entries: *mut xen_reserved_device_memory,
        max_entries: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_time_offset(
        xch: *mut xc_interface,
        domid: u32,
        time_offset_seconds: i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_tsc_info(
        xch: *mut xc_interface,
        domid: u32,
        tsc_mode: u32,
        elapsed_nsec: u64,
        gtsc_khz: u32,
        incarnation: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_tsc_info(
        xch: *mut xc_interface,
        domid: u32,
        tsc_mode: *mut u32,
        elapsed_nsec: *mut u64,
        gtsc_khz: *mut u32,
        incarnation: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_maximum_gpfn(
        xch: *mut xc_interface,
        domid: u32,
        gpfns: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_nr_gpfns(
        xch: *mut xc_interface,
        domid: u32,
        gpfns: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_increase_reservation(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        mem_flags: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_increase_reservation_exact(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        mem_flags: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_decrease_reservation(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_decrease_reservation_exact(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_add_to_physmap(
        xch: *mut xc_interface,
        domid: u32,
        space: ::std::os::raw::c_uint,
        idx: ::std::os::raw::c_ulong,
        gpfn: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_add_to_physmap_batch(
        xch: *mut xc_interface,
        domid: u32,
        foreign_domid: u32,
        space: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        idxs: *mut xen_ulong_t,
        gfpns: *mut xen_pfn_t,
        errs: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_remove_from_physmap(
        xch: *mut xc_interface,
        domid: u32,
        gpfn: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_populate_physmap(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        mem_flags: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_populate_physmap_exact(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        mem_flags: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_claim_pages(
        xch: *mut xc_interface,
        domid: u32,
        nr_pages: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_memory_exchange_pages(
        xch: *mut xc_interface,
        domid: u32,
        nr_in_extents: ::std::os::raw::c_ulong,
        in_order: ::std::os::raw::c_uint,
        in_extents: *mut xen_pfn_t,
        nr_out_extents: ::std::os::raw::c_ulong,
        out_order: ::std::os::raw::c_uint,
        out_extents: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_pod_target(
        xch: *mut xc_interface,
        domid: u32,
        target_pages: u64,
        tot_pages: *mut u64,
        pod_cache_pages: *mut u64,
        pod_entries: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_pod_target(
        xch: *mut xc_interface,
        domid: u32,
        tot_pages: *mut u64,
        pod_cache_pages: *mut u64,
        pod_entries: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_ioport_permission(
        xch: *mut xc_interface,
        domid: u32,
        first_port: u32,
        nr_ports: u32,
        allow_access: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_irq_permission(
        xch: *mut xc_interface,
        domid: u32,
        pirq: u32,
        allow_access: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_gsi_permission(
        xch: *mut xc_interface,
        domid: u32,
        gsi: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_iomem_permission(
        xch: *mut xc_interface,
        domid: u32,
        first_mfn: ::std::os::raw::c_ulong,
        nr_mfns: ::std::os::raw::c_ulong,
        allow_access: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_make_page_below_4G(
        xch: *mut xc_interface,
        domid: u32,
        mfn: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
pub type xc_perfc_desc_t = xen_sysctl_perfc_desc_t;
pub type xc_perfc_val_t = xen_sysctl_perfc_val_t;
extern "C" {
    pub fn xc_perfc_reset(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_perfc_query_number(
        xch: *mut xc_interface,
        nbr_desc: *mut ::std::os::raw::c_int,
        nbr_val: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_perfc_query(
        xch: *mut xc_interface,
        desc: *mut xc_hypercall_buffer_t,
        val: *mut xc_hypercall_buffer_t,
    ) -> ::std::os::raw::c_int;
}
pub type xc_lockprof_data_t = xen_sysctl_lockprof_data_t;
extern "C" {
    pub fn xc_lockprof_reset(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_lockprof_query_number(
        xch: *mut xc_interface,
        n_elems: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_lockprof_query(
        xch: *mut xc_interface,
        n_elems: *mut u32,
        time: *mut u64,
        data: *mut xc_hypercall_buffer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memalign(
        xch: *mut xc_interface,
        alignment: usize,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc_translate_foreign_address(
        xch: *mut xc_interface,
        dom: u32,
        vcpu: ::std::os::raw::c_int,
        virt: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn xc_copy_to_domain_page(
        xch: *mut xc_interface,
        domid: u32,
        dst_pfn: ::std::os::raw::c_ulong,
        src_page: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_clear_domain_pages(
        xch: *mut xc_interface,
        domid: u32,
        dst_pfn: ::std::os::raw::c_ulong,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mmuext_op(
        xch: *mut xc_interface,
        op: *mut mmuext_op,
        nr_ops: ::std::os::raw::c_uint,
        dom: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_maximum_ram_page(
        xch: *mut xc_interface,
        max_mfn: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_tot_pages(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xc_availheap(
        xch: *mut xc_interface,
        min_width: ::std::os::raw::c_int,
        max_width: ::std::os::raw::c_int,
        node: ::std::os::raw::c_int,
        bytes: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_enable(
        xch: *mut xc_interface,
        pages: ::std::os::raw::c_ulong,
        mfn: *mut ::std::os::raw::c_ulong,
        size: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_disable(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_set_size(
        xch: *mut xc_interface,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_get_size(
        xch: *mut xc_interface,
        size: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_set_cpu_mask(xch: *mut xc_interface, mask: xc_cpumap_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_set_evt_mask(xch: *mut xc_interface, mask: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_enable(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_disable(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_reset_and_enable(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_output_position(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        pos: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_get_option(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        key: u64,
        value: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_set_option(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        key: u64,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domctl(xch: *mut xc_interface, domctl: *mut xen_domctl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sysctl(xch: *mut xc_interface, sysctl: *mut xen_sysctl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memory_op(
        xch: *mut xc_interface,
        cmd: ::std::os::raw::c_uint,
        arg: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xc_version(
        xch: *mut xc_interface,
        cmd: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_xenver_extraversion(xch: *mut xc_interface) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_xenver_capabilities(xch: *mut xc_interface) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_xenver_changeset(xch: *mut xc_interface) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_xenver_commandline(xch: *mut xc_interface) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_xenver_buildid(xch: *mut xc_interface) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_flask_op(xch: *mut xc_interface, op: *mut xen_flask_op_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_subscribe_for_suspend(
        xch: *mut xc_interface,
        domid: u32,
        port: evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_gnttab_op(
        xch: *mut xc_interface,
        cmd: ::std::os::raw::c_int,
        op: *mut ::std::os::raw::c_void,
        op_size: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_gnttab_query_size(
        xch: *mut xc_interface,
        query: *mut gnttab_query_size,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_gnttab_get_version(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_gnttab_map_table_v1(
        xch: *mut xc_interface,
        domid: u32,
        gnt_num: *mut ::std::os::raw::c_int,
    ) -> *mut grant_entry_v1_t;
}
extern "C" {
    pub fn xc_gnttab_map_table_v2(
        xch: *mut xc_interface,
        domid: u32,
        gnt_num: *mut ::std::os::raw::c_int,
    ) -> *mut grant_entry_v2_t;
}
extern "C" {
    pub fn xc_physdev_map_pirq(
        xch: *mut xc_interface,
        domid: u32,
        index: ::std::os::raw::c_int,
        pirq: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_physdev_map_pirq_msi(
        xch: *mut xc_interface,
        domid: u32,
        index: ::std::os::raw::c_int,
        pirq: *mut ::std::os::raw::c_int,
        devfn: ::std::os::raw::c_int,
        bus: ::std::os::raw::c_int,
        entry_nr: ::std::os::raw::c_int,
        table_base: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_physdev_map_pirq_gsi(
        xch: *mut xc_interface,
        domid: u32,
        gsi: ::std::os::raw::c_int,
        pirq: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_physdev_unmap_pirq(
        xch: *mut xc_interface,
        domid: u32,
        pirq: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pcidev_get_gsi(xch: *mut xc_interface, sbdf: u32) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_error {
    pub code: xc_error_code,
    pub message: [::std::os::raw::c_char; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_error"][::std::mem::size_of::<xc_error>() - 1028usize];
    ["Alignment of xc_error"][::std::mem::align_of::<xc_error>() - 4usize];
    ["Offset of field: xc_error::code"][::std::mem::offset_of!(xc_error, code) - 0usize];
    ["Offset of field: xc_error::message"][::std::mem::offset_of!(xc_error, message) - 4usize];
};
impl Default for xc_error {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xc_error_code_to_desc(code: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_strerror(
        xch: *mut xc_interface,
        errcode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_get_last_error(handle: *mut xc_interface) -> *const xc_error;
}
extern "C" {
    pub fn xc_clear_last_error(xch: *mut xc_interface);
}
extern "C" {
    pub fn xc_hvm_param_set(
        handle: *mut xc_interface,
        dom: u32,
        param: u32,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_hvm_param_get(
        handle: *mut xc_interface,
        dom: u32,
        param: u32,
        value: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_hvm_param(
        handle: *mut xc_interface,
        dom: u32,
        param: ::std::os::raw::c_int,
        value: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_hvm_param(
        handle: *mut xc_interface,
        dom: u32,
        param: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_assign_device(
        xch: *mut xc_interface,
        domid: u32,
        machine_sbdf: u32,
        flag: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_device_group(
        xch: *mut xc_interface,
        domid: u32,
        machine_sbdf: u32,
        max_sdevs: u32,
        num_sdevs: *mut u32,
        sdev_array: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_test_assign_device(
        xch: *mut xc_interface,
        domid: u32,
        machine_sbdf: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_deassign_device(
        xch: *mut xc_interface,
        domid: u32,
        machine_sbdf: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_assign_dt_device(
        xch: *mut xc_interface,
        domid: u32,
        path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_test_assign_dt_device(
        xch: *mut xc_interface,
        domid: u32,
        path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_deassign_dt_device(
        xch: *mut xc_interface,
        domid: u32,
        path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_memory_mapping(
        xch: *mut xc_interface,
        domid: u32,
        first_gfn: ::std::os::raw::c_ulong,
        first_mfn: ::std::os::raw::c_ulong,
        nr_mfns: ::std::os::raw::c_ulong,
        add_mapping: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_ioport_mapping(
        xch: *mut xc_interface,
        domid: u32,
        first_gport: u32,
        first_mport: u32,
        nr_ports: u32,
        add_mapping: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_update_msi_irq(
        xch: *mut xc_interface,
        domid: u32,
        gvec: u32,
        pirq: u32,
        gflags: u32,
        gtable: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_unbind_msi_irq(
        xch: *mut xc_interface,
        domid: u32,
        gvec: u32,
        pirq: u32,
        gflags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_bind_pt_irq(
        xch: *mut xc_interface,
        domid: u32,
        machine_irq: u8,
        irq_type: u8,
        bus: u8,
        device: u8,
        intx: u8,
        isa_irq: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_unbind_pt_irq(
        xch: *mut xc_interface,
        domid: u32,
        machine_irq: u8,
        irq_type: u8,
        bus: u8,
        device: u8,
        intx: u8,
        isa_irq: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_bind_pt_pci_irq(
        xch: *mut xc_interface,
        domid: u32,
        machine_irq: u8,
        bus: u8,
        device: u8,
        intx: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_bind_pt_isa_irq(
        xch: *mut xc_interface,
        domid: u32,
        machine_irq: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_bind_pt_spi_irq(
        xch: *mut xc_interface,
        domid: u32,
        vspi: u16,
        spi: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_unbind_pt_spi_irq(
        xch: *mut xc_interface,
        domid: u32,
        vspi: u16,
        spi: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_target(
        xch: *mut xc_interface,
        domid: u32,
        target: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_debug_control(
        xch: *mut xc_interface,
        domid: u32,
        sop: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xc_xend_cpuid {
    pub __bindgen_anon_1: xc_xend_cpuid__bindgen_ty_1,
    pub policy: [*mut ::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xc_xend_cpuid__bindgen_ty_1 {
    pub __bindgen_anon_1: xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1,
    pub input: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1 {
    pub leaf: u32,
    pub subleaf: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1::leaf"]
        [::std::mem::offset_of!(xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1, leaf) - 0usize];
    ["Offset of field: xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1::subleaf"]
        [::std::mem::offset_of!(xc_xend_cpuid__bindgen_ty_1__bindgen_ty_1, subleaf) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_xend_cpuid__bindgen_ty_1"]
        [::std::mem::size_of::<xc_xend_cpuid__bindgen_ty_1>() - 8usize];
    ["Alignment of xc_xend_cpuid__bindgen_ty_1"]
        [::std::mem::align_of::<xc_xend_cpuid__bindgen_ty_1>() - 4usize];
    ["Offset of field: xc_xend_cpuid__bindgen_ty_1::input"]
        [::std::mem::offset_of!(xc_xend_cpuid__bindgen_ty_1, input) - 0usize];
};
impl Default for xc_xend_cpuid__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_xend_cpuid"][::std::mem::size_of::<xc_xend_cpuid>() - 40usize];
    ["Alignment of xc_xend_cpuid"][::std::mem::align_of::<xc_xend_cpuid>() - 8usize];
    ["Offset of field: xc_xend_cpuid::policy"]
        [::std::mem::offset_of!(xc_xend_cpuid, policy) - 8usize];
};
impl Default for xc_xend_cpuid {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_msr {
    pub index: u32,
    pub policy: [::std::os::raw::c_char; 65usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_msr"][::std::mem::size_of::<xc_msr>() - 72usize];
    ["Alignment of xc_msr"][::std::mem::align_of::<xc_msr>() - 4usize];
    ["Offset of field: xc_msr::index"][::std::mem::offset_of!(xc_msr, index) - 0usize];
    ["Offset of field: xc_msr::policy"][::std::mem::offset_of!(xc_msr, policy) - 4usize];
};
impl Default for xc_msr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xc_cpuid_apply_policy(
        xch: *mut xc_interface,
        domid: u32,
        restore: bool,
        featureset: *const u32,
        nr_features: ::std::os::raw::c_uint,
        pae: bool,
        itsc: bool,
        nested_virt: bool,
        xend: *const xc_xend_cpuid,
        msr: *const xc_msr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mca_op(xch: *mut xc_interface, mc: *mut xen_mc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mca_op_inject_v2(
        xch: *mut xc_interface,
        flags: ::std::os::raw::c_uint,
        cpumap: xc_cpumap_t,
        nr_cpus: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xc_px_val {
    pub freq: u64,
    pub residency: u64,
    pub count: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_px_val"][::std::mem::size_of::<xc_px_val>() - 24usize];
    ["Alignment of xc_px_val"][::std::mem::align_of::<xc_px_val>() - 8usize];
    ["Offset of field: xc_px_val::freq"][::std::mem::offset_of!(xc_px_val, freq) - 0usize];
    ["Offset of field: xc_px_val::residency"]
        [::std::mem::offset_of!(xc_px_val, residency) - 8usize];
    ["Offset of field: xc_px_val::count"][::std::mem::offset_of!(xc_px_val, count) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_px_stat {
    pub total: u8,
    pub usable: u8,
    pub last: u8,
    pub cur: u8,
    pub trans_pt: *mut u64,
    pub pt: *mut xc_px_val,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_px_stat"][::std::mem::size_of::<xc_px_stat>() - 24usize];
    ["Alignment of xc_px_stat"][::std::mem::align_of::<xc_px_stat>() - 8usize];
    ["Offset of field: xc_px_stat::total"][::std::mem::offset_of!(xc_px_stat, total) - 0usize];
    ["Offset of field: xc_px_stat::usable"][::std::mem::offset_of!(xc_px_stat, usable) - 1usize];
    ["Offset of field: xc_px_stat::last"][::std::mem::offset_of!(xc_px_stat, last) - 2usize];
    ["Offset of field: xc_px_stat::cur"][::std::mem::offset_of!(xc_px_stat, cur) - 3usize];
    ["Offset of field: xc_px_stat::trans_pt"]
        [::std::mem::offset_of!(xc_px_stat, trans_pt) - 8usize];
    ["Offset of field: xc_px_stat::pt"][::std::mem::offset_of!(xc_px_stat, pt) - 16usize];
};
impl Default for xc_px_stat {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xc_pm_get_max_px(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        max_px: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pm_get_pxstat(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        pxpt: *mut xc_px_stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pm_reset_pxstat(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_cx_stat {
    pub nr: u32,
    pub last: u32,
    pub idle_time: u64,
    pub triggers: *mut u64,
    pub residencies: *mut u64,
    pub nr_pc: u32,
    pub nr_cc: u32,
    pub pc: *mut u64,
    pub cc: *mut u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_cx_stat"][::std::mem::size_of::<xc_cx_stat>() - 56usize];
    ["Alignment of xc_cx_stat"][::std::mem::align_of::<xc_cx_stat>() - 8usize];
    ["Offset of field: xc_cx_stat::nr"][::std::mem::offset_of!(xc_cx_stat, nr) - 0usize];
    ["Offset of field: xc_cx_stat::last"][::std::mem::offset_of!(xc_cx_stat, last) - 4usize];
    ["Offset of field: xc_cx_stat::idle_time"]
        [::std::mem::offset_of!(xc_cx_stat, idle_time) - 8usize];
    ["Offset of field: xc_cx_stat::triggers"]
        [::std::mem::offset_of!(xc_cx_stat, triggers) - 16usize];
    ["Offset of field: xc_cx_stat::residencies"]
        [::std::mem::offset_of!(xc_cx_stat, residencies) - 24usize];
    ["Offset of field: xc_cx_stat::nr_pc"][::std::mem::offset_of!(xc_cx_stat, nr_pc) - 32usize];
    ["Offset of field: xc_cx_stat::nr_cc"][::std::mem::offset_of!(xc_cx_stat, nr_cc) - 36usize];
    ["Offset of field: xc_cx_stat::pc"][::std::mem::offset_of!(xc_cx_stat, pc) - 40usize];
    ["Offset of field: xc_cx_stat::cc"][::std::mem::offset_of!(xc_cx_stat, cc) - 48usize];
};
impl Default for xc_cx_stat {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xc_cx_stat_t = xc_cx_stat;
extern "C" {
    pub fn xc_pm_get_max_cx(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        max_cx: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pm_get_cxstat(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        cxpt: *mut xc_cx_stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pm_reset_cxstat(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpu_online(
        xch: *mut xc_interface,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpu_offline(
        xch: *mut xc_interface,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_smt_enable(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_smt_disable(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
pub type xc_userspace_t = xen_userspace;
pub type xc_ondemand_t = xen_ondemand;
pub type xc_cppc_para_t = xen_cppc_para;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xc_get_cpufreq_para {
    pub cpu_num: u32,
    pub freq_num: u32,
    pub gov_num: u32,
    pub affected_cpus: *mut u32,
    pub scaling_available_frequencies: *mut u32,
    pub scaling_available_governors: *mut ::std::os::raw::c_char,
    pub scaling_driver: [::std::os::raw::c_char; 16usize],
    pub cpuinfo_cur_freq: u32,
    pub cpuinfo_max_freq: u32,
    pub cpuinfo_min_freq: u32,
    pub u: xc_get_cpufreq_para__bindgen_ty_1,
    pub turbo_enabled: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xc_get_cpufreq_para__bindgen_ty_1 {
    pub s: xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
    pub cppc_para: xc_cppc_para_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1 {
    pub scaling_cur_freq: u32,
    pub scaling_governor: [::std::os::raw::c_char; 16usize],
    pub scaling_max_freq: u32,
    pub scaling_min_freq: u32,
    pub u: xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub userspace: xc_userspace_t,
    pub ondemand: xc_ondemand_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 16usize];
    ["Alignment of xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::userspace"][::std::mem::offset_of!(
        xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        userspace
    )
        - 0usize];
    ["Offset of field: xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::ondemand"][::std::mem::offset_of!(
        xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        ondemand
    )
        - 0usize];
};
impl Default for xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1>() - 44usize];
    ["Alignment of xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::scaling_cur_freq"][::std::mem::offset_of!(
        xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
        scaling_cur_freq
    )
        - 0usize];
    ["Offset of field: xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::scaling_governor"][::std::mem::offset_of!(
        xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
        scaling_governor
    )
        - 4usize];
    ["Offset of field: xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::scaling_max_freq"][::std::mem::offset_of!(
        xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
        scaling_max_freq
    )
        - 20usize];
    ["Offset of field: xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::scaling_min_freq"][::std::mem::offset_of!(
        xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1,
        scaling_min_freq
    )
        - 24usize];
    ["Offset of field: xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1::u"]
        [::std::mem::offset_of!(xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1, u) - 28usize];
};
impl Default for xc_get_cpufreq_para__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_get_cpufreq_para__bindgen_ty_1"]
        [::std::mem::size_of::<xc_get_cpufreq_para__bindgen_ty_1>() - 44usize];
    ["Alignment of xc_get_cpufreq_para__bindgen_ty_1"]
        [::std::mem::align_of::<xc_get_cpufreq_para__bindgen_ty_1>() - 4usize];
    ["Offset of field: xc_get_cpufreq_para__bindgen_ty_1::s"]
        [::std::mem::offset_of!(xc_get_cpufreq_para__bindgen_ty_1, s) - 0usize];
    ["Offset of field: xc_get_cpufreq_para__bindgen_ty_1::cppc_para"]
        [::std::mem::offset_of!(xc_get_cpufreq_para__bindgen_ty_1, cppc_para) - 0usize];
};
impl Default for xc_get_cpufreq_para__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_get_cpufreq_para"][::std::mem::size_of::<xc_get_cpufreq_para>() - 120usize];
    ["Alignment of xc_get_cpufreq_para"][::std::mem::align_of::<xc_get_cpufreq_para>() - 8usize];
    ["Offset of field: xc_get_cpufreq_para::cpu_num"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, cpu_num) - 0usize];
    ["Offset of field: xc_get_cpufreq_para::freq_num"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, freq_num) - 4usize];
    ["Offset of field: xc_get_cpufreq_para::gov_num"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, gov_num) - 8usize];
    ["Offset of field: xc_get_cpufreq_para::affected_cpus"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, affected_cpus) - 16usize];
    ["Offset of field: xc_get_cpufreq_para::scaling_available_frequencies"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, scaling_available_frequencies) - 24usize];
    ["Offset of field: xc_get_cpufreq_para::scaling_available_governors"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, scaling_available_governors) - 32usize];
    ["Offset of field: xc_get_cpufreq_para::scaling_driver"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, scaling_driver) - 40usize];
    ["Offset of field: xc_get_cpufreq_para::cpuinfo_cur_freq"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, cpuinfo_cur_freq) - 56usize];
    ["Offset of field: xc_get_cpufreq_para::cpuinfo_max_freq"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, cpuinfo_max_freq) - 60usize];
    ["Offset of field: xc_get_cpufreq_para::cpuinfo_min_freq"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, cpuinfo_min_freq) - 64usize];
    ["Offset of field: xc_get_cpufreq_para::u"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, u) - 68usize];
    ["Offset of field: xc_get_cpufreq_para::turbo_enabled"]
        [::std::mem::offset_of!(xc_get_cpufreq_para, turbo_enabled) - 112usize];
};
impl Default for xc_get_cpufreq_para {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xc_set_cppc_para_t = xen_set_cppc_para;
extern "C" {
    pub fn xc_get_cpufreq_para(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        user_para: *mut xc_get_cpufreq_para,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_cpufreq_gov(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        govname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_cpufreq_para(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        ctrl_type: ::std::os::raw::c_int,
        ctrl_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_cpufreq_cppc(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        set_cppc: *mut xc_set_cppc_para_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_cpufreq_avgfreq(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        avg_freq: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_sched_opt_smt(xch: *mut xc_interface, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_cpuidle_max_cstate(
        xch: *mut xc_interface,
        value: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_cpuidle_max_cstate(xch: *mut xc_interface, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_cpuidle_max_csubstate(
        xch: *mut xc_interface,
        value: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_cpuidle_max_csubstate(
        xch: *mut xc_interface,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_enable_turbo(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_disable_turbo(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_get_domain_state(
        handle: *mut xc_interface,
        dom: u32,
        state: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_domain_state(
        handle: *mut xc_interface,
        dom: u32,
        state: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_vcpu_enable_notify(
        handle: *mut xc_interface,
        domid: u32,
        vcpuid: u32,
        gfn: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_vcpu_disable_notify(
        handle: *mut xc_interface,
        domid: u32,
        vcpuid: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_create_view(
        handle: *mut xc_interface,
        domid: u32,
        default_access: xenmem_access_t,
        view_id: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_destroy_view(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_switch_to_view(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_suppress_ve(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        gfn: xen_pfn_t,
        sve: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_supress_ve_multi(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        first_gfn: xen_pfn_t,
        last_gfn: xen_pfn_t,
        sve: bool,
        error_gfn: *mut xen_pfn_t,
        error_code: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_get_suppress_ve(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        gfn: xen_pfn_t,
        sve: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_mem_access(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        gfn: xen_pfn_t,
        access: xenmem_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_mem_access_multi(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        access: *mut u8,
        gfns: *mut u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_get_mem_access(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        gfn: xen_pfn_t,
        access: *mut xenmem_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_change_gfn(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        old_gfn: xen_pfn_t,
        new_gfn: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_get_vcpu_p2m_idx(
        handle: *mut xc_interface,
        domid: u32,
        vcpuid: u32,
        p2midx: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_visibility(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        visible: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_enable(
        xch: *mut xc_interface,
        domain_id: u32,
        port: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_disable(xch: *mut xc_interface, domain_id: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_resume(xch: *mut xc_interface, domain_id: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_nominate(
        xch: *mut xc_interface,
        domain_id: u32,
        gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_evict(
        xch: *mut xc_interface,
        domain_id: u32,
        gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_prep(
        xch: *mut xc_interface,
        domain_id: u32,
        gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_load(
        xch: *mut xc_interface,
        domain_id: u32,
        gfn: u64,
        buffer: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_mem_access(
        xch: *mut xc_interface,
        domain_id: u32,
        access: xenmem_access_t,
        first_pfn: u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_mem_access_multi(
        xch: *mut xc_interface,
        domain_id: u32,
        access: *mut u8,
        pages: *mut u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_mem_access(
        xch: *mut xc_interface,
        domain_id: u32,
        pfn: u64,
        access: *mut xenmem_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vm_event_get_version(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_enable(
        xch: *mut xc_interface,
        domain_id: u32,
        port: *mut u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc_monitor_disable(xch: *mut xc_interface, domain_id: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_resume(xch: *mut xc_interface, domain_id: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_get_capabilities(
        xch: *mut xc_interface,
        domain_id: u32,
        capabilities: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_write_ctrlreg(
        xch: *mut xc_interface,
        domain_id: u32,
        index: u16,
        enable: bool,
        sync: bool,
        bitmask: u64,
        onchangeonly: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_mov_to_msr(
        xch: *mut xc_interface,
        domain_id: u32,
        msr: u32,
        enable: bool,
        onchangeonly: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_singlestep(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_software_breakpoint(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_descriptor_access(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_guest_request(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
        sync: bool,
        allow_userspace: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_inguest_pagefault(
        xch: *mut xc_interface,
        domain_id: u32,
        disable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_debug_exceptions(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
        sync: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_cpuid(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_privileged_call(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_emul_unimplemented(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_vmexit(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
        sync: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_io(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_emulate_each_rep(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_control(
        xch: *mut xc_interface,
        domid: u32,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_ring_enable(
        xch: *mut xc_interface,
        domid: u32,
        port: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_ring_disable(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_domain_resume(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_nominate_gfn(
        xch: *mut xc_interface,
        domid: u32,
        gfn: ::std::os::raw::c_ulong,
        handle: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_nominate_gref(
        xch: *mut xc_interface,
        domid: u32,
        gref: grant_ref_t,
        handle: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_share_gfns(
        xch: *mut xc_interface,
        source_domain: u32,
        source_gfn: ::std::os::raw::c_ulong,
        source_handle: u64,
        client_domain: u32,
        client_gfn: ::std::os::raw::c_ulong,
        client_handle: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_share_grefs(
        xch: *mut xc_interface,
        source_domain: u32,
        source_gref: grant_ref_t,
        source_handle: u64,
        client_domain: u32,
        client_gref: grant_ref_t,
        client_handle: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_add_to_physmap(
        xch: *mut xc_interface,
        source_domain: u32,
        source_gfn: ::std::os::raw::c_ulong,
        source_handle: u64,
        client_domain: u32,
        client_gfn: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_range_share(
        xch: *mut xc_interface,
        source_domain: u32,
        client_domain: u32,
        first_gfn: u64,
        last_gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_fork(
        xch: *mut xc_interface,
        source_domain: u32,
        client_domain: u32,
        allow_with_iommu: bool,
        block_interrupts: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_fork_reset(
        xch: *mut xc_interface,
        forked_domain: u32,
        reset_state: bool,
        reset_memory: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_debug_gfn(
        xch: *mut xc_interface,
        domid: u32,
        gfn: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_debug_gref(
        xch: *mut xc_interface,
        domid: u32,
        gref: grant_ref_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_audit(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sharing_freed_pages(xch: *mut xc_interface) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xc_sharing_used_frames(xch: *mut xc_interface) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xc_flask_load(
        xc_handle: *mut xc_interface,
        buf: *mut ::std::os::raw::c_char,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_context_to_sid(
        xc_handle: *mut xc_interface,
        buf: *mut ::std::os::raw::c_char,
        size: u32,
        sid: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_sid_to_context(
        xc_handle: *mut xc_interface,
        sid: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_getenforce(xc_handle: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_setenforce(
        xc_handle: *mut xc_interface,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_getbool_byid(
        xc_handle: *mut xc_interface,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        size: u32,
        curr: *mut ::std::os::raw::c_int,
        pend: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_getbool_byname(
        xc_handle: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        curr: *mut ::std::os::raw::c_int,
        pend: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_setbool(
        xc_handle: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
        commit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_add_pirq(
        xc_handle: *mut xc_interface,
        pirq: ::std::os::raw::c_uint,
        scontext: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_add_ioport(
        xc_handle: *mut xc_interface,
        low: ::std::os::raw::c_ulong,
        high: ::std::os::raw::c_ulong,
        scontext: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_add_iomem(
        xc_handle: *mut xc_interface,
        low: ::std::os::raw::c_ulong,
        high: ::std::os::raw::c_ulong,
        scontext: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_add_device(
        xc_handle: *mut xc_interface,
        device: ::std::os::raw::c_ulong,
        scontext: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_del_pirq(
        xc_handle: *mut xc_interface,
        pirq: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_del_ioport(
        xc_handle: *mut xc_interface,
        low: ::std::os::raw::c_ulong,
        high: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_del_iomem(
        xc_handle: *mut xc_interface,
        low: ::std::os::raw::c_ulong,
        high: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_del_device(
        xc_handle: *mut xc_interface,
        device: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_access(
        xc_handle: *mut xc_interface,
        scon: *const ::std::os::raw::c_char,
        tcon: *const ::std::os::raw::c_char,
        tclass: u16,
        req: u32,
        allowed: *mut u32,
        decided: *mut u32,
        auditallow: *mut u32,
        auditdeny: *mut u32,
        seqno: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_avc_cachestats(
        xc_handle: *mut xc_interface,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_policyvers(xc_handle: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_avc_hashstats(
        xc_handle: *mut xc_interface,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_getavc_threshold(xc_handle: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_setavc_threshold(
        xc_handle: *mut xc_interface,
        threshold: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_relabel_domain(
        xch: *mut xc_interface,
        domid: u32,
        sid: u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_binary {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xc_elf_set_logfile(
        xch: *mut xc_interface,
        elf: *mut elf_binary,
        verbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xc_kexec_exec(
        xch: *mut xc_interface,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_kexec_get_range(
        xch: *mut xc_interface,
        range: ::std::os::raw::c_int,
        nr: ::std::os::raw::c_int,
        size: *mut u64,
        start: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_kexec_load(
        xch: *mut xc_interface,
        type_: u8,
        arch: u16,
        entry_maddr: u64,
        nr_segments: u32,
        segments: *mut xen_kexec_segment_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_kexec_unload(
        xch: *mut xc_interface,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_kexec_status(
        xch: *mut xc_interface,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type xc_resource_entry_t = xenpf_resource_entry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_resource_op {
    pub result: u64,
    pub cpu: u32,
    pub nr_entries: u32,
    pub entries: *mut xc_resource_entry_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_resource_op"][::std::mem::size_of::<xc_resource_op>() - 24usize];
    ["Alignment of xc_resource_op"][::std::mem::align_of::<xc_resource_op>() - 8usize];
    ["Offset of field: xc_resource_op::result"]
        [::std::mem::offset_of!(xc_resource_op, result) - 0usize];
    ["Offset of field: xc_resource_op::cpu"][::std::mem::offset_of!(xc_resource_op, cpu) - 8usize];
    ["Offset of field: xc_resource_op::nr_entries"]
        [::std::mem::offset_of!(xc_resource_op, nr_entries) - 12usize];
    ["Offset of field: xc_resource_op::entries"]
        [::std::mem::offset_of!(xc_resource_op, entries) - 16usize];
};
impl Default for xc_resource_op {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type xc_resource_op_t = xc_resource_op;
extern "C" {
    pub fn xc_resource_op(
        xch: *mut xc_interface,
        nr_ops: u32,
        ops: *mut xc_resource_op_t,
    ) -> ::std::os::raw::c_int;
}
pub const xc_psr_cmt_type_XC_PSR_CMT_L3_OCCUPANCY: xc_psr_cmt_type = 0;
pub const xc_psr_cmt_type_XC_PSR_CMT_TOTAL_MEM_COUNT: xc_psr_cmt_type = 1;
pub const xc_psr_cmt_type_XC_PSR_CMT_LOCAL_MEM_COUNT: xc_psr_cmt_type = 2;
pub type xc_psr_cmt_type = ::std::os::raw::c_uint;
pub const xc_psr_type_XC_PSR_CAT_L3_CBM: xc_psr_type = 1;
pub const xc_psr_type_XC_PSR_CAT_L3_CBM_CODE: xc_psr_type = 2;
pub const xc_psr_type_XC_PSR_CAT_L3_CBM_DATA: xc_psr_type = 3;
pub const xc_psr_type_XC_PSR_CAT_L2_CBM: xc_psr_type = 4;
pub const xc_psr_type_XC_PSR_MBA_THRTL: xc_psr_type = 5;
pub type xc_psr_type = ::std::os::raw::c_uint;
pub const xc_psr_feat_type_XC_PSR_CAT_L3: xc_psr_feat_type = 0;
pub const xc_psr_feat_type_XC_PSR_CAT_L2: xc_psr_feat_type = 1;
pub const xc_psr_feat_type_XC_PSR_MBA: xc_psr_feat_type = 2;
pub type xc_psr_feat_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union xc_psr_hw_info {
    pub cat: xc_psr_hw_info__bindgen_ty_1,
    pub mba: xc_psr_hw_info__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xc_psr_hw_info__bindgen_ty_1 {
    pub cos_max: u32,
    pub cbm_len: u32,
    pub cdp_enabled: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_psr_hw_info__bindgen_ty_1"]
        [::std::mem::size_of::<xc_psr_hw_info__bindgen_ty_1>() - 12usize];
    ["Alignment of xc_psr_hw_info__bindgen_ty_1"]
        [::std::mem::align_of::<xc_psr_hw_info__bindgen_ty_1>() - 4usize];
    ["Offset of field: xc_psr_hw_info__bindgen_ty_1::cos_max"]
        [::std::mem::offset_of!(xc_psr_hw_info__bindgen_ty_1, cos_max) - 0usize];
    ["Offset of field: xc_psr_hw_info__bindgen_ty_1::cbm_len"]
        [::std::mem::offset_of!(xc_psr_hw_info__bindgen_ty_1, cbm_len) - 4usize];
    ["Offset of field: xc_psr_hw_info__bindgen_ty_1::cdp_enabled"]
        [::std::mem::offset_of!(xc_psr_hw_info__bindgen_ty_1, cdp_enabled) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xc_psr_hw_info__bindgen_ty_2 {
    pub cos_max: u32,
    pub thrtl_max: u32,
    pub linear: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_psr_hw_info__bindgen_ty_2"]
        [::std::mem::size_of::<xc_psr_hw_info__bindgen_ty_2>() - 12usize];
    ["Alignment of xc_psr_hw_info__bindgen_ty_2"]
        [::std::mem::align_of::<xc_psr_hw_info__bindgen_ty_2>() - 4usize];
    ["Offset of field: xc_psr_hw_info__bindgen_ty_2::cos_max"]
        [::std::mem::offset_of!(xc_psr_hw_info__bindgen_ty_2, cos_max) - 0usize];
    ["Offset of field: xc_psr_hw_info__bindgen_ty_2::thrtl_max"]
        [::std::mem::offset_of!(xc_psr_hw_info__bindgen_ty_2, thrtl_max) - 4usize];
    ["Offset of field: xc_psr_hw_info__bindgen_ty_2::linear"]
        [::std::mem::offset_of!(xc_psr_hw_info__bindgen_ty_2, linear) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xc_psr_hw_info"][::std::mem::size_of::<xc_psr_hw_info>() - 12usize];
    ["Alignment of xc_psr_hw_info"][::std::mem::align_of::<xc_psr_hw_info>() - 4usize];
    ["Offset of field: xc_psr_hw_info::cat"][::std::mem::offset_of!(xc_psr_hw_info, cat) - 0usize];
    ["Offset of field: xc_psr_hw_info::mba"][::std::mem::offset_of!(xc_psr_hw_info, mba) - 0usize];
};
impl Default for xc_psr_hw_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn xc_psr_cmt_attach(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_cmt_detach(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_cmt_get_domain_rmid(
        xch: *mut xc_interface,
        domid: u32,
        rmid: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_cmt_get_total_rmid(
        xch: *mut xc_interface,
        total_rmid: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_cmt_get_l3_upscaling_factor(
        xch: *mut xc_interface,
        upscaling_factor: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_cmt_get_l3_event_mask(
        xch: *mut xc_interface,
        event_mask: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_cmt_get_l3_cache_size(
        xch: *mut xc_interface,
        cpu: u32,
        l3_cache_size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_cmt_get_data(
        xch: *mut xc_interface,
        rmid: u32,
        cpu: u32,
        type_: xc_psr_cmt_type,
        monitor_data: *mut u64,
        tsc: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_cmt_enabled(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_set_domain_data(
        xch: *mut xc_interface,
        domid: u32,
        type_: xc_psr_type,
        target: u32,
        data: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_get_domain_data(
        xch: *mut xc_interface,
        domid: u32,
        type_: xc_psr_type,
        target: u32,
        data: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_psr_get_hw_info(
        xch: *mut xc_interface,
        socket: u32,
        type_: xc_psr_feat_type,
        hw_info: *mut xc_psr_hw_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_upload(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        payload: *mut ::std::os::raw::c_uchar,
        size: u32,
        force: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_get(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        status: *mut xen_livepatch_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_list_get_sizes(
        xch: *mut xc_interface,
        nr: *mut ::std::os::raw::c_uint,
        name_total_size: *mut u32,
        metadata_total_size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_list(
        xch: *mut xc_interface,
        max: ::std::os::raw::c_uint,
        start: ::std::os::raw::c_uint,
        info: *mut xen_livepatch_status,
        name: *mut ::std::os::raw::c_char,
        len: *mut u32,
        name_total_size: u32,
        metadata: *mut ::std::os::raw::c_char,
        metadata_len: *mut u32,
        metadata_total_size: u32,
        done: *mut ::std::os::raw::c_uint,
        left: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_apply(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        timeout: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_revert(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        timeout: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_unload(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        timeout: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_replace(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        timeout: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_cacheflush(
        xch: *mut xc_interface,
        domid: u32,
        start_pfn: xen_pfn_t,
        nr_pfns: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_llc_colors(
        xch: *mut xc_interface,
        domid: u32,
        llc_colors: *const u32,
        num_llc_colors: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_open(
        logger: *mut xentoollog_logger,
        open_flags: ::std::os::raw::c_uint,
    ) -> *mut xendevicemodel_handle;
}
extern "C" {
    pub fn xendevicemodel_close(dmod: *mut xendevicemodel_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_create_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        handle_bufioreq: ::std::os::raw::c_int,
        id: *mut ioservid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_get_ioreq_server_info(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        ioreq_gfn: *mut xen_pfn_t,
        bufioreq_gfn: *mut xen_pfn_t,
        bufioreq_port: *mut evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_map_io_range_to_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        is_mmio: ::std::os::raw::c_int,
        start: u64,
        end: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_unmap_io_range_from_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        is_mmio: ::std::os::raw::c_int,
        start: u64,
        end: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_map_mem_type_to_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        type_: u16,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_map_pcidev_to_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        segment: u16,
        bus: u8,
        device: u8,
        function: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_unmap_pcidev_from_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        segment: u16,
        bus: u8,
        device: u8,
        function: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_destroy_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_ioreq_server_state(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        enabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_pci_intx_level(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        segment: u16,
        bus: u8,
        device: u8,
        intx: u8,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_isa_irq_level(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        irq: u8,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_irq_level(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        irq: ::std::os::raw::c_uint,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_pci_link_route(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        link: u8,
        irq: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_inject_msi(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        msi_addr: u64,
        msi_data: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_track_dirty_vram(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        first_pfn: u64,
        nr: u32,
        dirty_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_modified_memory(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        first_pfn: u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_modified_memory_bulk(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        extents: *mut xen_dm_op_modified_memory_extent,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_mem_type(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        mem_type: hvmmem_type_t,
        first_pfn: u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_inject_event(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        vcpu: ::std::os::raw::c_int,
        vector: u8,
        type_: u8,
        error_code: u32,
        insn_len: u8,
        extra: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_shutdown(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        reason: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_relocate_memory(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        size: u32,
        src_gfn: u64,
        dst_gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_pin_memory_cacheattr(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        start: u64,
        end: u64,
        type_: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_nr_vcpus(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        vcpus: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_restrict(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
    ) -> ::std::os::raw::c_int;
}
pub type xenevtchn_port_or_error_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenevtchn_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xenevtchn_open(
        logger: *mut xentoollog_logger,
        flags: ::std::os::raw::c_uint,
    ) -> *mut xenevtchn_handle;
}
extern "C" {
    pub fn xenevtchn_fdopen(
        logger: *mut xentoollog_logger,
        fd: ::std::os::raw::c_int,
        open_flags: ::std::os::raw::c_uint,
    ) -> *mut xenevtchn_handle;
}
extern "C" {
    pub fn xenevtchn_close(xce: *mut xenevtchn_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_fd(xce: *mut xenevtchn_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_notify(
        xce: *mut xenevtchn_handle,
        port: evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_bind_unbound_port(
        xce: *mut xenevtchn_handle,
        domid: u32,
    ) -> xenevtchn_port_or_error_t;
}
extern "C" {
    pub fn xenevtchn_bind_interdomain(
        xce: *mut xenevtchn_handle,
        domid: u32,
        remote_port: evtchn_port_t,
    ) -> xenevtchn_port_or_error_t;
}
extern "C" {
    pub fn xenevtchn_bind_virq(
        xce: *mut xenevtchn_handle,
        virq: ::std::os::raw::c_uint,
    ) -> xenevtchn_port_or_error_t;
}
extern "C" {
    pub fn xenevtchn_unbind(
        xce: *mut xenevtchn_handle,
        port: evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_pending(xce: *mut xenevtchn_handle) -> xenevtchn_port_or_error_t;
}
extern "C" {
    pub fn xenevtchn_unmask(
        xce: *mut xenevtchn_handle,
        port: evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_restrict(xce: *mut xenevtchn_handle, domid: domid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenforeignmemory_open(
        logger: *mut xentoollog_logger,
        open_flags: ::std::os::raw::c_uint,
    ) -> *mut xenforeignmemory_handle;
}
extern "C" {
    pub fn xenforeignmemory_close(fmem: *mut xenforeignmemory_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenforeignmemory_map(
        fmem: *mut xenforeignmemory_handle,
        dom: u32,
        prot: ::std::os::raw::c_int,
        pages: usize,
        arr: *const xen_pfn_t,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xenforeignmemory_map2(
        fmem: *mut xenforeignmemory_handle,
        dom: u32,
        addr: *mut ::std::os::raw::c_void,
        prot: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        pages: usize,
        arr: *const xen_pfn_t,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xenforeignmemory_unmap(
        fmem: *mut xenforeignmemory_handle,
        addr: *mut ::std::os::raw::c_void,
        pages: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenforeignmemory_restrict(
        fmem: *mut xenforeignmemory_handle,
        domid: domid_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenforeignmemory_resource_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xenforeignmemory_map_resource(
        fmem: *mut xenforeignmemory_handle,
        domid: domid_t,
        type_: ::std::os::raw::c_uint,
        id: ::std::os::raw::c_uint,
        frame: ::std::os::raw::c_ulong,
        nr_frames: ::std::os::raw::c_ulong,
        paddr: *mut *mut ::std::os::raw::c_void,
        prot: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut xenforeignmemory_resource_handle;
}
extern "C" {
    pub fn xenforeignmemory_unmap_resource(
        fmem: *mut xenforeignmemory_handle,
        fres: *mut xenforeignmemory_resource_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenforeignmemory_resource_size(
        fmem: *mut xenforeignmemory_handle,
        domid: domid_t,
        type_: ::std::os::raw::c_uint,
        id: ::std::os::raw::c_uint,
        size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub const xsd_sockmsg_type_XS_CONTROL: xsd_sockmsg_type = 0;
pub const xsd_sockmsg_type_XS_DIRECTORY: xsd_sockmsg_type = 1;
pub const xsd_sockmsg_type_XS_READ: xsd_sockmsg_type = 2;
pub const xsd_sockmsg_type_XS_GET_PERMS: xsd_sockmsg_type = 3;
pub const xsd_sockmsg_type_XS_WATCH: xsd_sockmsg_type = 4;
pub const xsd_sockmsg_type_XS_UNWATCH: xsd_sockmsg_type = 5;
pub const xsd_sockmsg_type_XS_TRANSACTION_START: xsd_sockmsg_type = 6;
pub const xsd_sockmsg_type_XS_TRANSACTION_END: xsd_sockmsg_type = 7;
pub const xsd_sockmsg_type_XS_INTRODUCE: xsd_sockmsg_type = 8;
pub const xsd_sockmsg_type_XS_RELEASE: xsd_sockmsg_type = 9;
pub const xsd_sockmsg_type_XS_GET_DOMAIN_PATH: xsd_sockmsg_type = 10;
pub const xsd_sockmsg_type_XS_WRITE: xsd_sockmsg_type = 11;
pub const xsd_sockmsg_type_XS_MKDIR: xsd_sockmsg_type = 12;
pub const xsd_sockmsg_type_XS_RM: xsd_sockmsg_type = 13;
pub const xsd_sockmsg_type_XS_SET_PERMS: xsd_sockmsg_type = 14;
pub const xsd_sockmsg_type_XS_WATCH_EVENT: xsd_sockmsg_type = 15;
pub const xsd_sockmsg_type_XS_ERROR: xsd_sockmsg_type = 16;
pub const xsd_sockmsg_type_XS_IS_DOMAIN_INTRODUCED: xsd_sockmsg_type = 17;
pub const xsd_sockmsg_type_XS_RESUME: xsd_sockmsg_type = 18;
pub const xsd_sockmsg_type_XS_SET_TARGET: xsd_sockmsg_type = 19;
pub const xsd_sockmsg_type_XS_RESET_WATCHES: xsd_sockmsg_type = 21;
pub const xsd_sockmsg_type_XS_DIRECTORY_PART: xsd_sockmsg_type = 22;
pub const xsd_sockmsg_type_XS_TYPE_COUNT: xsd_sockmsg_type = 23;
pub const xsd_sockmsg_type_XS_INVALID: xsd_sockmsg_type = 65535;
pub type xsd_sockmsg_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsd_errors {
    pub errnum: ::std::os::raw::c_int,
    pub errstring: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsd_errors"][::std::mem::size_of::<xsd_errors>() - 16usize];
    ["Alignment of xsd_errors"][::std::mem::align_of::<xsd_errors>() - 8usize];
    ["Offset of field: xsd_errors::errnum"][::std::mem::offset_of!(xsd_errors, errnum) - 0usize];
    ["Offset of field: xsd_errors::errstring"]
        [::std::mem::offset_of!(xsd_errors, errstring) - 8usize];
};
impl Default for xsd_errors {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static xsd_errors: [xsd_errors; 16usize];
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xsd_sockmsg {
    pub type_: u32,
    pub req_id: u32,
    pub tx_id: u32,
    pub len: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xsd_sockmsg"][::std::mem::size_of::<xsd_sockmsg>() - 16usize];
    ["Alignment of xsd_sockmsg"][::std::mem::align_of::<xsd_sockmsg>() - 4usize];
    ["Offset of field: xsd_sockmsg::type_"][::std::mem::offset_of!(xsd_sockmsg, type_) - 0usize];
    ["Offset of field: xsd_sockmsg::req_id"][::std::mem::offset_of!(xsd_sockmsg, req_id) - 4usize];
    ["Offset of field: xsd_sockmsg::tx_id"][::std::mem::offset_of!(xsd_sockmsg, tx_id) - 8usize];
    ["Offset of field: xsd_sockmsg::len"][::std::mem::offset_of!(xsd_sockmsg, len) - 12usize];
};
pub const xs_watch_type_XS_WATCH_PATH: xs_watch_type = 0;
pub const xs_watch_type_XS_WATCH_TOKEN: xs_watch_type = 1;
pub type xs_watch_type = ::std::os::raw::c_uint;
pub type XENSTORE_RING_IDX = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenstore_domain_interface {
    pub req: [::std::os::raw::c_char; 1024usize],
    pub rsp: [::std::os::raw::c_char; 1024usize],
    pub req_cons: XENSTORE_RING_IDX,
    pub req_prod: XENSTORE_RING_IDX,
    pub rsp_cons: XENSTORE_RING_IDX,
    pub rsp_prod: XENSTORE_RING_IDX,
    pub server_features: u32,
    pub connection: u32,
    pub error: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xenstore_domain_interface"]
        [::std::mem::size_of::<xenstore_domain_interface>() - 2076usize];
    ["Alignment of xenstore_domain_interface"]
        [::std::mem::align_of::<xenstore_domain_interface>() - 4usize];
    ["Offset of field: xenstore_domain_interface::req"]
        [::std::mem::offset_of!(xenstore_domain_interface, req) - 0usize];
    ["Offset of field: xenstore_domain_interface::rsp"]
        [::std::mem::offset_of!(xenstore_domain_interface, rsp) - 1024usize];
    ["Offset of field: xenstore_domain_interface::req_cons"]
        [::std::mem::offset_of!(xenstore_domain_interface, req_cons) - 2048usize];
    ["Offset of field: xenstore_domain_interface::req_prod"]
        [::std::mem::offset_of!(xenstore_domain_interface, req_prod) - 2052usize];
    ["Offset of field: xenstore_domain_interface::rsp_cons"]
        [::std::mem::offset_of!(xenstore_domain_interface, rsp_cons) - 2056usize];
    ["Offset of field: xenstore_domain_interface::rsp_prod"]
        [::std::mem::offset_of!(xenstore_domain_interface, rsp_prod) - 2060usize];
    ["Offset of field: xenstore_domain_interface::server_features"]
        [::std::mem::offset_of!(xenstore_domain_interface, server_features) - 2064usize];
    ["Offset of field: xenstore_domain_interface::connection"]
        [::std::mem::offset_of!(xenstore_domain_interface, connection) - 2068usize];
    ["Offset of field: xenstore_domain_interface::error"]
        [::std::mem::offset_of!(xenstore_domain_interface, error) - 2072usize];
};
impl Default for xenstore_domain_interface {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct xs_permissions {
    pub id: ::std::os::raw::c_uint,
    pub perms: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xs_permissions"][::std::mem::size_of::<xs_permissions>() - 8usize];
    ["Alignment of xs_permissions"][::std::mem::align_of::<xs_permissions>() - 4usize];
    ["Offset of field: xs_permissions::id"][::std::mem::offset_of!(xs_permissions, id) - 0usize];
    ["Offset of field: xs_permissions::perms"]
        [::std::mem::offset_of!(xs_permissions, perms) - 4usize];
};
extern "C" {
    pub fn xs_daemon_rundir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_daemon_socket() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_daemon_socket_ro() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_strings_to_perms(
        perms: *mut xs_permissions,
        num: ::std::os::raw::c_uint,
        strings: *const ::std::os::raw::c_char,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xs_handle {
    _unused: [u8; 0],
}
pub type xs_transaction_t = u32;
extern "C" {
    pub fn xs_open(flags: ::std::os::raw::c_ulong) -> *mut xs_handle;
}
extern "C" {
    pub fn xs_close(xsh: *mut xs_handle);
}
extern "C" {
    pub fn xs_daemon_open() -> *mut xs_handle;
}
extern "C" {
    pub fn xs_domain_open() -> *mut xs_handle;
}
extern "C" {
    pub fn xs_daemon_open_readonly() -> *mut xs_handle;
}
extern "C" {
    pub fn xs_daemon_close(arg1: *mut xs_handle);
}
extern "C" {
    pub fn xs_daemon_destroy_postfork(arg1: *mut xs_handle);
}
extern "C" {
    pub fn xs_directory(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        num: *mut ::std::os::raw::c_uint,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_read(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xs_write(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_write_all(
        fd: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_mkdir(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_rm(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_restrict(h: *mut xs_handle, domid: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn xs_get_permissions(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        num: *mut ::std::os::raw::c_uint,
    ) -> *mut xs_permissions;
}
extern "C" {
    pub fn xs_set_permissions(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        perms: *mut xs_permissions,
        num_perms: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_watch(
        h: *mut xs_handle,
        path: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_fileno(h: *mut xs_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xs_check_watch(h: *mut xs_handle) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_read_watch(
        h: *mut xs_handle,
        num: *mut ::std::os::raw::c_uint,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_unwatch(
        h: *mut xs_handle,
        path: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_transaction_start(h: *mut xs_handle) -> xs_transaction_t;
}
extern "C" {
    pub fn xs_transaction_end(h: *mut xs_handle, t: xs_transaction_t, abort: bool) -> bool;
}
extern "C" {
    pub fn xs_introduce_domain(
        h: *mut xs_handle,
        domid: ::std::os::raw::c_uint,
        mfn: ::std::os::raw::c_ulong,
        eventchn: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_set_target(
        h: *mut xs_handle,
        domid: ::std::os::raw::c_uint,
        target: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_resume_domain(h: *mut xs_handle, domid: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn xs_release_domain(h: *mut xs_handle, domid: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn xs_get_domain_path(
        h: *mut xs_handle,
        domid: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_path_is_subpath(
        parent: *const ::std::os::raw::c_char,
        child: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_is_domain_introduced(h: *mut xs_handle, domid: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn xs_control_command(
        h: *mut xs_handle,
        cmd: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_debug_command(
        h: *mut xs_handle,
        cmd: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_suspend_evtchn_port(domid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type RING_IDX = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_x86_selector_reg {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_x86_selector_reg"]
        [::std::mem::size_of::<vm_event_x86_selector_reg>() - 4usize];
    ["Alignment of vm_event_x86_selector_reg"]
        [::std::mem::align_of::<vm_event_x86_selector_reg>() - 4usize];
};
impl vm_event_x86_selector_reg {
    #[inline]
    pub fn limit(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_limit(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn ar(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_ar(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(limit: u32, ar: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let limit: u32 = unsafe { ::std::mem::transmute(limit) };
            limit as u64
        });
        __bindgen_bitfield_unit.set(20usize, 12u8, {
            let ar: u32 = unsafe { ::std::mem::transmute(ar) };
            ar as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_regs_x86 {
    pub rax: u64,
    pub rcx: u64,
    pub rdx: u64,
    pub rbx: u64,
    pub rsp: u64,
    pub rbp: u64,
    pub rsi: u64,
    pub rdi: u64,
    pub r8: u64,
    pub r9: u64,
    pub r10: u64,
    pub r11: u64,
    pub r12: u64,
    pub r13: u64,
    pub r14: u64,
    pub r15: u64,
    pub rflags: u64,
    pub dr6: u64,
    pub dr7: u64,
    pub rip: u64,
    pub cr0: u64,
    pub cr2: u64,
    pub cr3: u64,
    pub cr4: u64,
    pub sysenter_cs: u64,
    pub sysenter_esp: u64,
    pub sysenter_eip: u64,
    pub msr_efer: u64,
    pub msr_star: u64,
    pub msr_lstar: u64,
    pub gdtr_base: u64,
    pub npt_base: u64,
    pub vmtrace_pos: u64,
    pub cs_base: u32,
    pub ss_base: u32,
    pub ds_base: u32,
    pub es_base: u32,
    pub fs_base: u64,
    pub gs_base: u64,
    pub cs: vm_event_x86_selector_reg,
    pub ss: vm_event_x86_selector_reg,
    pub ds: vm_event_x86_selector_reg,
    pub es: vm_event_x86_selector_reg,
    pub fs: vm_event_x86_selector_reg,
    pub gs: vm_event_x86_selector_reg,
    pub shadow_gs: u64,
    pub gdtr_limit: u16,
    pub cs_sel: u16,
    pub ss_sel: u16,
    pub ds_sel: u16,
    pub es_sel: u16,
    pub fs_sel: u16,
    pub gs_sel: u16,
    pub _pad: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_regs_x86"][::std::mem::size_of::<vm_event_regs_x86>() - 344usize];
    ["Alignment of vm_event_regs_x86"][::std::mem::align_of::<vm_event_regs_x86>() - 8usize];
    ["Offset of field: vm_event_regs_x86::rax"]
        [::std::mem::offset_of!(vm_event_regs_x86, rax) - 0usize];
    ["Offset of field: vm_event_regs_x86::rcx"]
        [::std::mem::offset_of!(vm_event_regs_x86, rcx) - 8usize];
    ["Offset of field: vm_event_regs_x86::rdx"]
        [::std::mem::offset_of!(vm_event_regs_x86, rdx) - 16usize];
    ["Offset of field: vm_event_regs_x86::rbx"]
        [::std::mem::offset_of!(vm_event_regs_x86, rbx) - 24usize];
    ["Offset of field: vm_event_regs_x86::rsp"]
        [::std::mem::offset_of!(vm_event_regs_x86, rsp) - 32usize];
    ["Offset of field: vm_event_regs_x86::rbp"]
        [::std::mem::offset_of!(vm_event_regs_x86, rbp) - 40usize];
    ["Offset of field: vm_event_regs_x86::rsi"]
        [::std::mem::offset_of!(vm_event_regs_x86, rsi) - 48usize];
    ["Offset of field: vm_event_regs_x86::rdi"]
        [::std::mem::offset_of!(vm_event_regs_x86, rdi) - 56usize];
    ["Offset of field: vm_event_regs_x86::r8"]
        [::std::mem::offset_of!(vm_event_regs_x86, r8) - 64usize];
    ["Offset of field: vm_event_regs_x86::r9"]
        [::std::mem::offset_of!(vm_event_regs_x86, r9) - 72usize];
    ["Offset of field: vm_event_regs_x86::r10"]
        [::std::mem::offset_of!(vm_event_regs_x86, r10) - 80usize];
    ["Offset of field: vm_event_regs_x86::r11"]
        [::std::mem::offset_of!(vm_event_regs_x86, r11) - 88usize];
    ["Offset of field: vm_event_regs_x86::r12"]
        [::std::mem::offset_of!(vm_event_regs_x86, r12) - 96usize];
    ["Offset of field: vm_event_regs_x86::r13"]
        [::std::mem::offset_of!(vm_event_regs_x86, r13) - 104usize];
    ["Offset of field: vm_event_regs_x86::r14"]
        [::std::mem::offset_of!(vm_event_regs_x86, r14) - 112usize];
    ["Offset of field: vm_event_regs_x86::r15"]
        [::std::mem::offset_of!(vm_event_regs_x86, r15) - 120usize];
    ["Offset of field: vm_event_regs_x86::rflags"]
        [::std::mem::offset_of!(vm_event_regs_x86, rflags) - 128usize];
    ["Offset of field: vm_event_regs_x86::dr6"]
        [::std::mem::offset_of!(vm_event_regs_x86, dr6) - 136usize];
    ["Offset of field: vm_event_regs_x86::dr7"]
        [::std::mem::offset_of!(vm_event_regs_x86, dr7) - 144usize];
    ["Offset of field: vm_event_regs_x86::rip"]
        [::std::mem::offset_of!(vm_event_regs_x86, rip) - 152usize];
    ["Offset of field: vm_event_regs_x86::cr0"]
        [::std::mem::offset_of!(vm_event_regs_x86, cr0) - 160usize];
    ["Offset of field: vm_event_regs_x86::cr2"]
        [::std::mem::offset_of!(vm_event_regs_x86, cr2) - 168usize];
    ["Offset of field: vm_event_regs_x86::cr3"]
        [::std::mem::offset_of!(vm_event_regs_x86, cr3) - 176usize];
    ["Offset of field: vm_event_regs_x86::cr4"]
        [::std::mem::offset_of!(vm_event_regs_x86, cr4) - 184usize];
    ["Offset of field: vm_event_regs_x86::sysenter_cs"]
        [::std::mem::offset_of!(vm_event_regs_x86, sysenter_cs) - 192usize];
    ["Offset of field: vm_event_regs_x86::sysenter_esp"]
        [::std::mem::offset_of!(vm_event_regs_x86, sysenter_esp) - 200usize];
    ["Offset of field: vm_event_regs_x86::sysenter_eip"]
        [::std::mem::offset_of!(vm_event_regs_x86, sysenter_eip) - 208usize];
    ["Offset of field: vm_event_regs_x86::msr_efer"]
        [::std::mem::offset_of!(vm_event_regs_x86, msr_efer) - 216usize];
    ["Offset of field: vm_event_regs_x86::msr_star"]
        [::std::mem::offset_of!(vm_event_regs_x86, msr_star) - 224usize];
    ["Offset of field: vm_event_regs_x86::msr_lstar"]
        [::std::mem::offset_of!(vm_event_regs_x86, msr_lstar) - 232usize];
    ["Offset of field: vm_event_regs_x86::gdtr_base"]
        [::std::mem::offset_of!(vm_event_regs_x86, gdtr_base) - 240usize];
    ["Offset of field: vm_event_regs_x86::npt_base"]
        [::std::mem::offset_of!(vm_event_regs_x86, npt_base) - 248usize];
    ["Offset of field: vm_event_regs_x86::vmtrace_pos"]
        [::std::mem::offset_of!(vm_event_regs_x86, vmtrace_pos) - 256usize];
    ["Offset of field: vm_event_regs_x86::cs_base"]
        [::std::mem::offset_of!(vm_event_regs_x86, cs_base) - 264usize];
    ["Offset of field: vm_event_regs_x86::ss_base"]
        [::std::mem::offset_of!(vm_event_regs_x86, ss_base) - 268usize];
    ["Offset of field: vm_event_regs_x86::ds_base"]
        [::std::mem::offset_of!(vm_event_regs_x86, ds_base) - 272usize];
    ["Offset of field: vm_event_regs_x86::es_base"]
        [::std::mem::offset_of!(vm_event_regs_x86, es_base) - 276usize];
    ["Offset of field: vm_event_regs_x86::fs_base"]
        [::std::mem::offset_of!(vm_event_regs_x86, fs_base) - 280usize];
    ["Offset of field: vm_event_regs_x86::gs_base"]
        [::std::mem::offset_of!(vm_event_regs_x86, gs_base) - 288usize];
    ["Offset of field: vm_event_regs_x86::cs"]
        [::std::mem::offset_of!(vm_event_regs_x86, cs) - 296usize];
    ["Offset of field: vm_event_regs_x86::ss"]
        [::std::mem::offset_of!(vm_event_regs_x86, ss) - 300usize];
    ["Offset of field: vm_event_regs_x86::ds"]
        [::std::mem::offset_of!(vm_event_regs_x86, ds) - 304usize];
    ["Offset of field: vm_event_regs_x86::es"]
        [::std::mem::offset_of!(vm_event_regs_x86, es) - 308usize];
    ["Offset of field: vm_event_regs_x86::fs"]
        [::std::mem::offset_of!(vm_event_regs_x86, fs) - 312usize];
    ["Offset of field: vm_event_regs_x86::gs"]
        [::std::mem::offset_of!(vm_event_regs_x86, gs) - 316usize];
    ["Offset of field: vm_event_regs_x86::shadow_gs"]
        [::std::mem::offset_of!(vm_event_regs_x86, shadow_gs) - 320usize];
    ["Offset of field: vm_event_regs_x86::gdtr_limit"]
        [::std::mem::offset_of!(vm_event_regs_x86, gdtr_limit) - 328usize];
    ["Offset of field: vm_event_regs_x86::cs_sel"]
        [::std::mem::offset_of!(vm_event_regs_x86, cs_sel) - 330usize];
    ["Offset of field: vm_event_regs_x86::ss_sel"]
        [::std::mem::offset_of!(vm_event_regs_x86, ss_sel) - 332usize];
    ["Offset of field: vm_event_regs_x86::ds_sel"]
        [::std::mem::offset_of!(vm_event_regs_x86, ds_sel) - 334usize];
    ["Offset of field: vm_event_regs_x86::es_sel"]
        [::std::mem::offset_of!(vm_event_regs_x86, es_sel) - 336usize];
    ["Offset of field: vm_event_regs_x86::fs_sel"]
        [::std::mem::offset_of!(vm_event_regs_x86, fs_sel) - 338usize];
    ["Offset of field: vm_event_regs_x86::gs_sel"]
        [::std::mem::offset_of!(vm_event_regs_x86, gs_sel) - 340usize];
    ["Offset of field: vm_event_regs_x86::_pad"]
        [::std::mem::offset_of!(vm_event_regs_x86, _pad) - 342usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_regs_arm {
    pub ttbr0: u64,
    pub ttbr1: u64,
    pub ttbcr: u64,
    pub pc: u64,
    pub cpsr: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_regs_arm"][::std::mem::size_of::<vm_event_regs_arm>() - 40usize];
    ["Alignment of vm_event_regs_arm"][::std::mem::align_of::<vm_event_regs_arm>() - 8usize];
    ["Offset of field: vm_event_regs_arm::ttbr0"]
        [::std::mem::offset_of!(vm_event_regs_arm, ttbr0) - 0usize];
    ["Offset of field: vm_event_regs_arm::ttbr1"]
        [::std::mem::offset_of!(vm_event_regs_arm, ttbr1) - 8usize];
    ["Offset of field: vm_event_regs_arm::ttbcr"]
        [::std::mem::offset_of!(vm_event_regs_arm, ttbcr) - 16usize];
    ["Offset of field: vm_event_regs_arm::pc"]
        [::std::mem::offset_of!(vm_event_regs_arm, pc) - 24usize];
    ["Offset of field: vm_event_regs_arm::cpsr"]
        [::std::mem::offset_of!(vm_event_regs_arm, cpsr) - 32usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_mem_access {
    pub gfn: u64,
    pub offset: u64,
    pub gla: u64,
    pub flags: u32,
    pub _pad: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_mem_access"][::std::mem::size_of::<vm_event_mem_access>() - 32usize];
    ["Alignment of vm_event_mem_access"][::std::mem::align_of::<vm_event_mem_access>() - 8usize];
    ["Offset of field: vm_event_mem_access::gfn"]
        [::std::mem::offset_of!(vm_event_mem_access, gfn) - 0usize];
    ["Offset of field: vm_event_mem_access::offset"]
        [::std::mem::offset_of!(vm_event_mem_access, offset) - 8usize];
    ["Offset of field: vm_event_mem_access::gla"]
        [::std::mem::offset_of!(vm_event_mem_access, gla) - 16usize];
    ["Offset of field: vm_event_mem_access::flags"]
        [::std::mem::offset_of!(vm_event_mem_access, flags) - 24usize];
    ["Offset of field: vm_event_mem_access::_pad"]
        [::std::mem::offset_of!(vm_event_mem_access, _pad) - 28usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_write_ctrlreg {
    pub index: u32,
    pub _pad: u32,
    pub new_value: u64,
    pub old_value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_write_ctrlreg"][::std::mem::size_of::<vm_event_write_ctrlreg>() - 24usize];
    ["Alignment of vm_event_write_ctrlreg"]
        [::std::mem::align_of::<vm_event_write_ctrlreg>() - 8usize];
    ["Offset of field: vm_event_write_ctrlreg::index"]
        [::std::mem::offset_of!(vm_event_write_ctrlreg, index) - 0usize];
    ["Offset of field: vm_event_write_ctrlreg::_pad"]
        [::std::mem::offset_of!(vm_event_write_ctrlreg, _pad) - 4usize];
    ["Offset of field: vm_event_write_ctrlreg::new_value"]
        [::std::mem::offset_of!(vm_event_write_ctrlreg, new_value) - 8usize];
    ["Offset of field: vm_event_write_ctrlreg::old_value"]
        [::std::mem::offset_of!(vm_event_write_ctrlreg, old_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_singlestep {
    pub gfn: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_singlestep"][::std::mem::size_of::<vm_event_singlestep>() - 8usize];
    ["Alignment of vm_event_singlestep"][::std::mem::align_of::<vm_event_singlestep>() - 8usize];
    ["Offset of field: vm_event_singlestep::gfn"]
        [::std::mem::offset_of!(vm_event_singlestep, gfn) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_fast_singlestep {
    pub p2midx: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_fast_singlestep"]
        [::std::mem::size_of::<vm_event_fast_singlestep>() - 2usize];
    ["Alignment of vm_event_fast_singlestep"]
        [::std::mem::align_of::<vm_event_fast_singlestep>() - 2usize];
    ["Offset of field: vm_event_fast_singlestep::p2midx"]
        [::std::mem::offset_of!(vm_event_fast_singlestep, p2midx) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_debug {
    pub gfn: u64,
    pub pending_dbg: u64,
    pub insn_length: u32,
    pub type_: u8,
    pub _pad: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_debug"][::std::mem::size_of::<vm_event_debug>() - 24usize];
    ["Alignment of vm_event_debug"][::std::mem::align_of::<vm_event_debug>() - 8usize];
    ["Offset of field: vm_event_debug::gfn"][::std::mem::offset_of!(vm_event_debug, gfn) - 0usize];
    ["Offset of field: vm_event_debug::pending_dbg"]
        [::std::mem::offset_of!(vm_event_debug, pending_dbg) - 8usize];
    ["Offset of field: vm_event_debug::insn_length"]
        [::std::mem::offset_of!(vm_event_debug, insn_length) - 16usize];
    ["Offset of field: vm_event_debug::type_"]
        [::std::mem::offset_of!(vm_event_debug, type_) - 20usize];
    ["Offset of field: vm_event_debug::_pad"]
        [::std::mem::offset_of!(vm_event_debug, _pad) - 21usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_mov_to_msr {
    pub msr: u64,
    pub new_value: u64,
    pub old_value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_mov_to_msr"][::std::mem::size_of::<vm_event_mov_to_msr>() - 24usize];
    ["Alignment of vm_event_mov_to_msr"][::std::mem::align_of::<vm_event_mov_to_msr>() - 8usize];
    ["Offset of field: vm_event_mov_to_msr::msr"]
        [::std::mem::offset_of!(vm_event_mov_to_msr, msr) - 0usize];
    ["Offset of field: vm_event_mov_to_msr::new_value"]
        [::std::mem::offset_of!(vm_event_mov_to_msr, new_value) - 8usize];
    ["Offset of field: vm_event_mov_to_msr::old_value"]
        [::std::mem::offset_of!(vm_event_mov_to_msr, old_value) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_event_desc_access {
    pub arch: vm_event_desc_access__bindgen_ty_1,
    pub descriptor: u8,
    pub is_write: u8,
    pub _pad: [u8; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_event_desc_access__bindgen_ty_1 {
    pub vmx: vm_event_desc_access__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_desc_access__bindgen_ty_1__bindgen_ty_1 {
    pub instr_info: u32,
    pub _pad1: u32,
    pub exit_qualification: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_desc_access__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<vm_event_desc_access__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of vm_event_desc_access__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<vm_event_desc_access__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_event_desc_access__bindgen_ty_1__bindgen_ty_1::instr_info"][::std::mem::offset_of!(
        vm_event_desc_access__bindgen_ty_1__bindgen_ty_1,
        instr_info
    ) - 0usize];
    ["Offset of field: vm_event_desc_access__bindgen_ty_1__bindgen_ty_1::_pad1"]
        [::std::mem::offset_of!(vm_event_desc_access__bindgen_ty_1__bindgen_ty_1, _pad1) - 4usize];
    ["Offset of field: vm_event_desc_access__bindgen_ty_1__bindgen_ty_1::exit_qualification"][::std::mem::offset_of!(
        vm_event_desc_access__bindgen_ty_1__bindgen_ty_1,
        exit_qualification
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_desc_access__bindgen_ty_1"]
        [::std::mem::size_of::<vm_event_desc_access__bindgen_ty_1>() - 16usize];
    ["Alignment of vm_event_desc_access__bindgen_ty_1"]
        [::std::mem::align_of::<vm_event_desc_access__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_event_desc_access__bindgen_ty_1::vmx"]
        [::std::mem::offset_of!(vm_event_desc_access__bindgen_ty_1, vmx) - 0usize];
};
impl Default for vm_event_desc_access__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_desc_access"][::std::mem::size_of::<vm_event_desc_access>() - 24usize];
    ["Alignment of vm_event_desc_access"][::std::mem::align_of::<vm_event_desc_access>() - 8usize];
    ["Offset of field: vm_event_desc_access::arch"]
        [::std::mem::offset_of!(vm_event_desc_access, arch) - 0usize];
    ["Offset of field: vm_event_desc_access::descriptor"]
        [::std::mem::offset_of!(vm_event_desc_access, descriptor) - 16usize];
    ["Offset of field: vm_event_desc_access::is_write"]
        [::std::mem::offset_of!(vm_event_desc_access, is_write) - 17usize];
    ["Offset of field: vm_event_desc_access::_pad"]
        [::std::mem::offset_of!(vm_event_desc_access, _pad) - 18usize];
};
impl Default for vm_event_desc_access {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_cpuid {
    pub insn_length: u32,
    pub leaf: u32,
    pub subleaf: u32,
    pub _pad: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_cpuid"][::std::mem::size_of::<vm_event_cpuid>() - 16usize];
    ["Alignment of vm_event_cpuid"][::std::mem::align_of::<vm_event_cpuid>() - 4usize];
    ["Offset of field: vm_event_cpuid::insn_length"]
        [::std::mem::offset_of!(vm_event_cpuid, insn_length) - 0usize];
    ["Offset of field: vm_event_cpuid::leaf"]
        [::std::mem::offset_of!(vm_event_cpuid, leaf) - 4usize];
    ["Offset of field: vm_event_cpuid::subleaf"]
        [::std::mem::offset_of!(vm_event_cpuid, subleaf) - 8usize];
    ["Offset of field: vm_event_cpuid::_pad"]
        [::std::mem::offset_of!(vm_event_cpuid, _pad) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_interrupt_x86 {
    pub vector: u32,
    pub type_: u32,
    pub error_code: u32,
    pub _pad: u32,
    pub cr2: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_interrupt_x86"][::std::mem::size_of::<vm_event_interrupt_x86>() - 24usize];
    ["Alignment of vm_event_interrupt_x86"]
        [::std::mem::align_of::<vm_event_interrupt_x86>() - 8usize];
    ["Offset of field: vm_event_interrupt_x86::vector"]
        [::std::mem::offset_of!(vm_event_interrupt_x86, vector) - 0usize];
    ["Offset of field: vm_event_interrupt_x86::type_"]
        [::std::mem::offset_of!(vm_event_interrupt_x86, type_) - 4usize];
    ["Offset of field: vm_event_interrupt_x86::error_code"]
        [::std::mem::offset_of!(vm_event_interrupt_x86, error_code) - 8usize];
    ["Offset of field: vm_event_interrupt_x86::_pad"]
        [::std::mem::offset_of!(vm_event_interrupt_x86, _pad) - 12usize];
    ["Offset of field: vm_event_interrupt_x86::cr2"]
        [::std::mem::offset_of!(vm_event_interrupt_x86, cr2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_paging {
    pub gfn: u64,
    pub p2mt: u32,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_paging"][::std::mem::size_of::<vm_event_paging>() - 16usize];
    ["Alignment of vm_event_paging"][::std::mem::align_of::<vm_event_paging>() - 8usize];
    ["Offset of field: vm_event_paging::gfn"]
        [::std::mem::offset_of!(vm_event_paging, gfn) - 0usize];
    ["Offset of field: vm_event_paging::p2mt"]
        [::std::mem::offset_of!(vm_event_paging, p2mt) - 8usize];
    ["Offset of field: vm_event_paging::flags"]
        [::std::mem::offset_of!(vm_event_paging, flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_sharing {
    pub gfn: u64,
    pub p2mt: u32,
    pub _pad: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_sharing"][::std::mem::size_of::<vm_event_sharing>() - 16usize];
    ["Alignment of vm_event_sharing"][::std::mem::align_of::<vm_event_sharing>() - 8usize];
    ["Offset of field: vm_event_sharing::gfn"]
        [::std::mem::offset_of!(vm_event_sharing, gfn) - 0usize];
    ["Offset of field: vm_event_sharing::p2mt"]
        [::std::mem::offset_of!(vm_event_sharing, p2mt) - 8usize];
    ["Offset of field: vm_event_sharing::_pad"]
        [::std::mem::offset_of!(vm_event_sharing, _pad) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_event_emul_read_data {
    pub size: u32,
    pub data: [u8; 340usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_emul_read_data"]
        [::std::mem::size_of::<vm_event_emul_read_data>() - 344usize];
    ["Alignment of vm_event_emul_read_data"]
        [::std::mem::align_of::<vm_event_emul_read_data>() - 4usize];
    ["Offset of field: vm_event_emul_read_data::size"]
        [::std::mem::offset_of!(vm_event_emul_read_data, size) - 0usize];
    ["Offset of field: vm_event_emul_read_data::data"]
        [::std::mem::offset_of!(vm_event_emul_read_data, data) - 4usize];
};
impl Default for vm_event_emul_read_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_emul_insn_data {
    pub data: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_emul_insn_data"][::std::mem::size_of::<vm_event_emul_insn_data>() - 16usize];
    ["Alignment of vm_event_emul_insn_data"]
        [::std::mem::align_of::<vm_event_emul_insn_data>() - 1usize];
    ["Offset of field: vm_event_emul_insn_data::data"]
        [::std::mem::offset_of!(vm_event_emul_insn_data, data) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_vmexit {
    pub arch: vm_event_vmexit__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_vmexit__bindgen_ty_1 {
    pub vmx: vm_event_vmexit__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_vmexit__bindgen_ty_1__bindgen_ty_1 {
    pub reason: u64,
    pub qualification: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_vmexit__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<vm_event_vmexit__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of vm_event_vmexit__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<vm_event_vmexit__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_event_vmexit__bindgen_ty_1__bindgen_ty_1::reason"]
        [::std::mem::offset_of!(vm_event_vmexit__bindgen_ty_1__bindgen_ty_1, reason) - 0usize];
    ["Offset of field: vm_event_vmexit__bindgen_ty_1__bindgen_ty_1::qualification"][::std::mem::offset_of!(
        vm_event_vmexit__bindgen_ty_1__bindgen_ty_1,
        qualification
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_vmexit__bindgen_ty_1"]
        [::std::mem::size_of::<vm_event_vmexit__bindgen_ty_1>() - 16usize];
    ["Alignment of vm_event_vmexit__bindgen_ty_1"]
        [::std::mem::align_of::<vm_event_vmexit__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_event_vmexit__bindgen_ty_1::vmx"]
        [::std::mem::offset_of!(vm_event_vmexit__bindgen_ty_1, vmx) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_vmexit"][::std::mem::size_of::<vm_event_vmexit>() - 16usize];
    ["Alignment of vm_event_vmexit"][::std::mem::align_of::<vm_event_vmexit>() - 8usize];
    ["Offset of field: vm_event_vmexit::arch"]
        [::std::mem::offset_of!(vm_event_vmexit, arch) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_io {
    pub bytes: u32,
    pub port: u16,
    pub in_: u8,
    pub str_: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_io"][::std::mem::size_of::<vm_event_io>() - 8usize];
    ["Alignment of vm_event_io"][::std::mem::align_of::<vm_event_io>() - 4usize];
    ["Offset of field: vm_event_io::bytes"][::std::mem::offset_of!(vm_event_io, bytes) - 0usize];
    ["Offset of field: vm_event_io::port"][::std::mem::offset_of!(vm_event_io, port) - 4usize];
    ["Offset of field: vm_event_io::in_"][::std::mem::offset_of!(vm_event_io, in_) - 6usize];
    ["Offset of field: vm_event_io::str_"][::std::mem::offset_of!(vm_event_io, str_) - 7usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vm_event_st {
    pub version: u32,
    pub flags: u32,
    pub reason: u32,
    pub vcpu_id: u32,
    pub altp2m_idx: u16,
    pub _pad: [u16; 3usize],
    pub u: vm_event_st__bindgen_ty_1,
    pub data: vm_event_st__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_event_st__bindgen_ty_1 {
    pub mem_paging: vm_event_paging,
    pub mem_sharing: vm_event_sharing,
    pub mem_access: vm_event_mem_access,
    pub write_ctrlreg: vm_event_write_ctrlreg,
    pub mov_to_msr: vm_event_mov_to_msr,
    pub desc_access: vm_event_desc_access,
    pub singlestep: vm_event_singlestep,
    pub fast_singlestep: vm_event_fast_singlestep,
    pub software_breakpoint: vm_event_debug,
    pub debug_exception: vm_event_debug,
    pub cpuid: vm_event_cpuid,
    pub vmexit: vm_event_vmexit,
    pub io: vm_event_io,
    pub interrupt: vm_event_st__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_event_st__bindgen_ty_1__bindgen_ty_1 {
    pub x86: vm_event_interrupt_x86,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_st__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<vm_event_st__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of vm_event_st__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<vm_event_st__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_event_st__bindgen_ty_1__bindgen_ty_1::x86"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1__bindgen_ty_1, x86) - 0usize];
};
impl Default for vm_event_st__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_st__bindgen_ty_1"]
        [::std::mem::size_of::<vm_event_st__bindgen_ty_1>() - 32usize];
    ["Alignment of vm_event_st__bindgen_ty_1"]
        [::std::mem::align_of::<vm_event_st__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::mem_paging"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, mem_paging) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::mem_sharing"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, mem_sharing) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::mem_access"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, mem_access) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::write_ctrlreg"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, write_ctrlreg) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::mov_to_msr"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, mov_to_msr) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::desc_access"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, desc_access) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::singlestep"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, singlestep) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::fast_singlestep"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, fast_singlestep) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::software_breakpoint"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, software_breakpoint) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::debug_exception"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, debug_exception) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::cpuid"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, cpuid) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::vmexit"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, vmexit) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::io"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, io) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_1::interrupt"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_1, interrupt) - 0usize];
};
impl Default for vm_event_st__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_event_st__bindgen_ty_2 {
    pub regs: vm_event_st__bindgen_ty_2__bindgen_ty_1,
    pub emul: vm_event_st__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_event_st__bindgen_ty_2__bindgen_ty_1 {
    pub x86: vm_event_regs_x86,
    pub arm: vm_event_regs_arm,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_st__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<vm_event_st__bindgen_ty_2__bindgen_ty_1>() - 344usize];
    ["Alignment of vm_event_st__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<vm_event_st__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: vm_event_st__bindgen_ty_2__bindgen_ty_1::x86"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_2__bindgen_ty_1, x86) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_2__bindgen_ty_1::arm"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_2__bindgen_ty_1, arm) - 0usize];
};
impl Default for vm_event_st__bindgen_ty_2__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_event_st__bindgen_ty_2__bindgen_ty_2 {
    pub read: vm_event_emul_read_data,
    pub insn: vm_event_emul_insn_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_st__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<vm_event_st__bindgen_ty_2__bindgen_ty_2>() - 344usize];
    ["Alignment of vm_event_st__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<vm_event_st__bindgen_ty_2__bindgen_ty_2>() - 4usize];
    ["Offset of field: vm_event_st__bindgen_ty_2__bindgen_ty_2::read"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_2__bindgen_ty_2, read) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_2__bindgen_ty_2::insn"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_2__bindgen_ty_2, insn) - 0usize];
};
impl Default for vm_event_st__bindgen_ty_2__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_st__bindgen_ty_2"]
        [::std::mem::size_of::<vm_event_st__bindgen_ty_2>() - 344usize];
    ["Alignment of vm_event_st__bindgen_ty_2"]
        [::std::mem::align_of::<vm_event_st__bindgen_ty_2>() - 8usize];
    ["Offset of field: vm_event_st__bindgen_ty_2::regs"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_2, regs) - 0usize];
    ["Offset of field: vm_event_st__bindgen_ty_2::emul"]
        [::std::mem::offset_of!(vm_event_st__bindgen_ty_2, emul) - 0usize];
};
impl Default for vm_event_st__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_st"][::std::mem::size_of::<vm_event_st>() - 400usize];
    ["Alignment of vm_event_st"][::std::mem::align_of::<vm_event_st>() - 8usize];
    ["Offset of field: vm_event_st::version"]
        [::std::mem::offset_of!(vm_event_st, version) - 0usize];
    ["Offset of field: vm_event_st::flags"][::std::mem::offset_of!(vm_event_st, flags) - 4usize];
    ["Offset of field: vm_event_st::reason"][::std::mem::offset_of!(vm_event_st, reason) - 8usize];
    ["Offset of field: vm_event_st::vcpu_id"]
        [::std::mem::offset_of!(vm_event_st, vcpu_id) - 12usize];
    ["Offset of field: vm_event_st::altp2m_idx"]
        [::std::mem::offset_of!(vm_event_st, altp2m_idx) - 16usize];
    ["Offset of field: vm_event_st::_pad"][::std::mem::offset_of!(vm_event_st, _pad) - 18usize];
    ["Offset of field: vm_event_st::u"][::std::mem::offset_of!(vm_event_st, u) - 24usize];
    ["Offset of field: vm_event_st::data"][::std::mem::offset_of!(vm_event_st, data) - 56usize];
};
impl Default for vm_event_st {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type vm_event_request_t = vm_event_st;
pub type vm_event_response_t = vm_event_st;
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_event_sring_entry {
    pub req: vm_event_request_t,
    pub rsp: vm_event_response_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_sring_entry"][::std::mem::size_of::<vm_event_sring_entry>() - 400usize];
    ["Alignment of vm_event_sring_entry"][::std::mem::align_of::<vm_event_sring_entry>() - 8usize];
    ["Offset of field: vm_event_sring_entry::req"]
        [::std::mem::offset_of!(vm_event_sring_entry, req) - 0usize];
    ["Offset of field: vm_event_sring_entry::rsp"]
        [::std::mem::offset_of!(vm_event_sring_entry, rsp) - 0usize];
};
impl Default for vm_event_sring_entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct vm_event_sring {
    pub req_prod: RING_IDX,
    pub req_event: RING_IDX,
    pub rsp_prod: RING_IDX,
    pub rsp_event: RING_IDX,
    pub pvt: vm_event_sring__bindgen_ty_1,
    pub __pad: [u8; 44usize],
    pub ring: __IncompleteArrayField<vm_event_sring_entry>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vm_event_sring__bindgen_ty_1 {
    pub netif: vm_event_sring__bindgen_ty_1__bindgen_ty_1,
    pub tapif_user: vm_event_sring__bindgen_ty_1__bindgen_ty_2,
    pub pvt_pad: [u8; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_sring__bindgen_ty_1__bindgen_ty_1 {
    pub smartpoll_active: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_sring__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<vm_event_sring__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Alignment of vm_event_sring__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<vm_event_sring__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: vm_event_sring__bindgen_ty_1__bindgen_ty_1::smartpoll_active"][::std::mem::offset_of!(
        vm_event_sring__bindgen_ty_1__bindgen_ty_1,
        smartpoll_active
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct vm_event_sring__bindgen_ty_1__bindgen_ty_2 {
    pub msg: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_sring__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<vm_event_sring__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Alignment of vm_event_sring__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<vm_event_sring__bindgen_ty_1__bindgen_ty_2>() - 1usize];
    ["Offset of field: vm_event_sring__bindgen_ty_1__bindgen_ty_2::msg"]
        [::std::mem::offset_of!(vm_event_sring__bindgen_ty_1__bindgen_ty_2, msg) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_sring__bindgen_ty_1"]
        [::std::mem::size_of::<vm_event_sring__bindgen_ty_1>() - 4usize];
    ["Alignment of vm_event_sring__bindgen_ty_1"]
        [::std::mem::align_of::<vm_event_sring__bindgen_ty_1>() - 1usize];
    ["Offset of field: vm_event_sring__bindgen_ty_1::netif"]
        [::std::mem::offset_of!(vm_event_sring__bindgen_ty_1, netif) - 0usize];
    ["Offset of field: vm_event_sring__bindgen_ty_1::tapif_user"]
        [::std::mem::offset_of!(vm_event_sring__bindgen_ty_1, tapif_user) - 0usize];
    ["Offset of field: vm_event_sring__bindgen_ty_1::pvt_pad"]
        [::std::mem::offset_of!(vm_event_sring__bindgen_ty_1, pvt_pad) - 0usize];
};
impl Default for vm_event_sring__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_sring"][::std::mem::size_of::<vm_event_sring>() - 64usize];
    ["Alignment of vm_event_sring"][::std::mem::align_of::<vm_event_sring>() - 8usize];
    ["Offset of field: vm_event_sring::req_prod"]
        [::std::mem::offset_of!(vm_event_sring, req_prod) - 0usize];
    ["Offset of field: vm_event_sring::req_event"]
        [::std::mem::offset_of!(vm_event_sring, req_event) - 4usize];
    ["Offset of field: vm_event_sring::rsp_prod"]
        [::std::mem::offset_of!(vm_event_sring, rsp_prod) - 8usize];
    ["Offset of field: vm_event_sring::rsp_event"]
        [::std::mem::offset_of!(vm_event_sring, rsp_event) - 12usize];
    ["Offset of field: vm_event_sring::pvt"][::std::mem::offset_of!(vm_event_sring, pvt) - 16usize];
    ["Offset of field: vm_event_sring::__pad"]
        [::std::mem::offset_of!(vm_event_sring, __pad) - 20usize];
    ["Offset of field: vm_event_sring::ring"]
        [::std::mem::offset_of!(vm_event_sring, ring) - 64usize];
};
impl Default for vm_event_sring {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_event_front_ring {
    pub req_prod_pvt: RING_IDX,
    pub rsp_cons: RING_IDX,
    pub nr_ents: ::std::os::raw::c_uint,
    pub sring: *mut vm_event_sring,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_front_ring"][::std::mem::size_of::<vm_event_front_ring>() - 24usize];
    ["Alignment of vm_event_front_ring"][::std::mem::align_of::<vm_event_front_ring>() - 8usize];
    ["Offset of field: vm_event_front_ring::req_prod_pvt"]
        [::std::mem::offset_of!(vm_event_front_ring, req_prod_pvt) - 0usize];
    ["Offset of field: vm_event_front_ring::rsp_cons"]
        [::std::mem::offset_of!(vm_event_front_ring, rsp_cons) - 4usize];
    ["Offset of field: vm_event_front_ring::nr_ents"]
        [::std::mem::offset_of!(vm_event_front_ring, nr_ents) - 8usize];
    ["Offset of field: vm_event_front_ring::sring"]
        [::std::mem::offset_of!(vm_event_front_ring, sring) - 16usize];
};
impl Default for vm_event_front_ring {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_event_back_ring {
    pub rsp_prod_pvt: RING_IDX,
    pub req_cons: RING_IDX,
    pub nr_ents: ::std::os::raw::c_uint,
    pub sring: *mut vm_event_sring,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vm_event_back_ring"][::std::mem::size_of::<vm_event_back_ring>() - 24usize];
    ["Alignment of vm_event_back_ring"][::std::mem::align_of::<vm_event_back_ring>() - 8usize];
    ["Offset of field: vm_event_back_ring::rsp_prod_pvt"]
        [::std::mem::offset_of!(vm_event_back_ring, rsp_prod_pvt) - 0usize];
    ["Offset of field: vm_event_back_ring::req_cons"]
        [::std::mem::offset_of!(vm_event_back_ring, req_cons) - 4usize];
    ["Offset of field: vm_event_back_ring::nr_ents"]
        [::std::mem::offset_of!(vm_event_back_ring, nr_ents) - 8usize];
    ["Offset of field: vm_event_back_ring::sring"]
        [::std::mem::offset_of!(vm_event_back_ring, sring) - 16usize];
};
impl Default for vm_event_back_ring {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type vm_event_sring_t = vm_event_sring;
pub type vm_event_front_ring_t = vm_event_front_ring;
pub type vm_event_back_ring_t = vm_event_back_ring;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
